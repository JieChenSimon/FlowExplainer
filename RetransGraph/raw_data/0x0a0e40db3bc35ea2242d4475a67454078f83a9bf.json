{
  "contracts": {
    "reentrancy.sol": {
      "Burnable": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "Crowdsale": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x5 DUP2 SWAP1 SSTORE PUSH1 0x6 DUP2 SWAP1 SSTORE PUSH1 0x7 DUP2 SWAP1 SSTORE PUSH1 0x8 DUP1 SLOAD PUSH4 0xFFFFFFFF NOT AND SWAP1 SSTORE DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE NUMBER PUSH1 0xC SSTORE PUSH2 0x3BA2 DUP1 PUSH2 0x50 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH3 0x221 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x3CA0EED DUP2 EQ PUSH3 0x22D JUMPI DUP1 PUSH4 0xA09284A EQ PUSH3 0x257 JUMPI DUP1 PUSH4 0x11C28E1A EQ PUSH3 0x27F JUMPI DUP1 PUSH4 0x1865C57D EQ PUSH3 0x295 JUMPI DUP1 PUSH4 0x1AAE3460 EQ PUSH3 0x2D0 JUMPI DUP1 PUSH4 0x24434852 EQ PUSH3 0x2F2 JUMPI DUP1 PUSH4 0x260A5227 EQ PUSH3 0x31D JUMPI DUP1 PUSH4 0x26C25962 EQ PUSH3 0x354 JUMPI DUP1 PUSH4 0x32013AC3 EQ PUSH3 0x398 JUMPI DUP1 PUSH4 0x3473BF30 EQ PUSH3 0x3C0 JUMPI DUP1 PUSH4 0x3F52E589 EQ PUSH3 0x3D9 JUMPI DUP1 PUSH4 0x4042B66F EQ PUSH3 0x3F2 JUMPI DUP1 PUSH4 0x4A52E506 EQ PUSH3 0x408 JUMPI DUP1 PUSH4 0x4BB278F3 EQ PUSH3 0x434 JUMPI DUP1 PUSH4 0x518AB2A8 EQ PUSH3 0x44A JUMPI DUP1 PUSH4 0x58BAD3EB EQ PUSH3 0x460 JUMPI DUP1 PUSH4 0x5B7633D0 EQ PUSH3 0x487 JUMPI DUP1 PUSH4 0x5CDCF33D EQ PUSH3 0x4B9 JUMPI DUP1 PUSH4 0x5ED7CA5B EQ PUSH3 0x4CF JUMPI DUP1 PUSH4 0x7C435E6F EQ PUSH3 0x4E5 JUMPI DUP1 PUSH4 0x7F7D711E EQ PUSH3 0x4FE JUMPI DUP1 PUSH4 0x80D1CB35 EQ PUSH3 0x519 JUMPI DUP1 PUSH4 0x8772A23A EQ PUSH3 0x52F JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH3 0x545 JUMPI DUP1 PUSH4 0x9075BECF EQ PUSH3 0x55B JUMPI DUP1 PUSH4 0x97B150CA EQ PUSH3 0x571 JUMPI DUP1 PUSH4 0x99E9376C EQ PUSH3 0x593 JUMPI DUP1 PUSH4 0xA6F2AE3A EQ PUSH3 0x221 JUMPI DUP1 PUSH4 0xAF0062E4 EQ PUSH3 0x5B2 JUMPI DUP1 PUSH4 0xAF468682 EQ PUSH3 0x5C8 JUMPI DUP1 PUSH4 0xB3F05B97 EQ PUSH3 0x5DE JUMPI DUP1 PUSH4 0xB9B8AF0B EQ PUSH3 0x5F4 JUMPI DUP1 PUSH4 0xCB16E6D0 EQ PUSH3 0x60A JUMPI DUP1 PUSH4 0xCB3E64FD EQ PUSH3 0x62C JUMPI DUP1 PUSH4 0xCF16E955 EQ PUSH3 0x642 JUMPI DUP1 PUSH4 0xD1F6424F EQ PUSH3 0x658 JUMPI DUP1 PUSH4 0xD222DC04 EQ PUSH3 0x6DD JUMPI DUP1 PUSH4 0xD7E64C00 EQ PUSH3 0x6F3 JUMPI DUP1 PUSH4 0xED68FF2C EQ PUSH3 0x709 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH3 0x730 JUMPI DUP1 PUSH4 0xF4869726 EQ PUSH3 0x752 JUMPI DUP1 PUSH4 0xF8A5A8DD EQ PUSH3 0x77D JUMPI DUP1 PUSH4 0xFC0C546A EQ PUSH3 0x793 JUMPI JUMPDEST PUSH3 0x22B PUSH3 0x7A9 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH3 0x239 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x243 PUSH3 0x7B6 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH3 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH3 0x7C4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH3 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH3 0x7CA JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x2A1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x2AB PUSH3 0x7D0 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x2BC JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH3 0x2DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH3 0x848 JUMP JUMPDEST PUSH3 0x22B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD AND PUSH3 0x85A JUMP JUMPDEST PUSH3 0x22B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x24 CALLDATALOAD AND PUSH1 0xFF PUSH1 0x44 CALLDATALOAD AND PUSH1 0x64 CALLDATALOAD PUSH1 0x84 CALLDATALOAD PUSH3 0x8A3 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x360 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x36D PUSH1 0x4 CALLDATALOAD PUSH3 0x9CA JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH3 0x3A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH1 0x44 CALLDATALOAD PUSH3 0xA03 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x3CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH1 0x4 CALLDATALOAD PUSH3 0xB31 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x3E5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH1 0x4 CALLDATALOAD PUSH3 0xBB2 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH3 0xC15 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x414 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD AND PUSH3 0xC1B JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x440 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH3 0xCC4 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x456 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH3 0x105E JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x46C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD ISZERO ISZERO PUSH3 0x1064 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x493 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x49D PUSH3 0x114C JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH3 0x4C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH3 0x1163 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x4DB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH3 0x1169 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x4F1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH1 0x4 CALLDATALOAD PUSH3 0x11E1 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x50A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH1 0x4 CALLDATALOAD ISZERO ISZERO PUSH3 0x1211 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x525 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH3 0x12BB JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x53B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x243 PUSH3 0x12C1 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x551 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x49D PUSH3 0x12D0 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x567 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x49D PUSH3 0x12DF JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x57D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH3 0x12EE JUMP JUMPDEST PUSH3 0x22B PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH3 0x1300 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x5BE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH3 0x130F JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x5D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH3 0x1315 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x5EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x243 PUSH3 0x131B JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x600 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x243 PUSH3 0x1324 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x616 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x243 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH3 0x1334 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x638 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH3 0x1349 JUMP JUMPDEST PUSH3 0x22B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH3 0x13D3 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x664 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 DUP1 CALLDATALOAD DUP3 AND SWAP2 PUSH1 0x24 DUP1 CALLDATALOAD SWAP3 PUSH1 0x44 CALLDATALOAD SWAP3 PUSH1 0x64 CALLDATALOAD AND SWAP2 PUSH1 0xA4 SWAP1 PUSH1 0x84 CALLDATALOAD SWAP1 DUP2 ADD SWAP1 DUP4 ADD CALLDATALOAD DUP1 PUSH1 0x20 DUP2 DUP2 MUL ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP4 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP4 PUSH1 0x20 MUL DUP1 DUP3 DUP5 CALLDATACOPY POP SWAP5 SWAP7 POP POP DUP5 CALLDATALOAD SWAP5 PUSH1 0x20 DUP2 ADD CALLDATALOAD SWAP5 POP PUSH1 0xFF PUSH1 0x40 DUP3 ADD CALLDATALOAD AND SWAP4 POP PUSH1 0x60 ADD CALLDATALOAD SWAP2 POP PUSH3 0x140E SWAP1 POP JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x6E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x243 PUSH3 0x167E JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x6FF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH3 0x168E JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x715 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH1 0x4 CALLDATALOAD ISZERO ISZERO PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x24 CALLDATALOAD AND PUSH3 0x1694 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x73C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x22B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH3 0x1765 JUMP JUMPDEST PUSH3 0x22B PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0xFF PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH1 0x64 CALLDATALOAD PUSH3 0x17C6 JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x789 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x26D PUSH3 0x17DB JUMP JUMPDEST CALLVALUE ISZERO PUSH3 0x79F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x49D PUSH3 0x17E1 JUMP JUMPDEST PUSH3 0x7B4 CALLER PUSH3 0x13D3 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD DUP2 JUMP JUMPDEST PUSH1 0xF SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xFF AND ISZERO PUSH3 0x7E8 JUMPI POP PUSH1 0x5 PUSH3 0x845 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH3 0x804 JUMPI POP PUSH1 0x1 PUSH3 0x845 JUMP JUMPDEST PUSH1 0x3 SLOAD TIMESTAMP LT ISZERO PUSH3 0x818 JUMPI POP PUSH1 0x2 PUSH3 0x845 JUMP JUMPDEST PUSH1 0x4 SLOAD TIMESTAMP GT ISZERO DUP1 ISZERO PUSH3 0x832 JUMPI POP PUSH3 0x830 PUSH3 0x17F0 JUMP JUMPDEST ISZERO JUMPDEST ISZERO PUSH3 0x841 JUMPI POP PUSH1 0x3 PUSH3 0x845 JUMP JUMPDEST POP PUSH1 0x4 JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST DUP1 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO ISZERO PUSH3 0x87A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 SLOAD PUSH4 0x1000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x892 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x89E DUP4 DUP4 PUSH3 0x17FB JUMP JUMPDEST POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP5 PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP2 AND ISZERO ISZERO PUSH3 0x8C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP8 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 SWAP1 SWAP2 AND PUSH13 0x1000000000000000000000000 MUL DUP2 MSTORE PUSH1 0x14 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP7 PUSH2 0x646E GAS SUB CALL ISZERO ISZERO PUSH3 0x912 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD DUP1 MLOAD PUSH1 0x8 SLOAD SWAP1 SWAP4 POP PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP PUSH1 0x1 DUP4 DUP8 DUP8 DUP8 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x20 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x40 DUP1 DUP6 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x60 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x80 SWAP1 SWAP3 ADD SWAP2 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 PUSH1 0x0 DUP7 PUSH2 0x646E GAS SUB CALL ISZERO ISZERO PUSH3 0x998 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x20 PUSH1 0x40 MLOAD SUB MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ PUSH3 0x9B5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x9C1 DUP8 DUP8 PUSH3 0x17FB JUMP JUMPDEST POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0xD DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH3 0x9D9 JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 POP SWAP2 SWAP1 DUP5 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0xA22 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xA2E PUSH3 0x7D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0xA3F JUMPI INVALID JUMPDEST EQ DUP1 PUSH3 0xA58 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0xA56 JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 0xA64 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND ISZERO ISZERO PUSH3 0xA7A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH3 0xAF7 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0x313CE567 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0xAC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0xADA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD DUP8 SWAP2 POP PUSH1 0xFF AND PUSH1 0xA EXP PUSH4 0xFFFFFFFF PUSH3 0x1958 AND JUMP JUMPDEST SWAP3 POP DUP3 ISZERO ISZERO PUSH3 0xB06 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0xB18 DUP5 DUP5 PUSH4 0xFFFFFFFF PUSH3 0x1958 AND JUMP JUMPDEST SWAP2 POP PUSH3 0xB29 DUP4 DUP4 DUP9 PUSH1 0x0 PUSH3 0x1986 JUMP JUMPDEST POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0xB4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0xB59 PUSH3 0x7D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0xB6A JUMPI INVALID JUMPDEST EQ DUP1 PUSH3 0xB83 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0xB81 JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 0xB8F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST TIMESTAMP DUP3 GT DUP1 ISZERO PUSH3 0xBA0 JUMPI POP PUSH1 0x3 SLOAD DUP3 GT JUMPDEST ISZERO ISZERO PUSH3 0xBAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0xBCE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP1 PUSH3 0xBDB PUSH3 0x7D0 JUMP JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH3 0xBE7 JUMPI INVALID JUMPDEST EQ PUSH3 0xBF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST TIMESTAMP DUP3 GT DUP1 ISZERO PUSH3 0xC03 JUMPI POP PUSH1 0x4 SLOAD DUP3 LT JUMPDEST ISZERO ISZERO PUSH3 0xC0F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD DUP2 JUMP JUMPDEST PUSH3 0xC25 PUSH3 0x1AAE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO ISZERO PUSH3 0xC45 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0x95EA7B3 DUP5 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0xCA3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0xCB5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x4 DUP1 PUSH3 0xCD4 PUSH3 0x7D0 JUMP JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH3 0xCE0 JUMPI INVALID JUMPDEST EQ PUSH3 0xCEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0xD07 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0xD1F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xF SLOAD PUSH1 0x5 SLOAD PUSH3 0xD36 SWAP2 PUSH4 0xFFFFFFFF PUSH3 0x1ABD AND JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP4 POP PUSH3 0xDDC SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0x313CE567 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0xD87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0xD99 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD PUSH1 0xFF AND PUSH1 0xA EXP SWAP1 POP PUSH3 0xDCF PUSH1 0x4B PUSH3 0xDC2 DUP8 PUSH1 0x19 PUSH4 0xFFFFFFFF PUSH3 0x1958 AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH3 0x1ACD AND JUMP JUMPDEST SWAP1 PUSH4 0xFFFFFFFF PUSH3 0x1958 AND JUMP JUMPDEST PUSH1 0x1 DUP1 SLOAD SWAP2 SWAP4 POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH4 0x43214675 SWAP1 ADDRESS SWAP1 PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0xE3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0xE4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND SWAP3 POP PUSH4 0x40C10F19 SWAP2 AND DUP5 PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0xEB0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0xEC2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP PUSH4 0x43214675 ADDRESS PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0xF20 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0xF32 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP PUSH4 0x5F412D4F PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0xF76 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0xF88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP PUSH4 0x42966C68 DUP2 PUSH4 0x70A08231 ADDRESS PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP5 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0xFEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0xFFE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD SWAP1 POP PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP5 AND MUL DUP2 MSTORE PUSH1 0x4 DUP2 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0x103F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0x1051 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH3 0x89E PUSH3 0x1AE5 JUMP JUMPDEST PUSH1 0x5 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0x1080 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x108C PUSH3 0x7D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x109D JUMPI INVALID JUMPDEST EQ DUP1 PUSH3 0x10B6 JUMPI POP PUSH1 0x3 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x10B4 JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 0x10C2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x10DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP5 ISZERO ISZERO OR SWAP1 SSTORE PUSH32 0xA54714518C5D275FDCD3D2A461E4858E4E8CB04FB93CD0BCA9D6D34115F26440 SWAP1 DUP5 SWAP1 DUP5 SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x10 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0x1185 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND PUSH1 0xA0 PUSH1 0x2 EXP OR SWAP1 SSTORE PUSH32 0x92333B0B676476985757350034668CB9EE247674AC7A7479DE10CD761381F733 PUSH1 0x1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0x11FD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x64 DUP2 LT ISZERO PUSH3 0x120C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x10 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0x122D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH2 0xFF00 NOT AND PUSH2 0x100 DUP4 ISZERO ISZERO DUP2 MUL SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE PUSH32 0x48D826081348F5F00E8A33C9AE8CE89ED4C6E88400B585A478BC203D9E8177D3 SWAP2 PUSH1 0xFF SWAP2 DUP2 DIV DUP3 AND SWAP2 PUSH4 0x1000000 DUP3 DIV AND SWAP1 PUSH5 0x100000000 SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x40 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0xC SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH3 0x10000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH3 0x130C CALLER DUP3 PUSH3 0x85A JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0xE SLOAD DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0x1365 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH3 0x137E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND DUP2 SSTORE PUSH32 0x92333B0B676476985757350034668CB9EE247674AC7A7479DE10CD761381F733 SWAP1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH4 0x1000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x13EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x1401 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x130C DUP2 PUSH1 0x0 PUSH3 0x17FB JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0x142A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xF DUP5 SWAP1 SSTORE DUP4 DUP3 DUP11 DUP9 PUSH3 0x143D PUSH3 0x2175 JUMP JUMPDEST SWAP4 DUP5 MSTORE PUSH1 0xFF SWAP1 SWAP3 AND PUSH1 0x20 DUP5 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x40 DUP1 DUP6 ADD SWAP2 SWAP1 SWAP2 MSTORE SWAP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 PUSH1 0x0 CREATE DUP1 ISZERO ISZERO PUSH3 0x1480 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 DUP4 AND OR DUP1 DUP3 SSTORE SWAP1 SWAP2 AND SWAP1 PUSH4 0x43214675 SWAP1 ADDRESS SWAP1 PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0x14FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0x150E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP PUSH4 0x29FF4F53 ADDRESS PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP5 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0x1563 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0x1575 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP2 POP PUSH4 0x2F652A3 SWAP1 ADDRESS SWAP1 PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE ISZERO ISZERO PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0x15D4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0x15E6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 POP PUSH4 0x40C10F19 ADDRESS DUP6 PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0x1641 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0x1653 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0xE DUP2 SWAP1 SSTORE PUSH3 0x1668 DUP10 DUP10 DUP10 PUSH3 0x1B79 JUMP JUMPDEST PUSH3 0x1673 DUP6 PUSH3 0x1BFC JUMP JUMPDEST POP POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH4 0x1000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x7 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0x16B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH4 0xFF000000 NOT AND PUSH4 0x1000000 DUP5 ISZERO ISZERO DUP2 MUL SWAP2 SWAP1 SWAP2 OR PUSH24 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000 NOT AND PUSH5 0x100000000 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 DUP2 AND DUP3 MUL SWAP3 SWAP1 SWAP3 OR SWAP4 DUP5 SWAP1 SSTORE PUSH32 0x48D826081348F5F00E8A33C9AE8CE89ED4C6E88400B585A478BC203D9E8177D3 SWAP4 PUSH1 0xFF PUSH2 0x100 DUP3 DIV DUP2 AND SWAP5 DUP3 DIV AND SWAP3 SWAP2 SWAP1 DIV AND PUSH1 0x40 MLOAD SWAP3 ISZERO ISZERO DUP4 MSTORE SWAP1 ISZERO ISZERO PUSH1 0x20 DUP4 ADD MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x40 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH1 0x60 SWAP1 SWAP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0x1781 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 0x1797 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH3 0x17D5 CALLER DUP6 DUP6 DUP6 DUP6 PUSH3 0x8A3 JUMP JUMPDEST POP POP POP POP JUMP JUMPDEST PUSH1 0xD SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0xE SLOAD PUSH1 0x5 SLOAD LT ISZERO SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP2 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x1816 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x1822 PUSH3 0x7D0 JUMP JUMPDEST SWAP1 POP PUSH1 0x2 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x1833 JUMPI INVALID JUMPDEST EQ DUP1 PUSH3 0x184C JUMPI POP PUSH1 0x3 DUP2 PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x184A JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH3 0x1858 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 PUSH3 0x1864 PUSH3 0x7D0 JUMP JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x1870 JUMPI INVALID JUMPDEST EQ ISZERO PUSH3 0x189F JUMPI PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xB PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH3 0x189F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x18AB CALLVALUE DUP7 PUSH3 0x1E12 JUMP JUMPDEST SWAP1 SWAP4 POP SWAP2 POP CALLVALUE DUP4 GT ISZERO PUSH3 0x18BB JUMPI INVALID JUMPDEST DUP2 ISZERO ISZERO PUSH3 0x18C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD ISZERO ISZERO PUSH3 0x18F2 JUMPI PUSH1 0x7 DUP1 SLOAD PUSH1 0x1 ADD SWAP1 SSTORE JUMPDEST PUSH3 0x1900 DUP3 DUP5 DUP8 DUP8 PUSH3 0x1986 JUMP JUMPDEST PUSH1 0x2 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP4 ISZERO PUSH2 0x8FC MUL DUP5 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH3 0x1934 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1951 PUSH3 0x194A CALLVALUE DUP6 PUSH4 0xFFFFFFFF PUSH3 0x1F63 AND JUMP JUMPDEST CALLER PUSH3 0x1F76 JUMP JUMPDEST POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 MUL DUP4 ISZERO DUP1 PUSH3 0x1976 JUMPI POP DUP3 DUP5 DUP3 DUP2 ISZERO ISZERO PUSH3 0x1973 JUMPI INVALID JUMPDEST DIV EQ JUMPDEST ISZERO ISZERO PUSH3 0x197F JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x19B1 SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH3 0x1ABD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x9 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE PUSH1 0xA SWAP1 MSTORE KECCAK256 SLOAD PUSH3 0x19E8 SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH3 0x1ABD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0xA PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH1 0x6 SLOAD PUSH3 0x1A16 SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH3 0x1ABD AND JUMP JUMPDEST PUSH1 0x6 SSTORE PUSH1 0x5 SLOAD PUSH3 0x1A2E SWAP1 DUP6 PUSH4 0xFFFFFFFF PUSH3 0x1ABD AND JUMP JUMPDEST PUSH1 0x5 SSTORE PUSH3 0x1A3D DUP3 DUP6 PUSH3 0x1FB6 JUMP JUMPDEST PUSH32 0x396F60AAAD038749091D273DC13AAABC63DB6E2271C7BAD442D5CF25CC43350 DUP3 DUP5 DUP7 DUP5 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP5 AND DUP5 MSTORE PUSH1 0x20 DUP5 ADD SWAP3 SWAP1 SWAP3 MSTORE PUSH1 0x40 DUP1 DUP5 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH16 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF SWAP1 SWAP2 AND PUSH1 0x60 DUP4 ADD MSTORE PUSH1 0x80 SWAP1 SWAP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH3 0x197F JUMPI INVALID JUMPDEST PUSH1 0x0 DUP1 DUP3 DUP5 DUP2 ISZERO ISZERO PUSH3 0x1ADC JUMPI INVALID JUMPDEST DIV SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x4 DUP1 PUSH3 0x1AF2 PUSH3 0x7D0 JUMP JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x1AFE JUMPI INVALID JUMPDEST EQ PUSH3 0x1B09 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH3 0x1B25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH3 0x1B3D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH32 0x6823B073D48D6E3A7D385EEB601452D680E74BB46AFE3255A7D778F3A9B17681 PUSH1 0x40 MLOAD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 DUP1 PUSH3 0x1B86 PUSH3 0x7D0 JUMP JUMPDEST PUSH1 0x5 DUP2 GT ISZERO PUSH3 0x1B92 JUMPI INVALID JUMPDEST EQ PUSH3 0x1B9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1BA8 DUP5 PUSH3 0x2036 JUMP JUMPDEST DUP3 ISZERO DUP1 ISZERO SWAP1 PUSH3 0x1BB7 JUMPI POP DUP2 ISZERO ISZERO JUMPDEST ISZERO ISZERO PUSH3 0x1BC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP3 TIMESTAMP LT DUP1 ISZERO PUSH3 0x1BD2 JUMPI POP DUP2 DUP4 LT JUMPDEST ISZERO ISZERO PUSH3 0x1BDE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x3 SWAP2 SWAP1 SWAP2 SSTORE PUSH1 0x4 SSTORE POP PUSH1 0x8 DUP1 SLOAD PUSH3 0xFF0000 NOT AND PUSH3 0x10000 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH3 0x1C08 PUSH3 0x2186 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x4 DUP10 MLOAD DUP2 ISZERO ISZERO PUSH3 0x1C1F JUMPI INVALID JUMPDEST MOD ISZERO PUSH3 0x1C2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP10 PUSH1 0x0 DUP2 MLOAD DUP2 LT PUSH3 0x1C3B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD GT PUSH3 0x1C50 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH3 0x1C65 PUSH1 0x4 DUP11 MLOAD SWAP1 PUSH4 0xFFFFFFFF PUSH3 0x1ACD AND JUMP JUMPDEST SWAP8 POP PUSH1 0x0 SWAP6 POP JUMPDEST DUP8 DUP7 LT ISZERO PUSH3 0x1673 JUMPI PUSH3 0x1C88 DUP7 PUSH1 0x4 PUSH4 0xFFFFFFFF PUSH3 0x1958 AND JUMP JUMPDEST SWAP5 POP DUP9 PUSH3 0x1C9E DUP7 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH3 0x1ABD AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH3 0x1CA9 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SWAP4 POP DUP9 PUSH3 0x1CC9 DUP7 PUSH1 0x1 PUSH4 0xFFFFFFFF PUSH3 0x1ABD AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH3 0x1CD4 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SWAP3 POP DUP9 PUSH3 0x1CF4 DUP7 PUSH1 0x2 PUSH4 0xFFFFFFFF PUSH3 0x1ABD AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH3 0x1CFF JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SWAP2 POP DUP9 PUSH3 0x1D1F DUP7 PUSH1 0x3 PUSH4 0xFFFFFFFF PUSH3 0x1ABD AND JUMP JUMPDEST DUP2 MLOAD DUP2 LT PUSH3 0x1D2A JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x20 ADD SWAP1 PUSH1 0x20 MUL ADD MLOAD SWAP1 POP DUP2 DUP4 LT DUP1 ISZERO PUSH3 0x1D45 JUMPI POP DUP2 TIMESTAMP LT JUMPDEST ISZERO ISZERO PUSH3 0x1D51 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP6 ISZERO DUP1 PUSH3 0x1D6F JUMPI POP DUP7 PUSH1 0x40 ADD MLOAD DUP3 LT ISZERO DUP1 ISZERO PUSH3 0x1D6F JUMPI POP DUP7 MLOAD DUP5 GT JUMPDEST DUP1 PUSH3 0x1D8B JUMPI POP DUP7 PUSH1 0x40 ADD MLOAD DUP3 GT DUP1 ISZERO PUSH3 0x1D8B JUMPI POP DUP7 MLOAD DUP5 LT ISZERO JUMPDEST ISZERO ISZERO PUSH3 0x1D97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE POP SWAP7 POP PUSH1 0xD DUP1 SLOAD DUP1 PUSH1 0x1 ADD DUP3 DUP2 PUSH3 0x1DD1 SWAP2 SWAP1 PUSH3 0x21AF JUMP JUMPDEST PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x20 SWAP1 SWAP3 KECCAK256 DUP10 SWAP2 PUSH1 0x4 MUL ADD DUP2 MLOAD DUP2 SSTORE PUSH1 0x20 DUP3 ADD MLOAD DUP2 PUSH1 0x1 ADD SSTORE PUSH1 0x40 DUP3 ADD MLOAD DUP2 PUSH1 0x2 ADD SSTORE PUSH1 0x60 DUP3 ADD MLOAD PUSH1 0x3 SWAP1 SWAP2 ADD SSTORE POP POP PUSH1 0x1 SWAP1 SWAP6 ADD SWAP5 PUSH3 0x1C6C JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH3 0x1E33 PUSH2 0x3E8 PUSH3 0xDC2 PUSH1 0x10 SLOAD PUSH3 0xDCF PUSH1 0x5 SLOAD PUSH3 0x207B JUMP JUMPDEST SWAP2 POP PUSH3 0x1E60 DUP3 PUSH3 0xDC2 PUSH8 0xDE0B6B3A7640000 PUSH3 0xDCF PUSH1 0x5 SLOAD PUSH1 0xE SLOAD PUSH3 0x1F63 SWAP1 SWAP2 SWAP1 PUSH4 0xFFFFFFFF AND JUMP JUMPDEST SWAP1 POP PUSH3 0x1E74 DUP2 DUP8 PUSH4 0xFFFFFFFF PUSH3 0x2092 AND JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 SWAP5 POP PUSH1 0x64 SWAP1 PUSH3 0x1F04 SWAP1 DUP7 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0x70A08231 DUP10 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP5 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND PUSH1 0x4 DUP3 ADD MSTORE PUSH1 0x24 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0x1EDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0x1EED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD SWAP2 SWAP1 POP PUSH4 0xFFFFFFFF PUSH3 0x1ABD AND JUMP JUMPDEST LT ISZERO PUSH3 0x1F10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP7 LT ISZERO PUSH3 0x1F40 JUMPI PUSH3 0x1F38 PUSH8 0xDE0B6B3A7640000 PUSH3 0xDC2 DUP5 DUP10 PUSH4 0xFFFFFFFF PUSH3 0x1958 AND JUMP JUMPDEST SWAP3 POP PUSH3 0x1F5A JUMP JUMPDEST PUSH1 0x5 SLOAD PUSH1 0xE SLOAD PUSH3 0x1F57 SWAP2 PUSH4 0xFFFFFFFF PUSH3 0x1F63 AND JUMP JUMPDEST SWAP3 POP JUMPDEST POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH3 0x1F70 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 GT ISZERO PUSH3 0x1FB2 JUMPI PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND DUP3 ISZERO PUSH2 0x8FC MUL DUP4 PUSH1 0x40 MLOAD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 DUP6 DUP9 DUP9 CALL SWAP4 POP POP POP POP ISZERO ISZERO PUSH3 0x1FB2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0xA9059CBB DUP4 DUP4 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH3 0x2016 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH3 0x2028 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 0x204C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x2 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 PUSH3 0x2088 DUP3 PUSH3 0x20AA JUMP JUMPDEST PUSH1 0x3 ADD SLOAD SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 DUP4 LT PUSH3 0x20A3 JUMPI DUP2 PUSH3 0x197F JUMP JUMPDEST POP SWAP1 SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 JUMPDEST PUSH1 0xD SLOAD DUP2 LT ISZERO PUSH3 0x216A JUMPI TIMESTAMP PUSH1 0xD DUP3 DUP2 SLOAD DUP2 LT ISZERO ISZERO PUSH3 0x20CA JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x1 ADD SLOAD GT ISZERO DUP1 ISZERO PUSH3 0x210A JUMPI POP PUSH1 0xD DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH3 0x20F5 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x2 ADD SLOAD TIMESTAMP LT JUMPDEST DUP1 ISZERO PUSH3 0x2136 JUMPI POP PUSH1 0xD DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH3 0x2121 JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD PUSH1 0x0 ADD SLOAD DUP4 LT JUMPDEST ISZERO PUSH3 0x2161 JUMPI PUSH1 0xD DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH3 0x214B JUMPI INVALID JUMPDEST SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x4 MUL ADD SWAP2 POP PUSH3 0x216F JUMP JUMPDEST PUSH1 0x1 ADD PUSH3 0x20AE JUMP JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST POP SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x196C DUP1 PUSH3 0x220B DUP4 CODECOPY ADD SWAP1 JUMP JUMPDEST PUSH1 0x80 PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x0 DUP2 MSTORE POP SWAP1 JUMP JUMPDEST DUP2 SLOAD DUP2 DUP4 SSTORE DUP2 DUP2 ISZERO GT PUSH3 0x89E JUMPI PUSH1 0x0 DUP4 DUP2 MSTORE PUSH1 0x20 SWAP1 KECCAK256 PUSH3 0x89E SWAP2 PUSH3 0x845 SWAP2 PUSH1 0x4 SWAP2 DUP3 MUL DUP2 ADD SWAP2 DUP6 MUL ADD JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x2206 JUMPI PUSH1 0x0 DUP1 DUP3 SSTORE PUSH1 0x1 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x2 DUP3 ADD DUP2 SWAP1 SSTORE PUSH1 0x3 DUP3 ADD SSTORE PUSH1 0x4 ADD PUSH3 0x21DC JUMP JUMPDEST POP SWAP1 JUMP STOP PUSH1 0x60 PUSH1 0x40 SWAP1 DUP2 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x0 PUSH1 0xA SSTORE DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH32 0x546F6B656E486F6D650000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xB SWAP1 DUP1 MLOAD PUSH3 0x6C SWAP3 SWAP2 PUSH1 0x20 ADD SWAP1 PUSH3 0x32B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH32 0x5448000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xC SWAP1 DUP1 MLOAD PUSH3 0xB6 SWAP3 SWAP2 PUSH1 0x20 ADD SWAP1 PUSH3 0x32B JUMP JUMPDEST POP CALLVALUE ISZERO PUSH3 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP1 PUSH3 0x196C DUP4 CODECOPY DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP1 MLOAD SWAP2 SWAP1 PUSH1 0x20 ADD DUP1 MLOAD SWAP2 SWAP1 PUSH1 0x20 ADD DUP1 MLOAD SWAP2 SWAP1 PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE SWAP1 SWAP3 POP DUP4 SWAP2 POP DUP6 SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP3 AND ISZERO ISZERO PUSH3 0x128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP1 PUSH3 0x134 JUMPI POP DUP3 ISZERO ISZERO JUMPDEST ISZERO ISZERO PUSH3 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 GT ISZERO PUSH3 0x164 JUMPI PUSH3 0x164 DUP3 DUP5 PUSH5 0x100000000 PUSH3 0x122D PUSH3 0x1E4 DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x190 SWAP1 POP DUP2 PUSH5 0x100000000 PUSH3 0x14FC PUSH3 0x2DC DUP3 MUL OR DIV JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 0x1A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0xA8 PUSH1 0x2 EXP SUB NOT PUSH1 0xFF SWAP1 SWAP6 AND PUSH1 0xFF NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP4 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE POP PUSH3 0x3D0 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH3 0x201 SWAP1 DUP3 PUSH5 0x100000000 PUSH3 0x13CD PUSH3 0x314 DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x236 SWAP1 DUP3 PUSH5 0x100000000 PUSH3 0x13CD PUSH3 0x314 DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH32 0x30385C845B448A36257A6A1716E6AD2E1BC2CBE333CDE1E69FE849AD6511ADFE SWAP1 DUP4 SWAP1 DUP4 SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH3 0x324 JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x36E JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x39E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x39E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x39E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x381 JUMP JUMPDEST POP PUSH3 0x3AC SWAP3 SWAP2 POP PUSH3 0x3B0 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x3CD SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x3AC JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x3B7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x158C DUP1 PUSH3 0x3E0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x192 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x2F652A3 DUP2 EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x5D2035B EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0x29FF4F53 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x325 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x42C1867B EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x43214675 EQ PUSH2 0x37C JUMPI DUP1 PUSH4 0x45977D03 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0x4A52E506 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x5DE4CCB0 EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0x5F412D4F EQ PUSH2 0x40E JUMPI DUP1 PUSH4 0x600440CB EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0x8444B391 EQ PUSH2 0x453 JUMPI DUP1 PUSH4 0x867C2857 EQ PUSH2 0x48A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4A9 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4BC JUMPI DUP1 PUSH4 0x96132521 EQ PUSH2 0x4CF JUMPI DUP1 PUSH4 0x9738968C EQ PUSH2 0x4E2 JUMPI DUP1 PUSH4 0xA64278CE EQ PUSH2 0x4F5 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0xAC3CB72C EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0xC752FF62 EQ PUSH2 0x54C JUMPI DUP1 PUSH4 0xD1F276D3 EQ PUSH2 0x55F JUMPI DUP1 PUSH4 0xD7E7088A EQ PUSH2 0x572 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x591 JUMPI DUP1 PUSH4 0xE2301D02 EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0xEA56A44D EQ PUSH2 0x5D8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5F7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD ISZERO ISZERO PUSH2 0x616 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH2 0x677 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F7 PUSH2 0x680 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x233 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x21B JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x260 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x71E JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A3 PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x7CB JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x81F JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30F PUSH2 0x884 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x88D JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x4 CALLDATALOAD PUSH2 0x8D2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x8DF JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD ISZERO ISZERO PUSH2 0x8F4 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x4 CALLDATALOAD PUSH2 0x990 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x3C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD AND PUSH2 0xABA JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x3EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F2 PUSH2 0xB5E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH2 0xB6D JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F2 PUSH2 0xB9F JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0xBAE JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x466 PUSH2 0xBC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x476 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0xC14 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F2 PUSH2 0xC29 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F7 PUSH2 0xC38 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH2 0xCA3 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x4ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH2 0xCB3 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F2 PUSH2 0xCD7 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0xCEB JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x535 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0xD3D JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A3 PUSH2 0xDE2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x56A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F2 PUSH2 0xDE8 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x57D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0xDF7 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x59C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0xFAE JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x5C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0xFD9 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x10AC JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x716 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6EB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x716 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6F9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x750 JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x75B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x800 JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO ISZERO PUSH2 0x80B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x816 DUP6 DUP6 DUP6 PUSH2 0x112F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x83A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x854 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x8B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x8C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8CE DUP3 DUP3 PUSH2 0x122D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x8DC CALLER DUP3 PUSH2 0x12FF JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x90F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x91F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 ISZERO ISZERO OR SWAP1 SSTORE PUSH32 0x4B0ADF6C802794C7DDE28A08A4E07131ABCFF3BF9603CD71F14F90BEC7865EFA SWAP1 DUP4 SWAP1 DUP4 SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x99A PUSH2 0xBC9 JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x9AA JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x9C1 JUMPI POP PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x9BF JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 0x9CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ISZERO ISZERO PUSH2 0x9D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0x753E88E5 CALLER DUP5 PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 0xA2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH2 0xA3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH2 0xA4C CALLER DUP4 PUSH2 0x12FF JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0xA5F SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0xA SSTORE PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND SWAP2 PUSH32 0x7E5C344A8141A805725CB476F76C6953B842222B967EDD1F78DDB6E8B3F397AC SWAP2 AND DUP5 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0xAC2 PUSH2 0x13E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO ISZERO PUSH2 0xAE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0x95EA7B3 DUP5 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 0xB3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH2 0xB4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD POP POP POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0xB88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xB9D PUSH2 0x13F7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBD3 PUSH2 0xCB3 JUMP JUMPDEST ISZERO ISZERO PUSH2 0xBE1 JUMPI POP PUSH1 0x1 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO ISZERO PUSH2 0xBFB JUMPI POP PUSH1 0x2 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0xA SLOAD ISZERO ISZERO PUSH2 0xC0C JUMPI POP PUSH1 0x3 PUSH2 0x7C8 JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x716 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6EB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x716 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xCD2 JUMPI POP PUSH2 0xCD2 PUSH2 0x1438 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xD20 JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO ISZERO PUSH2 0xD2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD35 DUP5 DUP5 PUSH2 0x143D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SLOAD PUSH2 0xD75 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP11 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0xE12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE1A PUSH2 0xCB3 JUMP JUMPDEST ISZERO ISZERO PUSH2 0xE25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0xE3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 PUSH2 0xE44 PUSH2 0xBC9 JUMP JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xE4F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xE5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE AND PUSH4 0x61D3D7A6 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 0xEC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH2 0xED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD SWAP1 POP ISZERO ISZERO PUSH2 0xEEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEF3 PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0x4B2BA0DD PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH2 0xF4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD SWAP1 POP EQ ISZERO ISZERO PUSH2 0xF62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH32 0x7845D5AA74CC410E35571258D954F23B82276E160FE8C188FA80566580F279CC SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SLOAD DUP1 DUP4 GT ISZERO PUSH2 0x1036 JUMPI PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SSTORE PUSH2 0x1046 JUMP JUMPDEST PUSH2 0xD75 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x10C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8DC DUP2 PUSH2 0x14FC JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x10EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x1100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER SWAP1 SWAP6 AND DUP4 MSTORE SWAP4 DUP2 MSTORE DUP4 DUP3 KECCAK256 SLOAD SWAP3 DUP3 MSTORE PUSH1 0x1 SWAP1 MSTORE SWAP2 DUP3 KECCAK256 SLOAD PUSH2 0x1173 SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x11A8 SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x11D1 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1541 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x1240 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x126B SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH32 0x30385C845B448A36257A6A1716E6AD2E1BC2CBE333CDE1E69FE849AD6511ADFE SWAP1 DUP4 SWAP1 DUP4 SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1541 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1328 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE SLOAD PUSH2 0x1355 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1541 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH32 0x696DE425F79F4A40BC6D2122CA50507F0EFBEABBFF86A84871B7196AB8EA8DF7 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x13DC JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x1412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND PUSH1 0xA0 PUSH1 0x2 EXP OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1466 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x149B SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 CALLER SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1541 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x14F6 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x1511 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP STOP 0xdd CALLCODE MSTORE 0xad 0x1b 0xe2 0xc8 SWAP12 PUSH10 0xC2B068FC378DAA952BA7 CALL PUSH4 0xC4A11628 0xf5 GAS 0x4d 0xf5 0x23 0xb3 0xef LOG1 PUSH6 0x627A7A723058 KECCAK256 BALANCE PUSH31 0x47E4B0E46848D401CBCF9D53212C7DF821BC4BF4F6EE8FC5695ACFF3B36500 0x29 LOG1 PUSH6 0x627A7A723058 KECCAK256 0xf8 AND DUP12 0xbd SELFDESTRUCT 0xa6 PUSH31 0x53A0A6A128188AB272193277C2890D504C47770F6C36ACB268002900000000 ",
            "sourceMap": "42455:5285:0:-;;;25443:1;25418:26;;;;25499:25;;;;25582:29;;;;25661;;;-1:-1:-1;;26136:41:0;;;969:18;;-1:-1:-1;;;;;977:10:0;969:18;-1:-1:-1;;;;;;969:18:0;;;;;;38098:12;38084:11;:26;42455:5285;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.19+commit.c4cbbb05\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"requireCustomerId\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"endsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"initial_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"investedAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"buyOnBehalfWithCustomerId\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"customerId\",\"type\":\"uint128\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyOnBehalfWithSignedAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tranches\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"fullTokens\",\"type\":\"uint256\"},{\"name\":\"weiPrice\",\"type\":\"uint256\"}],\"name\":\"preallocate\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"endingTime\",\"type\":\"uint256\"}],\"name\":\"setEndingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"startingTime\",\"type\":\"uint256\"}],\"name\":\"setStartingTime\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"weiRaised\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"token_contract\",\"type\":\"address\"}],\"name\":\"enableLostAndFound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finalize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"tokensSold\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"setEarlyParticipantWhitelist\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"signerAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"milieurs_per_eth\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"milieurs_amount\",\"type\":\"uint256\"}],\"name\":\"updateEursPerEth\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"setRequireCustomerId\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getDeploymentBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"configured\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"multisigWallet\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenAmountOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"buyWithCustomerId\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"buy\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"sellable_tokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"startsAt\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"finalized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"earlyParticipantWhitelist\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"buyOnBehalf\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"team_multisig\",\"type\":\"address\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"token_retriever\",\"type\":\"address\"},{\"name\":\"init_tranches\",\"type\":\"uint256[]\"},{\"name\":\"multisig_supply\",\"type\":\"uint256\"},{\"name\":\"crowdsale_supply\",\"type\":\"uint256\"},{\"name\":\"token_decimals\",\"type\":\"uint8\"},{\"name\":\"max_tokens_to_sell\",\"type\":\"uint256\"}],\"name\":\"configurationCrowdsale\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"requiredSignedAddress\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"investorCount\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"bool\"},{\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"setRequireSignedAddress\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"customerId\",\"type\":\"uint128\"},{\"name\":\"v\",\"type\":\"uint8\"},{\"name\":\"r\",\"type\":\"bytes32\"},{\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"buyWithSignedAddress\",\"outputs\":[],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTranchesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"investor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"weiAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"tokenAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"customerId\",\"type\":\"uint128\"}],\"name\":\"Invested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"requireCId\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"requireSignedAddress\",\"type\":\"bool\"},{\"indexed\":false,\"name\":\"signer\",\"type\":\"address\"}],\"name\":\"InvestmentPolicyChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"Whitelisted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Finalized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"halted\",\"type\":\"bool\"}],\"name\":\"Halted\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"buyOnBehalfWithCustomerId(address,uint128)\":{\"params\":{\"customerId\":\"UUIDv4 that identifies this contributor\"}},\"buyOnBehalfWithSignedAddress(address,uint128,uint8,bytes32,bytes32)\":{\"params\":{\"customerId\":\"UUIDv4 that identifies this contributor\"}},\"buyWithCustomerId(uint128)\":{\"params\":{\"customerId\":\"UUIDv4 that identifies this contributor\"}},\"buyWithSignedAddress(uint128,uint8,bytes32,bytes32)\":{\"params\":{\"customerId\":\"UUIDv4 that identifies this contributor\"}},\"enableLostAndFound(address,uint256,address)\":{\"params\":{\"agent\":\"Address that will be able to move tokens with transferFrom\",\"token_contract\":\"Contract of the token\",\"tokens\":\"Amount of tokens approved for transfer\"}},\"preallocate(address,uint256,uint256)\":{\"params\":{\"fullTokens\":\"tokens as full tokens - decimal places are added internally.\",\"receiver\":\"Account that receives the tokens.\",\"weiPrice\":\"Price of a single indivisible token in wei.    \"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to. \"}}}},\"userdoc\":{\"methods\":{\"buy()\":{\"notice\":\"The basic entry point to participate in the crowdsale process.    * Pay for funding, get invested tokens back in the sender address.\"},\"buyOnBehalf(address)\":{\"notice\":\"Buys tokens on behalf of an address.    * Pay for funding, get invested tokens back in the receiver address.\"},\"buyOnBehalfWithCustomerId(address,uint128)\":{\"notice\":\"Investing function that recognizes the receiver.  \"},\"buyOnBehalfWithSignedAddress(address,uint128,uint8,bytes32,bytes32)\":{\"notice\":\"Investing function that recognizes the receiver and verifies he is allowed to invest. \"},\"buyWithCustomerId(uint128)\":{\"notice\":\"Investing function that recognizes the payer.  \"},\"buyWithSignedAddress(uint128,uint8,bytes32,bytes32)\":{\"notice\":\"Investing function that recognizes the payer and verifies he is allowed to invest. \"},\"finalize()\":{\"notice\":\"Finalize a successful crowdsale.    * The owner can trigger post-crowdsale actions, like releasing the tokens. Note that by default tokens are not in a released state.\"},\"getState()\":{\"notice\":\"Crowdfund state machine management.    * This function has the timed transition builtin. So there is no chance of the variable being stale.\"},\"preallocate(address,uint256,uint256)\":{\"notice\":\"Preallocate tokens for the early investors.    * Preallocated tokens have been sold before the actual crowdsale opens. This function mints the tokens and moves the crowdsale needle.    * No money is exchanged, as the crowdsale team already have received the payment. \"},\"setEarlyParticipantWhitelist(address,bool)\":{\"notice\":\"Allow addresses to do early participation.\"},\"setRequireCustomerId(bool)\":{\"notice\":\"Set policy do we need to have server-side customer ids for the investments.    \"},\"setRequireSignedAddress(bool,address)\":{\"notice\":\"Set policy if all investors must be cleared on the server side first.    * This is e.g. for the accredited investor clearing.    \"}}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"Crowdsale\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Envisioned in FirstBlood ICO contract.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control \\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\". \\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  /** \\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  function Ownable() internal {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner. \\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param newOwner The address to transfer ownership to. \\n\\n   */\\n\\n  function transferOwnership(address newOwner) onlyOwner public {\\n\\n    require(newOwner != address(0));\\n\\n    owner = newOwner;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract contract that allows children to implement an\\n\\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\\n\\n *\\n\\n */\\n\\ncontract Haltable is Ownable {\\n\\n  bool public halted;\\n\\n\\n\\n  event Halted(bool halted);\\n\\n\\n\\n  modifier stopInEmergency {\\n\\n    require(!halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier onlyInEmergency {\\n\\n    require(halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  // called by the owner on emergency, triggers stopped state\\n\\n  function halt() external onlyOwner {\\n\\n    halted = true;\\n\\n    Halted(true);\\n\\n  }\\n\\n\\n\\n  // called by the owner on end of emergency, returns to normal state\\n\\n  function unhalt() external onlyOwner onlyInEmergency {\\n\\n    halted = false;\\n\\n    Halted(false);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * Math operations with safety checks\\n\\n */\\n\\nlibrary SafeMath {\\n\\n  function mul(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a * b;\\n\\n    assert(a == 0 || c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function div(uint a, uint b) internal pure returns (uint) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    uint c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  function add(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n\\n\\n  function max256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Interface for the standard token.\\n\\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n\\n */\\n\\ncontract EIP20Token {\\n\\n\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\\n\\n  function approve(address spender, uint256 value) public returns (bool success);\\n\\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\n\\n  /**\\n\\n  ** Optional functions\\n\\n  *\\n\\n  function name() public view returns (string name);\\n\\n  function symbol() public view returns (string symbol);\\n\\n  function decimals() public view returns (uint8 decimals);\\n\\n  *\\n\\n  **/\\n\\n\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Interface for burning tokens\\n\\ncontract Burnable {\\n\\n  // @dev Destroys tokens for an account\\n\\n  // @param account Account whose tokens are destroyed\\n\\n  // @param value Amount of tokens to destroy\\n\\n  function burnTokens(address account, uint value) internal;\\n\\n  event Burned(address account, uint value);\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * Internal interface for the minting of tokens.\\n\\n */\\n\\ncontract Mintable {\\n\\n\\n\\n  /**\\n\\n   * @dev Mints tokens for an account\\n\\n   * This function should the Minted event.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal;\\n\\n\\n\\n  /** Token supply got increased and a new owner received these tokens */\\n\\n  event Minted(address receiver, uint amount);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Standard token\\n\\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\\n\\n */\\n\\ncontract StandardToken is EIP20Token, Burnable, Mintable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  uint private total_supply;\\n\\n  mapping(address => uint) private balances;\\n\\n  mapping(address => mapping (address => uint)) private allowed;\\n\\n\\n\\n\\n\\n  function totalSupply() public view returns (uint) {\\n\\n    return total_supply;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev transfer token for a specified address\\n\\n   * @param to The address to transfer to.\\n\\n   * @param value The amount to be transferred.\\n\\n   */\\n\\n  function transfer(address to, uint value) public returns (bool success) {\\n\\n    balances[msg.sender] = balances[msg.sender].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    Transfer(msg.sender, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Gets the balance of the specified address.\\n\\n   * @param account The address whose balance is to be queried.\\n\\n   * @return An uint representing the amount owned by the passed address.\\n\\n   */\\n\\n  function balanceOf(address account) public view returns (uint balance) {\\n\\n    return balances[account];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param from address The address which you want to send tokens from\\n\\n   * @param to address The address which you want to transfer to\\n\\n   * @param value uint the amout of tokens to be transfered\\n\\n   */\\n\\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\\n\\n    uint allowance = allowed[from][msg.sender];\\n\\n\\n\\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\\n\\n    // require(value <= allowance);\\n\\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\\n\\n\\n\\n    balances[from] = balances[from].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    allowed[from][msg.sender] = allowance.sub(value);\\n\\n    Transfer(from, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * @param spender The address which will spend the funds.\\n\\n   * @param value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address spender, uint value) public returns (bool success) {\\n\\n\\n\\n    // To change the approve amount you first have to reduce the addresses'\\n\\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\\n\\n    //  already 0 to mitigate the race condition described here:\\n\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n    require (value == 0 || allowed[msg.sender][spender] == 0);\\n\\n\\n\\n    allowed[msg.sender][spender] = value;\\n\\n    Approval(msg.sender, spender, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n\\n   * @param account address The address which owns the funds.\\n\\n   * @param spender address The address which will spend the funds.\\n\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n\\n   */\\n\\n  function allowance(address account, address spender) public view returns (uint remaining) {\\n\\n    return allowed[account][spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic increment of approved spending\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   *\\n\\n   */\\n\\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\\n\\n      uint oldValue = allowed[msg.sender][spender];\\n\\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic decrement of approved spending.\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   */\\n\\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\\n\\n\\n\\n      uint oldVal = allowed[msg.sender][spender];\\n\\n\\n\\n      if (subtractedValue > oldVal) {\\n\\n          allowed[msg.sender][spender] = 0;\\n\\n      } else {\\n\\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\\n\\n      }\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\\n\\n   */\\n\\n  function burnTokens(address account, uint value) internal {\\n\\n    balances[account] = balances[account].sub(value);\\n\\n    total_supply = total_supply.sub(value);\\n\\n    Transfer(account, 0, value);\\n\\n    Burned(account, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal minting function.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal {\\n\\n    total_supply = total_supply.add(amount);\\n\\n    balances[receiver] = balances[receiver].add(amount);\\n\\n    Minted(receiver, amount);\\n\\n\\n\\n    // Beware: Address zero may be used for special transactions in a future fork.\\n\\n    // This will make the mint transaction appear in EtherScan.io\\n\\n    // We can remove this after there is a standardized minting event\\n\\n    Transfer(0, receiver, amount);\\n\\n  }\\n\\n  \\n\\n}\\n\\n\\n\\n/**\\n\\n * Define interface for releasing the token transfer after a successful crowdsale.\\n\\n */\\n\\ncontract ReleasableToken is StandardToken, Ownable {\\n\\n\\n\\n  /* The finalizer contract that allows lifting the transfer limits on this token */\\n\\n  address public releaseAgent;\\n\\n\\n\\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\\n\\n  bool public released = false;\\n\\n\\n\\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\\n\\n  mapping (address => bool) public transferAgents;\\n\\n\\n\\n  /**\\n\\n   * Set the contract that can call release and make the token transferable.\\n\\n   *\\n\\n   * Since the owner of this contract is (or should be) the crowdsale,\\n\\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\\n\\n   */\\n\\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\\n\\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\\n\\n    releaseAgent = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\\n\\n   */\\n\\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\\n\\n    transferAgents[addr] = state;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * One way function to release the tokens into the wild.\\n\\n   *\\n\\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\\n\\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    released = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Limit token transfer until the crowdsale is over.\\n\\n   */\\n\\n  modifier canTransfer(address sender) {\\n\\n    require(released || transferAgents[sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only before or after the tokens have been released */\\n\\n  modifier inReleaseState(bool releaseState) {\\n\\n    require(releaseState == released);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only by a whitelisted release agent. */\\n\\n  modifier onlyReleaseAgent() {\\n\\n    require(msg.sender == releaseAgent);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** We restrict transfer by overriding it */\\n\\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\\n\\n    // Call StandardToken.transfer()\\n\\n   return super.transfer(to, value);\\n\\n  }\\n\\n\\n\\n  /** We restrict transferFrom by overriding it */\\n\\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\\n\\n    // Call StandardToken.transferForm()\\n\\n    return super.transferFrom(from, to, value);\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * First envisioned by Golem and Lunyr projects.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Inspired by Lunyr.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n */\\n\\n\\n\\n/**\\n\\n * Upgrade agent transfers tokens to a new contract.\\n\\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\\n\\n *\\n\\n * The Upgrade agent is the interface used to implement a token\\n\\n * migration in the case of an emergency.\\n\\n * The function upgradeFrom has to implement the part of the creation\\n\\n * of new tokens on behalf of the user doing the upgrade.\\n\\n *\\n\\n * The new token can implement this interface directly, or use.\\n\\n */\\n\\ncontract UpgradeAgent {\\n\\n\\n\\n  /** This value should be the same as the original token's total supply */\\n\\n  uint public originalSupply;\\n\\n\\n\\n  /** Interface to ensure the contract is correctly configured */\\n\\n  function isUpgradeAgent() public pure returns (bool) {\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  Upgrade an account\\n\\n\\n\\n  When the token contract is in the upgrade status the each user will\\n\\n  have to call `upgrade(value)` function from UpgradeableToken.\\n\\n\\n\\n  The upgrade function adjust the balance of the user and the supply\\n\\n  of the previous token and then call `upgradeFrom(value)`.\\n\\n\\n\\n  The UpgradeAgent is the responsible to create the tokens for the user\\n\\n  in the new contract.\\n\\n\\n\\n  * @param from Account to upgrade.\\n\\n  * @param value Tokens to upgrade.\\n\\n\\n\\n  */\\n\\n  function upgradeFrom(address from, uint value) public;\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\\n\\n *\\n\\n */\\n\\ncontract UpgradeableToken is EIP20Token, Burnable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\\n\\n  address public upgradeMaster;\\n\\n\\n\\n  /** The next contract where the tokens will be migrated. */\\n\\n  UpgradeAgent public upgradeAgent;\\n\\n\\n\\n  /** How many tokens we have upgraded by now. */\\n\\n  uint public totalUpgraded = 0;\\n\\n\\n\\n  /**\\n\\n   * Upgrade states.\\n\\n   *\\n\\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\\n\\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\\n\\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\\n\\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\\n\\n   *\\n\\n   */\\n\\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\\n\\n\\n\\n  /**\\n\\n   * Somebody has upgraded some of his tokens.\\n\\n   */\\n\\n  event Upgrade(address indexed from, address to, uint value);\\n\\n\\n\\n  /**\\n\\n   * New upgrade agent available.\\n\\n   */\\n\\n  event UpgradeAgentSet(address agent);\\n\\n\\n\\n  /**\\n\\n   * Do not allow construction without upgrade master set.\\n\\n   */\\n\\n  function UpgradeableToken(address master) internal {\\n\\n    setUpgradeMaster(master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow the token holder to upgrade some of their tokens to a new contract.\\n\\n   */\\n\\n  function upgrade(uint value) public {\\n\\n    UpgradeState state = getUpgradeState();\\n\\n    // Ensure it's not called in a bad state\\n\\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\\n\\n\\n\\n    // Validate input value.\\n\\n    require(value != 0);\\n\\n\\n\\n    // Upgrade agent reissues the tokens\\n\\n    upgradeAgent.upgradeFrom(msg.sender, value);\\n\\n    \\n\\n    // Take tokens out from circulation\\n\\n    burnTokens(msg.sender, value);\\n\\n    totalUpgraded = totalUpgraded.add(value);\\n\\n\\n\\n    Upgrade(msg.sender, upgradeAgent, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set an upgrade agent that handles the upgrade process\\n\\n   */\\n\\n  function setUpgradeAgent(address agent) onlyMaster external {\\n\\n    // Check whether the token is in a state that we could think of upgrading\\n\\n    require(canUpgrade());\\n\\n\\n\\n    require(agent != 0x0);\\n\\n    // Upgrade has already begun for an agent\\n\\n    require(getUpgradeState() != UpgradeState.Upgrading);\\n\\n\\n\\n    upgradeAgent = UpgradeAgent(agent);\\n\\n\\n\\n    // Bad interface\\n\\n    require(upgradeAgent.isUpgradeAgent());\\n\\n    // Make sure that token supplies match in source and target\\n\\n    require(upgradeAgent.originalSupply() == totalSupply());\\n\\n\\n\\n    UpgradeAgentSet(upgradeAgent);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Get the state of the token upgrade.\\n\\n   */\\n\\n  function getUpgradeState() public view returns(UpgradeState) {\\n\\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\\n\\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\\n\\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\\n\\n    else return UpgradeState.Upgrading;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Change the upgrade master.\\n\\n   *\\n\\n   * This allows us to set a new owner for the upgrade mechanism.\\n\\n   */\\n\\n  function changeUpgradeMaster(address new_master) onlyMaster public {\\n\\n    setUpgradeMaster(new_master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal upgrade master setter.\\n\\n   */\\n\\n  function setUpgradeMaster(address new_master) private {\\n\\n    require(new_master != 0x0);\\n\\n    upgradeMaster = new_master;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Child contract can override to provide the condition in which the upgrade can begin.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n     return true;\\n\\n  }\\n\\n\\n\\n\\n\\n  modifier onlyMaster() {\\n\\n    require(msg.sender == upgradeMaster);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\\n\\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\\n\\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\\n\\ncontract LostAndFoundToken {\\n\\n  /**\\n\\n   * @return Address of the account that handles movements.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address);\\n\\n\\n\\n  /**\\n\\n   * @param agent Address that will be able to move tokens with transferFrom\\n\\n   * @param tokens Amount of tokens approved for transfer\\n\\n   * @param token_contract Contract of the token\\n\\n   */\\n\\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\\n\\n    require(msg.sender == getLostAndFoundMaster());\\n\\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\\n\\n    //  getting them stuck in another address by accident.\\n\\n    token_contract.approve(agent, tokens);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * A public interface to increase the supply of a token.\\n\\n *\\n\\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\\n\\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\\n\\n *\\n\\n */\\n\\ncontract MintableToken is Mintable, Ownable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n  /** List of agents that are allowed to create new tokens */\\n\\n  mapping (address => bool) public mintAgents;\\n\\n\\n\\n  event MintingAgentChanged(address addr, bool state);\\n\\n\\n\\n\\n\\n  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\\n\\n    require(multisig != address(0));\\n\\n    // Cannot create a token without supply and no minting\\n\\n    require(mintable || initialSupply != 0);\\n\\n    // Create initially all balance on the team multisig\\n\\n    if (initialSupply > 0)\\n\\n      mintInternal(multisig, initialSupply);\\n\\n    // No more new supply allowed after the token creation\\n\\n    mintingFinished = !mintable;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Create new tokens and allocate them to an address.\\n\\n   *\\n\\n   * Only callable by a mint agent (e.g. crowdsale contract).\\n\\n   */\\n\\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\\n\\n    mintInternal(receiver, amount);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a crowdsale contract to mint new tokens.\\n\\n   */\\n\\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\\n\\n    mintAgents[addr] = state;\\n\\n    MintingAgentChanged(addr, state);\\n\\n  }\\n\\n\\n\\n  modifier onlyMintAgent() {\\n\\n    // Only mint agents are allowed to mint new tokens\\n\\n    require(mintAgents[msg.sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Make sure we are not done yet. */\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * A crowdsale token.\\n\\n *\\n\\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\\n\\n *\\n\\n * - The token transfer() is disabled until the crowdsale is over\\n\\n * - The token contract gives an opt-in upgrade path to a new contract\\n\\n * - The same token can be part of several crowdsales through the approve() mechanism\\n\\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\\n\\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\\n\\n *\\n\\n */\\n\\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\\n\\n\\n\\n  string public name = \\\"TokenHome\\\";\\n\\n\\n\\n  string public symbol = \\\"TH\\\";\\n\\n\\n\\n  uint8 public decimals;\\n\\n\\n\\n  address public lost_and_found_master;\\n\\n\\n\\n  /**\\n\\n   * Construct the token.\\n\\n   *\\n\\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\\n\\n   *\\n\\n   * @param initial_supply How many tokens we start with.\\n\\n   * @param token_decimals Number of decimal places.\\n\\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\\n\\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\\n\\n   */\\n\\n  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\\n\\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\\n\\n    require(token_retriever != address(0));\\n\\n    decimals = token_decimals;\\n\\n    lost_and_found_master = token_retriever;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * When token is released to be transferable, prohibit new token creation.\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    mintingFinished = true;\\n\\n    super.releaseTokenTransfer();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n    return released && super.canUpgrade();\\n\\n  }\\n\\n\\n\\n  function burn(uint value) public {\\n\\n    burnTokens(msg.sender, value);\\n\\n  }\\n\\n\\n\\n  function getLostAndFoundMaster() internal view returns(address) {\\n\\n    return lost_and_found_master;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract base contract for token sales.\\n\\n *\\n\\n * Handles\\n\\n * - start and end dates\\n\\n * - accepting investments\\n\\n * - various statistics during the crowdfund\\n\\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\\n\\n *\\n\\n */\\n\\ncontract GenericCrowdsale is Haltable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /* The token we are selling */\\n\\n  CrowdsaleToken public token;\\n\\n\\n\\n  /* ether will be transferred to this address */\\n\\n  address public multisigWallet;\\n\\n\\n\\n  /* the starting timestamp of the crowdsale */\\n\\n  uint public startsAt;\\n\\n\\n\\n  /* the ending timestamp of the crowdsale */\\n\\n  uint public endsAt;\\n\\n\\n\\n  /* the number of tokens already sold through this contract*/\\n\\n  uint public tokensSold = 0;\\n\\n\\n\\n  /* How many wei of funding we have raised */\\n\\n  uint public weiRaised = 0;\\n\\n\\n\\n  /* How many distinct addresses have invested */\\n\\n  uint public investorCount = 0;\\n\\n\\n\\n  /* Has this crowdsale been finalized */\\n\\n  bool public finalized = false;\\n\\n\\n\\n  /* Do we need to have a unique contributor id for each customer */\\n\\n  bool public requireCustomerId = false;\\n\\n\\n\\n  /* Has this crowdsale been configured */\\n\\n  bool public configured = false;\\n\\n\\n\\n  /**\\n\\n   * Do we verify that contributor has been cleared on the server side (accredited investors only).\\n\\n   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\\n\\n   */\\n\\n  bool public requiredSignedAddress = false;\\n\\n\\n\\n  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\\n\\n  address public signerAddress;\\n\\n\\n\\n  /** How many ETH each address has invested in this crowdsale */\\n\\n  mapping (address => uint) public investedAmountOf;\\n\\n\\n\\n  /** How many tokens this crowdsale has credited for each investor address */\\n\\n  mapping (address => uint) public tokenAmountOf;\\n\\n\\n\\n  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\\n\\n  mapping (address => bool) public earlyParticipantWhitelist;\\n\\n\\n\\n  /** State machine\\n\\n   *\\n\\n   * - PendingConfiguration: Crowdsale not yet configured\\n\\n   * - Prefunding: We have not reached the starting timestamp yet\\n\\n   * - Funding: Active crowdsale\\n\\n   * - Success: Crowdsale ended\\n\\n   * - Finalized: The finalize function has been called and successfully executed\\n\\n   */\\n\\n  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\\n\\n\\n\\n\\n\\n  // A new investment was made\\n\\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\\n\\n\\n\\n  // The rules about what kind of investments we accept were changed\\n\\n  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\\n\\n\\n\\n  // Address early participation whitelist status changed\\n\\n  event Whitelisted(address addr, bool status);\\n\\n\\n\\n  // Crowdsale's finalize function has been called\\n\\n  event Finalized();\\n\\n\\n\\n  /*\\n\\n   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   *\\n\\n   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\\n\\n   */\\n\\n  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\\n\\n    setMultisig(team_multisig);\\n\\n\\n\\n    // Don't mess the dates\\n\\n    require(start != 0 && end != 0);\\n\\n    require(now < start && start < end);\\n\\n    startsAt = start;\\n\\n    endsAt = end;\\n\\n    configured = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Default fallback behaviour is to call buy.\\n\\n   * Ideally, no contract calls this crowdsale without supporting ERC20.\\n\\n   * However, some sort of refunding function may be desired to cover such situations.\\n\\n   */\\n\\n  function() payable public {\\n\\n    buy();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Make an investment.\\n\\n   *\\n\\n   * The crowdsale must be running for one to invest.\\n\\n   * We must have not pressed the emergency brake.\\n\\n   *\\n\\n   * @param receiver The Ethereum address who receives the tokens\\n\\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\\n\\n   *\\n\\n   */\\n\\n  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\\n\\n    // Determine if it's a good time to accept investment from this participant\\n\\n    if (getState() == State.PreFunding) {\\n\\n      // Are we whitelisted for early deposit\\n\\n      require(earlyParticipantWhitelist[msg.sender]);\\n\\n    }\\n\\n\\n\\n    uint weiAmount;\\n\\n    uint tokenAmount;\\n\\n    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\\n\\n    // Sanity check against bad implementation.\\n\\n    assert(weiAmount <= msg.value);\\n\\n    \\n\\n    // Dust transaction if no tokens can be given\\n\\n    require(tokenAmount != 0);\\n\\n\\n\\n    if (investedAmountOf[receiver] == 0) {\\n\\n      // A new investor\\n\\n      investorCount++;\\n\\n    }\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\\n\\n\\n\\n    // Pocket the money\\n\\n    multisigWallet.transfer(weiAmount);\\n\\n\\n\\n    // Return excess of money\\n\\n    returnExcedent(msg.value.sub(weiAmount), msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Preallocate tokens for the early investors.\\n\\n   *\\n\\n   * Preallocated tokens have been sold before the actual crowdsale opens.\\n\\n   * This function mints the tokens and moves the crowdsale needle.\\n\\n   *\\n\\n   * No money is exchanged, as the crowdsale team already have received the payment.\\n\\n   *\\n\\n   * @param receiver Account that receives the tokens.\\n\\n   * @param fullTokens tokens as full tokens - decimal places are added internally.\\n\\n   * @param weiPrice Price of a single indivisible token in wei.\\n\\n   *\\n\\n   */\\n\\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\\n\\n    require(receiver != address(0));\\n\\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\\n\\n    require(tokenAmount != 0);\\n\\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Private function to update accounting in the crowdsale.\\n\\n   */\\n\\n  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\\n\\n    // Update investor\\n\\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\\n\\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\\n\\n\\n\\n    // Update totals\\n\\n    weiRaised = weiRaised.add(weiAmount);\\n\\n    tokensSold = tokensSold.add(tokenAmount);\\n\\n\\n\\n    assignTokens(receiver, tokenAmount);\\n\\n    // Tell us that the investment was completed successfully\\n\\n    Invested(receiver, weiAmount, tokenAmount, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\\n\\n    bytes32 hash = sha256(receiver);\\n\\n    require(ecrecover(hash, v, r, s) == signerAddress);\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Buys tokens on behalf of an address.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the receiver address.\\n\\n   */\\n\\n  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\\n\\n    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\\n\\n    investInternal(receiver, 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\\n\\n    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithCustomerId(uint128 customerId) public payable {\\n\\n    buyOnBehalfWithCustomerId(msg.sender, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * The basic entry point to participate in the crowdsale process.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the sender address.\\n\\n   */\\n\\n  function buy() public payable {\\n\\n    buyOnBehalf(msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    finalized = true;\\n\\n    Finalized();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy do we need to have server-side customer ids for the investments.\\n\\n   *\\n\\n   */\\n\\n  function setRequireCustomerId(bool value) public onlyOwner {\\n\\n    requireCustomerId = value;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy if all investors must be cleared on the server side first.\\n\\n   *\\n\\n   * This is e.g. for the accredited investor clearing.\\n\\n   *\\n\\n   */\\n\\n  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\\n\\n    requiredSignedAddress = value;\\n\\n    signerAddress = signer;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow addresses to do early participation.\\n\\n   */\\n\\n  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\\n\\n    earlyParticipantWhitelist[addr] = status;\\n\\n    Whitelisted(addr, status);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal setter for the multisig wallet\\n\\n   */\\n\\n  function setMultisig(address addr) internal {\\n\\n    require(addr != 0);\\n\\n    multisigWallet = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Crowdfund state machine management.\\n\\n   *\\n\\n   * This function has the timed transition builtin.\\n\\n   * So there is no chance of the variable being stale.\\n\\n   */\\n\\n  function getState() public view returns (State) {\\n\\n    if (finalized) return State.Finalized;\\n\\n    else if (!configured) return State.PendingConfiguration;\\n\\n    else if (now < startsAt) return State.PreFunding;\\n\\n    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\\n\\n    else return State.Success;\\n\\n  }\\n\\n\\n\\n  /** Internal functions that exist to provide inversion of control should they be overriden */\\n\\n\\n\\n  /** Interface for the concrete instance to interact with the token contract in a customizable way */\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal;\\n\\n\\n\\n  /**\\n\\n   *  Determine if the goal was already reached in the current crowdsale\\n\\n   */\\n\\n  function isCrowdsaleFull() internal view returns (bool full);\\n\\n\\n\\n  /**\\n\\n   * Returns any excess wei received\\n\\n   * \\n\\n   * This function can be overriden to provide a different refunding method.\\n\\n   */\\n\\n  function returnExcedent(uint excedent, address receiver) internal {\\n\\n    if (excedent > 0) {\\n\\n      receiver.transfer(excedent);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /** \\n\\n   *  Calculate the amount of tokens that corresponds to the received amount.\\n\\n   *  The wei amount is returned too in case not all of it can be invested.\\n\\n   *\\n\\n   *  Note: When there's an excedent due to rounding error, it should be returned to allow refunding.\\n\\n   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\\n\\n   *  The workaround is good enough for most use cases, hence the simplified function signature.\\n\\n   *  @return weiAllowed The amount of wei accepted in this transaction.\\n\\n   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\\n\\n   */\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\\n\\n\\n\\n  //\\n\\n  // Modifiers\\n\\n  //\\n\\n\\n\\n  modifier inState(State state) {\\n\\n    require(getState() == state);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier unsignedBuyAllowed() {\\n\\n    require(!requiredSignedAddress);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\\n\\n  modifier notFinished() {\\n\\n    State current_state = getState();\\n\\n    require(current_state == State.PreFunding || current_state == State.Funding);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier validCustomerId(uint128 customerId) {\\n\\n    require(customerId != 0);  // UUIDv4 sanity check\\n\\n    _;\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Simple deployment information store inside contract storage.\\n\\ncontract DeploymentInfo {\\n\\n  uint private deployed_on;\\n\\n\\n\\n  function DeploymentInfo() public {\\n\\n    deployed_on = block.number;\\n\\n  }\\n\\n\\n\\n\\n\\n  function getDeploymentBlock() public view returns (uint) {\\n\\n    return deployed_on;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\\n\\n *\\n\\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\\n\\n *\\n\\n * Heavily modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n\\n\\n/// @dev Tranche based pricing.\\n\\n///      Implementing \\\"first price\\\" tranches, meaning, that if a buyer's order is\\n\\n///      covering more than one tranche, the price of the lowest tranche will apply\\n\\n///      to the whole order.\\n\\ncontract TokenTranchePricing {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /**\\n\\n   * Define pricing schedule using tranches.\\n\\n   */\\n\\n  struct Tranche {\\n\\n      // Amount in tokens when this tranche becomes inactive\\n\\n      uint amount;\\n\\n      // Timestamp interval [start, end)\\n\\n      // Starting timestamp (included in the interval)\\n\\n      uint start;\\n\\n      // Ending timestamp (excluded from the interval)\\n\\n      uint end;\\n\\n      // How many tokens per wei you will get while this tranche is active\\n\\n      uint price;\\n\\n  }\\n\\n  // We define offsets and size for the deserialization of ordered tuples in raw arrays\\n\\n  uint private constant amount_offset = 0;\\n\\n  uint private constant start_offset = 1;\\n\\n  uint private constant end_offset = 2;\\n\\n  uint private constant price_offset = 3;\\n\\n  uint private constant tranche_size = 4;\\n\\n\\n\\n  Tranche[] public tranches;\\n\\n\\n\\n  function getTranchesLength() public view returns (uint) {\\n\\n    return tranches.length;\\n\\n  }\\n\\n  \\n\\n  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\\n\\n  //\\n\\n  /// @dev Construction, creating a list of tranches\\n\\n  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\\n\\n  //\\n\\n  function configurationTokenTranchePricing(uint[] init_tranches) internal {\\n\\n    // Need to have tuples, length check\\n\\n    require(init_tranches.length % tranche_size == 0);\\n\\n    // A tranche with amount zero can never be selected and is therefore useless.\\n\\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\\n\\n    require(init_tranches[amount_offset] > 0);\\n\\n\\n\\n    uint input_tranches_length = init_tranches.length.div(tranche_size);\\n\\n    Tranche memory last_tranche;\\n\\n    for (uint i = 0; i < input_tranches_length; i++) {\\n\\n      uint tranche_offset = i.mul(tranche_size);\\n\\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\\n\\n      uint start = init_tranches[tranche_offset.add(start_offset)];\\n\\n      uint end = init_tranches[tranche_offset.add(end_offset)];\\n\\n      uint price = init_tranches[tranche_offset.add(price_offset)];\\n\\n      // No invalid steps\\n\\n      require(start < end && now < end);\\n\\n      // Bail out when entering unnecessary tranches\\n\\n      // This is preferably checked before deploying contract into any blockchain.\\n\\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\\n\\n              (end > last_tranche.end && amount >= last_tranche.amount));\\n\\n\\n\\n      last_tranche = Tranche(amount, start, end, price);\\n\\n      tranches.push(last_tranche);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return Returns the struct representing the current tranche\\n\\n  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\\n\\n    for (uint i = 0; i < tranches.length; i++) {\\n\\n      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\\n\\n        return tranches[i];\\n\\n      }\\n\\n    }\\n\\n    // No tranche is currently active\\n\\n    revert();\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current price. May revert if there is no tranche currently active.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return The current price\\n\\n  function getCurrentPrice(uint tokensSold) internal view returns (uint result) {\\n\\n    return getCurrentTranche(tokensSold).price;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\\n\\ncontract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\\n\\n  uint public sellable_tokens;\\n\\n  uint public initial_tokens;\\n\\n  uint public milieurs_per_eth; \\n\\n\\n\\n  /*\\n\\n   * The constructor for the crowdsale was removed given it didn't receive any arguments nor had any body.\\n\\n   *\\n\\n   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\\n\\n   * \\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\\n\\n   */\\n\\n\\n\\n  function configurationCrowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply, uint8 token_decimals, uint max_tokens_to_sell) public onlyOwner {\\n\\n\\n\\n      \\n\\n      initial_tokens = multisig_supply;  \\n\\n      token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\\n\\n      // Necessary if assignTokens mints\\n\\n      token.setMintAgent(address(this), true);\\n\\n      // Necessary if finalize is overriden to release the tokens for public trading.\\n\\n      token.setReleaseAgent(address(this));\\n\\n      // Necessary for the execution of buy function and of the subsequent CrowdsaleToken's transfer function. \\n\\n      token.setTransferAgent(address(this), true);\\n\\n      // Crowdsale mints to himself the initial supply\\n\\n      token.mint(address(this), crowdsale_supply);\\n\\n\\n\\n      sellable_tokens = max_tokens_to_sell;\\n\\n\\n\\n      // Configuration functionality for GenericCrowdsale.\\n\\n      configurationGenericCrowdsale(team_multisig, start, end);\\n\\n\\n\\n      // Configuration functionality for TokenTranchePricing.\\n\\n      configurationTokenTranchePricing(init_tranches);\\n\\n  }\\n\\n\\n\\n  //token assignation\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal {\\n\\n    token.transfer(receiver, tokenAmount);\\n\\n  }\\n\\n\\n\\n  //token amount calculation\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\\n\\n    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\\n\\n    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\\n\\n    weiAllowed = maxWeiAllowed.min256(weiAmount);\\n\\n\\n\\n    require(token.balanceOf(receiver).add(weiAllowed) >= 100);\\n\\n    \\n\\n    if (weiAmount < maxWeiAllowed) {\\n\\n      //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\\n\\n      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\\n\\n    }\\n\\n    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\\n\\n    else {\\n\\n      tokenAmount = sellable_tokens.sub(tokensSold);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  //TODO: implement to control funding state criterion\\n\\n  function isCrowdsaleFull() internal view returns (bool full) {\\n\\n    return tokensSold >= sellable_tokens;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    //Tokens sold + bounties represent 75% of the total, the other 25% goes ti the multisig to the partners and to regulate market \\n\\n    uint sold = tokensSold.add(  initial_tokens);\\n\\n    uint toShare = sold.mul(25).div(75).mul(10**uint(token.decimals()));\\n\\n    token.setMintAgent(address(this), true);\\n\\n    token.mint(multisigWallet, toShare);\\n\\n    token.setMintAgent(address(this), false);\\n\\n    token.releaseTokenTransfer();\\n\\n    token.burn(token.balanceOf(address(this)));\\n\\n    super.finalize();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * This function decides who handles lost tokens.\\n\\n   * Do note that this function is NOT meant to be used in a token refund mecahnism.\\n\\n   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address) {\\n\\n    return owner;\\n\\n\\n\\n  }\\n\\n\\n\\n  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\\n\\n  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\\n\\n      require(startingTime > now && startingTime < endsAt);\\n\\n      startsAt = startingTime;\\n\\n  }\\n\\n\\n\\n  function setEndingTime(uint endingTime) public onlyOwner notFinished {\\n\\n       require(endingTime > now && endingTime > startsAt);\\n\\n       endsAt = endingTime;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n  function updateEursPerEth (uint milieurs_amount) public onlyOwner {\\n\\n    require(milieurs_amount >= 100);\\n\\n    milieurs_per_eth = milieurs_amount;\\n\\n  }\\n\\n}\",\"keccak256\":\"0x77a4b14b5eff26dba56f060a11f4a2e7550d057d390e14aef70e0988fe82e7db\"}},\"version\":1}"
      },
      "CrowdsaleToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "606060409081526004805460a060020a60ff02191690556006805460ff191690556000600a558051908101604052600981527f546f6b656e486f6d6500000000000000000000000000000000000000000000006020820152600b9080516200006c9291602001906200032b565b5060408051908101604052600281527f54480000000000000000000000000000000000000000000000000000000000006020820152600c908051620000b69291602001906200032b565b503415620000c357600080fd5b6040516080806200196c8339810160405280805191906020018051919060200180519190602001805160038054600160a060020a03191633600160a060020a039081169190911790915590925083915085908290600190821615156200012857600080fd5b80806200013457508215155b15156200014057600080fd5b600083111562000164576200016482846401000000006200122d620001e482021704565b6006805460ff191691159190911790555062000190905081640100000000620014fc620002dc82021704565b50600160a060020a0381161515620001a757600080fd5b600d8054600160a060020a039092166101000261010060a860020a031960ff90951660ff1990931692909217939093161790915550620003d09050565b600054620002019082640100000000620013cd6200031482021704565b6000908155600160a060020a038316815260016020526040902054620002369082640100000000620013cd6200031482021704565b600160a060020a03831660009081526001602052604090819020919091557f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe908390839051600160a060020a03909216825260208201526040908101905180910390a181600160a060020a031660007fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405190815260200160405180910390a35050565b600160a060020a0381161515620002f257600080fd5b60088054600160a060020a031916600160a060020a0392909216919091179055565b6000828201838110156200032457fe5b9392505050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f106200036e57805160ff19168380011785556200039e565b828001600101855582156200039e579182015b828111156200039e57825182559160200191906001019062000381565b50620003ac929150620003b0565b5090565b620003cd91905b80821115620003ac5760008155600101620003b7565b90565b61158c80620003e06000396000f3006060604052600436106101925763ffffffff60e060020a60003504166302f652a3811461019757806305d2035b146101bd57806306fdde03146101e4578063095ea7b31461026e57806318160ddd1461029057806323b872dd146102b557806329ff4f53146102dd578063313ce567146102fc57806340c10f191461032557806342966c681461034757806342c1867b1461035d578063432146751461037c57806345977d03146103a05780634a52e506146103b65780635de4ccb0146103df5780635f412d4f1461040e578063600440cb1461042157806370a08231146104345780638444b39114610453578063867c28571461048a5780638da5cb5b146104a957806395d89b41146104bc57806396132521146104cf5780639738968c146104e2578063a64278ce146104f5578063a9059cbb14610508578063ac3cb72c1461052a578063c752ff621461054c578063d1f276d31461055f578063d7e7088a14610572578063dd62ed3e14610591578063e2301d02146105b6578063ea56a44d146105d8578063f2fde38b146105f7575b600080fd5b34156101a257600080fd5b6101bb600160a060020a03600435166024351515610616565b005b34156101c857600080fd5b6101d0610677565b604051901515815260200160405180910390f35b34156101ef57600080fd5b6101f7610680565b60405160208082528190810183818151815260200191508051906020019080838360005b8381101561023357808201518382015260200161021b565b50505050905090810190601f1680156102605780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b341561027957600080fd5b6101d0600160a060020a036004351660243561071e565b341561029b57600080fd5b6102a36107c4565b60405190815260200160405180910390f35b34156102c057600080fd5b6101d0600160a060020a03600435811690602435166044356107cb565b34156102e857600080fd5b6101bb600160a060020a036004351661081f565b341561030757600080fd5b61030f610884565b60405160ff909116815260200160405180910390f35b341561033057600080fd5b6101bb600160a060020a036004351660243561088d565b341561035257600080fd5b6101bb6004356108d2565b341561036857600080fd5b6101d0600160a060020a03600435166108df565b341561038757600080fd5b6101bb600160a060020a036004351660243515156108f4565b34156103ab57600080fd5b6101bb600435610990565b34156103c157600080fd5b6101bb600160a060020a036004358116906024359060443516610aba565b34156103ea57600080fd5b6103f2610b5e565b604051600160a060020a03909116815260200160405180910390f35b341561041957600080fd5b6101bb610b6d565b341561042c57600080fd5b6103f2610b9f565b341561043f57600080fd5b6102a3600160a060020a0360043516610bae565b341561045e57600080fd5b610466610bc9565b6040518082600481111561047657fe5b60ff16815260200191505060405180910390f35b341561049557600080fd5b6101d0600160a060020a0360043516610c14565b34156104b457600080fd5b6103f2610c29565b34156104c757600080fd5b6101f7610c38565b34156104da57600080fd5b6101d0610ca3565b34156104ed57600080fd5b6101d0610cb3565b341561050057600080fd5b6103f2610cd7565b341561051357600080fd5b6101d0600160a060020a0360043516602435610ceb565b341561053557600080fd5b6101d0600160a060020a0360043516602435610d3d565b341561055757600080fd5b6102a3610de2565b341561056a57600080fd5b6103f2610de8565b341561057d57600080fd5b6101bb600160a060020a0360043516610df7565b341561059c57600080fd5b6102a3600160a060020a0360043581169060243516610fae565b34156105c157600080fd5b6101d0600160a060020a0360043516602435610fd9565b34156105e357600080fd5b6101bb600160a060020a03600435166110ac565b341561060257600080fd5b6101bb600160a060020a03600435166110d0565b60035433600160a060020a0390811691161461063157600080fd5b60045460009060a060020a900460ff161561064b57600080fd5b50600160a060020a03919091166000908152600560205260409020805460ff1916911515919091179055565b60065460ff1681565b600b8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107165780601f106106eb57610100808354040283529160200191610716565b820191906000526020600020905b8154815290600101906020018083116106f957829003601f168201915b505050505081565b60008115806107505750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b151561075b57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b6000545b90565b600454600090849060a060020a900460ff16806108005750600160a060020a03811660009081526005602052604090205460ff165b151561080b57600080fd5b61081685858561112f565b95945050505050565b60035433600160a060020a0390811691161461083a57600080fd5b60045460009060a060020a900460ff161561085457600080fd5b506004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600d5460ff1681565b600160a060020a03331660009081526007602052604090205460ff1615156108b457600080fd5b60065460ff16156108c457600080fd5b6108ce828261122d565b5050565b6108dc33826112ff565b50565b60076020526000908152604090205460ff1681565b60035433600160a060020a0390811691161461090f57600080fd5b60065460ff161561091f57600080fd5b600160a060020a03821660009081526007602052604090819020805460ff19168315151790557f4b0adf6c802794c7dde28a08a4e07131abcff3bf9603cd71f14f90bec7865efa908390839051600160a060020a039092168252151560208201526040908101905180910390a15050565b600061099a610bc9565b905060038160048111156109aa57fe5b14806109c1575060048160048111156109bf57fe5b145b15156109cc57600080fd5b8115156109d857600080fd5b600954600160a060020a031663753e88e5338460405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401600060405180830381600087803b1515610a2e57600080fd5b6102c65a03f11515610a3f57600080fd5b505050610a4c33836112ff565b600a54610a5f908363ffffffff6113cd16565b600a55600954600160a060020a03338116917f7e5c344a8141a805725cb476f76c6953b842222b967edd1f78ddb6e8b3f397ac911684604051600160a060020a03909216825260208201526040908101905180910390a25050565b610ac26113e3565b600160a060020a031633600160a060020a0316141515610ae157600080fd5b80600160a060020a031663095ea7b3848460006040516020015260405160e060020a63ffffffff8516028152600160a060020a0390921660048301526024820152604401602060405180830381600087803b1515610b3e57600080fd5b6102c65a03f11515610b4f57600080fd5b50505060405180515050505050565b600954600160a060020a031681565b60045433600160a060020a03908116911614610b8857600080fd5b6006805460ff19166001179055610b9d6113f7565b565b600854600160a060020a031681565b600160a060020a031660009081526001602052604090205490565b6000610bd3610cb3565b1515610be1575060016107c8565b600954600160a060020a03161515610bfb575060026107c8565b600a541515610c0c575060036107c8565b5060046107c8565b60056020526000908152604090205460ff1681565b600354600160a060020a031681565b600c8054600181600116156101000203166002900480601f0160208091040260200160405190810160405280929190818152602001828054600181600116156101000203166002900480156107165780601f106106eb57610100808354040283529160200191610716565b60045460a060020a900460ff1681565b60045460009060a060020a900460ff168015610cd25750610cd2611438565b905090565b600d546101009004600160a060020a031681565b600454600090339060a060020a900460ff1680610d205750600160a060020a03811660009081526005602052604090205460ff165b1515610d2b57600080fd5b610d35848461143d565b949350505050565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054610d75818463ffffffff6113cd16565b600160a060020a033381166000818152600260209081526040808320948a168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060019392505050565b600a5481565b600454600160a060020a031681565b60085433600160a060020a03908116911614610e1257600080fd5b610e1a610cb3565b1515610e2557600080fd5b600160a060020a0381161515610e3a57600080fd5b6004610e44610bc9565b6004811115610e4f57fe5b1415610e5a57600080fd5b6009805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a038381169190911791829055166361d3d7a66000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610ec557600080fd5b6102c65a03f11515610ed657600080fd5b505050604051805190501515610eeb57600080fd5b610ef36107c4565b600954600160a060020a0316634b2ba0dd6000604051602001526040518163ffffffff1660e060020a028152600401602060405180830381600087803b1515610f3b57600080fd5b6102c65a03f11515610f4c57600080fd5b50505060405180519050141515610f6257600080fd5b6009547f7845d5aa74cc410e35571258d954f23b82276e160fe8c188fa80566580f279cc90600160a060020a0316604051600160a060020a03909116815260200160405180910390a150565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561103657600160a060020a033381166000908152600260209081526040808320938816835292905290812055611046565b610d75818463ffffffff6114ea16565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60085433600160a060020a039081169116146110c757600080fd5b6108dc816114fc565b60035433600160a060020a039081169116146110eb57600080fd5b600160a060020a038116151561110057600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a038084166000818152600260209081526040808320339095168352938152838220549282526001905291822054611173908463ffffffff6114ea16565b600160a060020a0380871660009081526001602052604080822093909355908616815220546111a8908463ffffffff6113cd16565b600160a060020a0385166000908152600160205260409020556111d1818463ffffffff6114ea16565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616916000805160206115418339815191529086905190815260200160405180910390a3506001949350505050565b600054611240908263ffffffff6113cd16565b6000908155600160a060020a03831681526001602052604090205461126b908263ffffffff6113cd16565b600160a060020a03831660009081526001602052604090819020919091557f30385c845b448a36257a6a1716e6ad2e1bc2cbe333cde1e69fe849ad6511adfe908390839051600160a060020a03909216825260208201526040908101905180910390a181600160a060020a031660006000805160206115418339815191528360405190815260200160405180910390a35050565b600160a060020a038216600090815260016020526040902054611328908263ffffffff6114ea16565b600160a060020a03831660009081526001602052604081209190915554611355908263ffffffff6114ea16565b6000908155600160a060020a0383166000805160206115418339815191528360405190815260200160405180910390a37f696de425f79f4a40bc6d2122ca50507f0efbeabbff86a84871b7196ab8ea8df78282604051600160a060020a03909216825260208201526040908101905180910390a15050565b6000828201838110156113dc57fe5b9392505050565b600d546101009004600160a060020a031690565b60045433600160a060020a0390811691161461141257600080fd5b6004805474ff0000000000000000000000000000000000000000191660a060020a179055565b600190565b600160a060020a033316600090815260016020526040812054611466908363ffffffff6114ea16565b600160a060020a03338116600090815260016020526040808220939093559085168152205461149b908363ffffffff6113cd16565b600160a060020a0380851660008181526001602052604090819020939093559133909116906000805160206115418339815191529085905190815260200160405180910390a350600192915050565b6000828211156114f657fe5b50900390565b600160a060020a038116151561151157600080fd5b6008805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600ddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa165627a7a72305820317e47e4b0e46848d401cbcf9d53212c7df821bc4bf4f6ee8fc5695acff3b3650029",
            "opcodes": "PUSH1 0x60 PUSH1 0x40 SWAP1 DUP2 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP1 SSTORE PUSH1 0x0 PUSH1 0xA SSTORE DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x9 DUP2 MSTORE PUSH32 0x546F6B656E486F6D650000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xB SWAP1 DUP1 MLOAD PUSH3 0x6C SWAP3 SWAP2 PUSH1 0x20 ADD SWAP1 PUSH3 0x32B JUMP JUMPDEST POP PUSH1 0x40 DUP1 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE PUSH1 0x2 DUP2 MSTORE PUSH32 0x5448000000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0xC SWAP1 DUP1 MLOAD PUSH3 0xB6 SWAP3 SWAP2 PUSH1 0x20 ADD SWAP1 PUSH3 0x32B JUMP JUMPDEST POP CALLVALUE ISZERO PUSH3 0xC3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x80 DUP1 PUSH3 0x196C DUP4 CODECOPY DUP2 ADD PUSH1 0x40 MSTORE DUP1 DUP1 MLOAD SWAP2 SWAP1 PUSH1 0x20 ADD DUP1 MLOAD SWAP2 SWAP1 PUSH1 0x20 ADD DUP1 MLOAD SWAP2 SWAP1 PUSH1 0x20 ADD DUP1 MLOAD PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SWAP2 SSTORE SWAP1 SWAP3 POP DUP4 SWAP2 POP DUP6 SWAP1 DUP3 SWAP1 PUSH1 0x1 SWAP1 DUP3 AND ISZERO ISZERO PUSH3 0x128 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 DUP1 PUSH3 0x134 JUMPI POP DUP3 ISZERO ISZERO JUMPDEST ISZERO ISZERO PUSH3 0x140 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP4 GT ISZERO PUSH3 0x164 JUMPI PUSH3 0x164 DUP3 DUP5 PUSH5 0x100000000 PUSH3 0x122D PUSH3 0x1E4 DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP PUSH3 0x190 SWAP1 POP DUP2 PUSH5 0x100000000 PUSH3 0x14FC PUSH3 0x2DC DUP3 MUL OR DIV JUMP JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 0x1A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0xD DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH2 0x100 MUL PUSH2 0x100 PUSH1 0xA8 PUSH1 0x2 EXP SUB NOT PUSH1 0xFF SWAP1 SWAP6 AND PUSH1 0xFF NOT SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP4 SWAP1 SWAP4 AND OR SWAP1 SWAP2 SSTORE POP PUSH3 0x3D0 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH3 0x201 SWAP1 DUP3 PUSH5 0x100000000 PUSH3 0x13CD PUSH3 0x314 DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH3 0x236 SWAP1 DUP3 PUSH5 0x100000000 PUSH3 0x13CD PUSH3 0x314 DUP3 MUL OR DIV JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH32 0x30385C845B448A36257A6A1716E6AD2E1BC2CBE333CDE1E69FE849AD6511ADFE SWAP1 DUP4 SWAP1 DUP4 SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF DUP4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH3 0x2F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH3 0x324 JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH3 0x36E JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH3 0x39E JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH3 0x39E JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH3 0x39E JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH3 0x381 JUMP JUMPDEST POP PUSH3 0x3AC SWAP3 SWAP2 POP PUSH3 0x3B0 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH3 0x3CD SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH3 0x3AC JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH3 0x3B7 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x158C DUP1 PUSH3 0x3E0 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x192 JUMPI PUSH4 0xFFFFFFFF PUSH1 0xE0 PUSH1 0x2 EXP PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x2F652A3 DUP2 EQ PUSH2 0x197 JUMPI DUP1 PUSH4 0x5D2035B EQ PUSH2 0x1BD JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x26E JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x290 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x2B5 JUMPI DUP1 PUSH4 0x29FF4F53 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x2FC JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x325 JUMPI DUP1 PUSH4 0x42966C68 EQ PUSH2 0x347 JUMPI DUP1 PUSH4 0x42C1867B EQ PUSH2 0x35D JUMPI DUP1 PUSH4 0x43214675 EQ PUSH2 0x37C JUMPI DUP1 PUSH4 0x45977D03 EQ PUSH2 0x3A0 JUMPI DUP1 PUSH4 0x4A52E506 EQ PUSH2 0x3B6 JUMPI DUP1 PUSH4 0x5DE4CCB0 EQ PUSH2 0x3DF JUMPI DUP1 PUSH4 0x5F412D4F EQ PUSH2 0x40E JUMPI DUP1 PUSH4 0x600440CB EQ PUSH2 0x421 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x434 JUMPI DUP1 PUSH4 0x8444B391 EQ PUSH2 0x453 JUMPI DUP1 PUSH4 0x867C2857 EQ PUSH2 0x48A JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x4A9 JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x4BC JUMPI DUP1 PUSH4 0x96132521 EQ PUSH2 0x4CF JUMPI DUP1 PUSH4 0x9738968C EQ PUSH2 0x4E2 JUMPI DUP1 PUSH4 0xA64278CE EQ PUSH2 0x4F5 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x508 JUMPI DUP1 PUSH4 0xAC3CB72C EQ PUSH2 0x52A JUMPI DUP1 PUSH4 0xC752FF62 EQ PUSH2 0x54C JUMPI DUP1 PUSH4 0xD1F276D3 EQ PUSH2 0x55F JUMPI DUP1 PUSH4 0xD7E7088A EQ PUSH2 0x572 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x591 JUMPI DUP1 PUSH4 0xE2301D02 EQ PUSH2 0x5B6 JUMPI DUP1 PUSH4 0xEA56A44D EQ PUSH2 0x5D8 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x5F7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD ISZERO ISZERO PUSH2 0x616 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 0x1C8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH2 0x677 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F7 PUSH2 0x680 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 SWAP1 DUP2 ADD DUP4 DUP2 DUP2 MLOAD DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x233 JUMPI DUP1 DUP3 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x21B JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x260 JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x279 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x71E JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x29B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A3 PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x2C0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x7CB JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x2E8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x81F JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x307 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30F PUSH2 0x884 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0xFF SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x88D JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x352 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x4 CALLDATALOAD PUSH2 0x8D2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x368 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x8DF JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x387 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD ISZERO ISZERO PUSH2 0x8F4 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x3AB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x4 CALLDATALOAD PUSH2 0x990 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x3C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD SWAP1 PUSH1 0x44 CALLDATALOAD AND PUSH2 0xABA JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x3EA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F2 PUSH2 0xB5E JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x419 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH2 0xB6D JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x42C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F2 PUSH2 0xB9F JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x43F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0xBAE JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x45E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x466 PUSH2 0xBC9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP3 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x476 JUMPI INVALID JUMPDEST PUSH1 0xFF AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x495 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0xC14 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x4B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F2 PUSH2 0xC29 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x4C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1F7 PUSH2 0xC38 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x4DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH2 0xCA3 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x4ED JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH2 0xCB3 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x500 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F2 PUSH2 0xCD7 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x513 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0xCEB JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x535 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0xD3D JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x557 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A3 PUSH2 0xDE2 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x56A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x3F2 PUSH2 0xDE8 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x57D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0xDF7 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x59C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2A3 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0xFAE JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x5C1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1D0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0xFD9 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x5E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x10AC JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x602 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x1BB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x10D0 JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x631 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x64B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0xB DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x716 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6EB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x716 JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x6F9 JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x750 JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x75B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x800 JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO ISZERO PUSH2 0x80B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x816 DUP6 DUP6 DUP6 PUSH2 0x112F JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x83A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x854 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0xD SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x8B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x8C4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8CE DUP3 DUP3 PUSH2 0x122D JUMP JUMPDEST POP POP JUMP JUMPDEST PUSH2 0x8DC CALLER DUP3 PUSH2 0x12FF JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x90F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND ISZERO PUSH2 0x91F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x7 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND DUP4 ISZERO ISZERO OR SWAP1 SSTORE PUSH32 0x4B0ADF6C802794C7DDE28A08A4E07131ABCFF3BF9603CD71F14F90BEC7865EFA SWAP1 DUP4 SWAP1 DUP4 SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE ISZERO ISZERO PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x99A PUSH2 0xBC9 JUMP JUMPDEST SWAP1 POP PUSH1 0x3 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x9AA JUMPI INVALID JUMPDEST EQ DUP1 PUSH2 0x9C1 JUMPI POP PUSH1 0x4 DUP2 PUSH1 0x4 DUP2 GT ISZERO PUSH2 0x9BF JUMPI INVALID JUMPDEST EQ JUMPDEST ISZERO ISZERO PUSH2 0x9CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 ISZERO ISZERO PUSH2 0x9D8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0x753E88E5 CALLER DUP5 PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x0 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 0xA2E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH2 0xA3F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH2 0xA4C CALLER DUP4 PUSH2 0x12FF JUMP JUMPDEST PUSH1 0xA SLOAD PUSH2 0xA5F SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0xA SSTORE PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND SWAP2 PUSH32 0x7E5C344A8141A805725CB476F76C6953B842222B967EDD1F78DDB6E8B3F397AC SWAP2 AND DUP5 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG2 POP POP JUMP JUMPDEST PUSH2 0xAC2 PUSH2 0x13E3 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND EQ ISZERO ISZERO PUSH2 0xAE1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0x95EA7B3 DUP5 DUP5 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD PUSH1 0xE0 PUSH1 0x2 EXP PUSH4 0xFFFFFFFF DUP6 AND MUL DUP2 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND PUSH1 0x4 DUP4 ADD MSTORE PUSH1 0x24 DUP3 ADD MSTORE PUSH1 0x44 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 0xB3E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH2 0xB4F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD POP POP POP POP POP JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0xB88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0x1 OR SWAP1 SSTORE PUSH2 0xB9D PUSH2 0x13F7 JUMP JUMPDEST JUMP JUMPDEST PUSH1 0x8 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 PUSH2 0xBD3 PUSH2 0xCB3 JUMP JUMPDEST ISZERO ISZERO PUSH2 0xBE1 JUMPI POP PUSH1 0x1 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND ISZERO ISZERO PUSH2 0xBFB JUMPI POP PUSH1 0x2 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0xA SLOAD ISZERO ISZERO PUSH2 0xC0C JUMPI POP PUSH1 0x3 PUSH2 0x7C8 JUMP JUMPDEST POP PUSH1 0x4 PUSH2 0x7C8 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0xC DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 PUSH1 0x1F ADD PUSH1 0x20 DUP1 SWAP2 DIV MUL PUSH1 0x20 ADD PUSH1 0x40 MLOAD SWAP1 DUP2 ADD PUSH1 0x40 MSTORE DUP1 SWAP3 SWAP2 SWAP1 DUP2 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV DUP1 ISZERO PUSH2 0x716 JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x6EB JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x716 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 ISZERO PUSH2 0xCD2 JUMPI POP PUSH2 0xCD2 PUSH2 0x1438 JUMP JUMPDEST SWAP1 POP SWAP1 JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0xD20 JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO ISZERO PUSH2 0xD2B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xD35 DUP5 DUP5 PUSH2 0x143D JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SLOAD PUSH2 0xD75 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP11 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xA SLOAD DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x8 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0xE12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xE1A PUSH2 0xCB3 JUMP JUMPDEST ISZERO ISZERO PUSH2 0xE25 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0xE3A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 PUSH2 0xE44 PUSH2 0xBC9 JUMP JUMPDEST PUSH1 0x4 DUP2 GT ISZERO PUSH2 0xE4F JUMPI INVALID JUMPDEST EQ ISZERO PUSH2 0xE5A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x9 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 DUP2 AND SWAP2 SWAP1 SWAP2 OR SWAP2 DUP3 SWAP1 SSTORE AND PUSH4 0x61D3D7A6 PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 0xEC5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH2 0xED6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD SWAP1 POP ISZERO ISZERO PUSH2 0xEEB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xEF3 PUSH2 0x7C4 JUMP JUMPDEST PUSH1 0x9 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH4 0x4B2BA0DD PUSH1 0x0 PUSH1 0x40 MLOAD PUSH1 0x20 ADD MSTORE PUSH1 0x40 MLOAD DUP2 PUSH4 0xFFFFFFFF AND PUSH1 0xE0 PUSH1 0x2 EXP MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH1 0x20 PUSH1 0x40 MLOAD DUP1 DUP4 SUB DUP2 PUSH1 0x0 DUP8 DUP1 EXTCODESIZE ISZERO ISZERO PUSH2 0xF3B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2C6 GAS SUB CALL ISZERO ISZERO PUSH2 0xF4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP POP POP PUSH1 0x40 MLOAD DUP1 MLOAD SWAP1 POP EQ ISZERO ISZERO PUSH2 0xF62 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x9 SLOAD PUSH32 0x7845D5AA74CC410E35571258D954F23B82276E160FE8C188FA80566580F279CC SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SLOAD DUP1 DUP4 GT ISZERO PUSH2 0x1036 JUMPI PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SSTORE PUSH2 0x1046 JUMP JUMPDEST PUSH2 0xD75 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x8 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x10C7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x8DC DUP2 PUSH2 0x14FC JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x10EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x1100 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER SWAP1 SWAP6 AND DUP4 MSTORE SWAP4 DUP2 MSTORE DUP4 DUP3 KECCAK256 SLOAD SWAP3 DUP3 MSTORE PUSH1 0x1 SWAP1 MSTORE SWAP2 DUP3 KECCAK256 SLOAD PUSH2 0x1173 SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x11A8 SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x11D1 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND SWAP2 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1541 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH2 0x1240 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x126B SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE PUSH32 0x30385C845B448A36257A6A1716E6AD2E1BC2CBE333CDE1E69FE849AD6511ADFE SWAP1 DUP4 SWAP1 DUP4 SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 DUP2 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1541 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x1328 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SWAP2 SWAP1 SWAP2 SSTORE SLOAD PUSH2 0x1355 SWAP1 DUP3 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x0 SWAP1 DUP2 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1541 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE DUP4 PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 PUSH32 0x696DE425F79F4A40BC6D2122CA50507F0EFBEABBFF86A84871B7196AB8EA8DF7 DUP3 DUP3 PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 SWAP1 DUP2 ADD SWAP1 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x13DC JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0xD SLOAD PUSH2 0x100 SWAP1 DIV PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x1412 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND PUSH1 0xA0 PUSH1 0x2 EXP OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x1466 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x14EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x149B SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x13CD AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 CALLER SWAP1 SWAP2 AND SWAP1 PUSH1 0x0 DUP1 MLOAD PUSH1 0x20 PUSH2 0x1541 DUP4 CODECOPY DUP2 MLOAD SWAP2 MSTORE SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x14F6 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x1511 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x8 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP STOP 0xdd CALLCODE MSTORE 0xad 0x1b 0xe2 0xc8 SWAP12 PUSH10 0xC2B068FC378DAA952BA7 CALL PUSH4 0xC4A11628 0xf5 GAS 0x4d 0xf5 0x23 0xb3 0xef LOG1 PUSH6 0x627A7A723058 KECCAK256 BALANCE PUSH31 0x47E4B0E46848D401CBCF9D53212C7DF821BC4BF4F6EE8FC5695ACFF3B36500 0x29 ",
            "sourceMap": "22977:1717:0:-;;;;;11309:28;;;-1:-1:-1;;;;;;11309:28:0;;;20958:35;;;-1:-1:-1;;20958:35:0;;;11332:5;15941:29;;22977:1717;23079:32;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;23118:27;;;;;;;;;;;;;;;;;;;;;;;;;;;:::i;:::-;;23732:337;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;969:5;:18;;-1:-1:-1;;;;;;969:18:0;977:10;-1:-1:-1;;;;;969:18:0;;;;;;;;;;23732:337;;-1:-1:-1;23874:13:0;;-1:-1:-1;23903:14:0;;23874:13;;-1:-1:-1;;21273:22:0;;;;21265:31;;;;;;21371:8;:30;;;-1:-1:-1;21383:18:0;;;21371:30;21363:39;;;;;;;;21487:1;21471:13;:17;21467:67;;;21497:37;21510:8;21520:13;21497:12;;;;;;:37;:::i;:::-;21601:15;:27;;-1:-1:-1;;21601:27:0;21619:9;;21601:27;;;;;;-1:-1:-1;16878:24:0;;-1:-1:-1;16895:6:0;16878:16;;;;;;:24;:::i;:::-;-1:-1:-1;;;;;;23955:29:0;;;;23947:38;;;;;;23992:8;:25;;-1:-1:-1;;;;;24024:39:0;;;23992:25;24024:39;-1:-1:-1;;;;;;23992:25:0;;;;-1:-1:-1;;23992:25:0;;;;;;;24024:39;;;;;;;;-1:-1:-1;22977:1717:0;;-1:-1:-1;22977:1717:0;10442:463;10526:12;;:24;;10543:6;10526:16;;;;;;:24;:::i;:::-;10511:12;:39;;;-1:-1:-1;;;;;10578:18:0;;;;:8;:18;;;;;;:30;;10601:6;10578:22;;;;;;:30;:::i;:::-;-1:-1:-1;;;;;10557:18:0;;;;;;:8;:18;;;;;;;:51;;;;10615:24;;10566:8;;10632:6;;10615:24;-1:-1:-1;;;;;10615:24:0;;;;;;;;;;;;;;;;;;;;10882:8;-1:-1:-1;;;;;10870:29:0;10879:1;10870:29;10892:6;10870:29;;;;;;;;;;;;;;10442:463;;:::o;18895:126::-;-1:-1:-1;;;;;18964:17:0;;;;18956:26;;;;;;18989:13;:26;;-1:-1:-1;;;;;;18989:26:0;-1:-1:-1;;;;;18989:26:0;;;;;;;;;;18895:126::o;2914:121::-;2966:4;2988:5;;;3007:6;;;;3000:14;;;;3028:1;2914:121;-1:-1:-1;;;2914:121:0:o;22977:1717::-;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;22977:1717:0;;;-1:-1:-1;22977:1717:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.19+commit.c4cbbb05\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"address\"},{\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"mintAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setMintAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"upgrade\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"},{\"name\":\"tokens\",\"type\":\"uint256\"},{\"name\":\"token_contract\",\"type\":\"address\"}],\"name\":\"enableLostAndFound\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"upgradeMaster\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getUpgradeState\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"canUpgrade\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"lost_and_found_master\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalUpgraded\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"setUpgradeAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"new_master\",\"type\":\"address\"}],\"name\":\"changeUpgradeMaster\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"initial_supply\",\"type\":\"uint256\"},{\"name\":\"token_decimals\",\"type\":\"uint8\"},{\"name\":\"team_multisig\",\"type\":\"address\"},{\"name\":\"token_retriever\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Upgrade\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"agent\",\"type\":\"address\"}],\"name\":\"UpgradeAgentSet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"MintingAgentChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens than an owner allowed to a spender.\",\"params\":{\"account\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint specifing the amount of tokens still avaible for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"account\":\"The address whose balance is to be queried.\"},\"return\":\"An uint representing the amount owned by the passed address.\"},\"enableLostAndFound(address,uint256,address)\":{\"params\":{\"agent\":\"Address that will be able to move tokens with transferFrom\",\"token_contract\":\"Contract of the token\",\"tokens\":\"Amount of tokens approved for transfer\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to. \"}}}},\"userdoc\":{\"methods\":{\"addApproval(address,uint256)\":{\"notice\":\"Atomic increment of approved spending    * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729    \"},\"canUpgrade()\":{\"notice\":\"Allow upgrade agent functionality to kick in only if the crowdsale was a success.\"},\"changeUpgradeMaster(address)\":{\"notice\":\"Change the upgrade master.    * This allows us to set a new owner for the upgrade mechanism.\"},\"getUpgradeState()\":{\"notice\":\"Get the state of the token upgrade.\"},\"mint(address,uint256)\":{\"notice\":\"Create new tokens and allocate them to an address.    * Only callable by a mint agent (e.g. crowdsale contract).\"},\"releaseTokenTransfer()\":{\"notice\":\"When token is released to be transferable, prohibit new token creation.\"},\"setMintAgent(address,bool)\":{\"notice\":\"Owner can allow a crowdsale contract to mint new tokens.\"},\"setReleaseAgent(address)\":{\"notice\":\"Set the contract that can call release and make the token transferable.    * Since the owner of this contract is (or should be) the crowdsale, it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\"},\"setTransferAgent(address,bool)\":{\"notice\":\"Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\"},\"setUpgradeAgent(address)\":{\"notice\":\"Set an upgrade agent that handles the upgrade process\"},\"subApproval(address,uint256)\":{\"notice\":\"Atomic decrement of approved spending.    * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"},\"transfer(address,uint256)\":{\"notice\":\"We restrict transfer by overriding it \"},\"transferFrom(address,address,uint256)\":{\"notice\":\"We restrict transferFrom by overriding it \"},\"upgrade(uint256)\":{\"notice\":\"Allow the token holder to upgrade some of their tokens to a new contract.\"}}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"CrowdsaleToken\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Envisioned in FirstBlood ICO contract.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control \\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\". \\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  /** \\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  function Ownable() internal {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner. \\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param newOwner The address to transfer ownership to. \\n\\n   */\\n\\n  function transferOwnership(address newOwner) onlyOwner public {\\n\\n    require(newOwner != address(0));\\n\\n    owner = newOwner;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract contract that allows children to implement an\\n\\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\\n\\n *\\n\\n */\\n\\ncontract Haltable is Ownable {\\n\\n  bool public halted;\\n\\n\\n\\n  event Halted(bool halted);\\n\\n\\n\\n  modifier stopInEmergency {\\n\\n    require(!halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier onlyInEmergency {\\n\\n    require(halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  // called by the owner on emergency, triggers stopped state\\n\\n  function halt() external onlyOwner {\\n\\n    halted = true;\\n\\n    Halted(true);\\n\\n  }\\n\\n\\n\\n  // called by the owner on end of emergency, returns to normal state\\n\\n  function unhalt() external onlyOwner onlyInEmergency {\\n\\n    halted = false;\\n\\n    Halted(false);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * Math operations with safety checks\\n\\n */\\n\\nlibrary SafeMath {\\n\\n  function mul(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a * b;\\n\\n    assert(a == 0 || c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function div(uint a, uint b) internal pure returns (uint) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    uint c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  function add(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n\\n\\n  function max256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Interface for the standard token.\\n\\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n\\n */\\n\\ncontract EIP20Token {\\n\\n\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\\n\\n  function approve(address spender, uint256 value) public returns (bool success);\\n\\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\n\\n  /**\\n\\n  ** Optional functions\\n\\n  *\\n\\n  function name() public view returns (string name);\\n\\n  function symbol() public view returns (string symbol);\\n\\n  function decimals() public view returns (uint8 decimals);\\n\\n  *\\n\\n  **/\\n\\n\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Interface for burning tokens\\n\\ncontract Burnable {\\n\\n  // @dev Destroys tokens for an account\\n\\n  // @param account Account whose tokens are destroyed\\n\\n  // @param value Amount of tokens to destroy\\n\\n  function burnTokens(address account, uint value) internal;\\n\\n  event Burned(address account, uint value);\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * Internal interface for the minting of tokens.\\n\\n */\\n\\ncontract Mintable {\\n\\n\\n\\n  /**\\n\\n   * @dev Mints tokens for an account\\n\\n   * This function should the Minted event.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal;\\n\\n\\n\\n  /** Token supply got increased and a new owner received these tokens */\\n\\n  event Minted(address receiver, uint amount);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Standard token\\n\\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\\n\\n */\\n\\ncontract StandardToken is EIP20Token, Burnable, Mintable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  uint private total_supply;\\n\\n  mapping(address => uint) private balances;\\n\\n  mapping(address => mapping (address => uint)) private allowed;\\n\\n\\n\\n\\n\\n  function totalSupply() public view returns (uint) {\\n\\n    return total_supply;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev transfer token for a specified address\\n\\n   * @param to The address to transfer to.\\n\\n   * @param value The amount to be transferred.\\n\\n   */\\n\\n  function transfer(address to, uint value) public returns (bool success) {\\n\\n    balances[msg.sender] = balances[msg.sender].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    Transfer(msg.sender, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Gets the balance of the specified address.\\n\\n   * @param account The address whose balance is to be queried.\\n\\n   * @return An uint representing the amount owned by the passed address.\\n\\n   */\\n\\n  function balanceOf(address account) public view returns (uint balance) {\\n\\n    return balances[account];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param from address The address which you want to send tokens from\\n\\n   * @param to address The address which you want to transfer to\\n\\n   * @param value uint the amout of tokens to be transfered\\n\\n   */\\n\\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\\n\\n    uint allowance = allowed[from][msg.sender];\\n\\n\\n\\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\\n\\n    // require(value <= allowance);\\n\\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\\n\\n\\n\\n    balances[from] = balances[from].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    allowed[from][msg.sender] = allowance.sub(value);\\n\\n    Transfer(from, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * @param spender The address which will spend the funds.\\n\\n   * @param value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address spender, uint value) public returns (bool success) {\\n\\n\\n\\n    // To change the approve amount you first have to reduce the addresses'\\n\\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\\n\\n    //  already 0 to mitigate the race condition described here:\\n\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n    require (value == 0 || allowed[msg.sender][spender] == 0);\\n\\n\\n\\n    allowed[msg.sender][spender] = value;\\n\\n    Approval(msg.sender, spender, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n\\n   * @param account address The address which owns the funds.\\n\\n   * @param spender address The address which will spend the funds.\\n\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n\\n   */\\n\\n  function allowance(address account, address spender) public view returns (uint remaining) {\\n\\n    return allowed[account][spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic increment of approved spending\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   *\\n\\n   */\\n\\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\\n\\n      uint oldValue = allowed[msg.sender][spender];\\n\\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic decrement of approved spending.\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   */\\n\\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\\n\\n\\n\\n      uint oldVal = allowed[msg.sender][spender];\\n\\n\\n\\n      if (subtractedValue > oldVal) {\\n\\n          allowed[msg.sender][spender] = 0;\\n\\n      } else {\\n\\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\\n\\n      }\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\\n\\n   */\\n\\n  function burnTokens(address account, uint value) internal {\\n\\n    balances[account] = balances[account].sub(value);\\n\\n    total_supply = total_supply.sub(value);\\n\\n    Transfer(account, 0, value);\\n\\n    Burned(account, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal minting function.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal {\\n\\n    total_supply = total_supply.add(amount);\\n\\n    balances[receiver] = balances[receiver].add(amount);\\n\\n    Minted(receiver, amount);\\n\\n\\n\\n    // Beware: Address zero may be used for special transactions in a future fork.\\n\\n    // This will make the mint transaction appear in EtherScan.io\\n\\n    // We can remove this after there is a standardized minting event\\n\\n    Transfer(0, receiver, amount);\\n\\n  }\\n\\n  \\n\\n}\\n\\n\\n\\n/**\\n\\n * Define interface for releasing the token transfer after a successful crowdsale.\\n\\n */\\n\\ncontract ReleasableToken is StandardToken, Ownable {\\n\\n\\n\\n  /* The finalizer contract that allows lifting the transfer limits on this token */\\n\\n  address public releaseAgent;\\n\\n\\n\\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\\n\\n  bool public released = false;\\n\\n\\n\\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\\n\\n  mapping (address => bool) public transferAgents;\\n\\n\\n\\n  /**\\n\\n   * Set the contract that can call release and make the token transferable.\\n\\n   *\\n\\n   * Since the owner of this contract is (or should be) the crowdsale,\\n\\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\\n\\n   */\\n\\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\\n\\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\\n\\n    releaseAgent = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\\n\\n   */\\n\\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\\n\\n    transferAgents[addr] = state;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * One way function to release the tokens into the wild.\\n\\n   *\\n\\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\\n\\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    released = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Limit token transfer until the crowdsale is over.\\n\\n   */\\n\\n  modifier canTransfer(address sender) {\\n\\n    require(released || transferAgents[sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only before or after the tokens have been released */\\n\\n  modifier inReleaseState(bool releaseState) {\\n\\n    require(releaseState == released);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only by a whitelisted release agent. */\\n\\n  modifier onlyReleaseAgent() {\\n\\n    require(msg.sender == releaseAgent);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** We restrict transfer by overriding it */\\n\\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\\n\\n    // Call StandardToken.transfer()\\n\\n   return super.transfer(to, value);\\n\\n  }\\n\\n\\n\\n  /** We restrict transferFrom by overriding it */\\n\\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\\n\\n    // Call StandardToken.transferForm()\\n\\n    return super.transferFrom(from, to, value);\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * First envisioned by Golem and Lunyr projects.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Inspired by Lunyr.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n */\\n\\n\\n\\n/**\\n\\n * Upgrade agent transfers tokens to a new contract.\\n\\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\\n\\n *\\n\\n * The Upgrade agent is the interface used to implement a token\\n\\n * migration in the case of an emergency.\\n\\n * The function upgradeFrom has to implement the part of the creation\\n\\n * of new tokens on behalf of the user doing the upgrade.\\n\\n *\\n\\n * The new token can implement this interface directly, or use.\\n\\n */\\n\\ncontract UpgradeAgent {\\n\\n\\n\\n  /** This value should be the same as the original token's total supply */\\n\\n  uint public originalSupply;\\n\\n\\n\\n  /** Interface to ensure the contract is correctly configured */\\n\\n  function isUpgradeAgent() public pure returns (bool) {\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  Upgrade an account\\n\\n\\n\\n  When the token contract is in the upgrade status the each user will\\n\\n  have to call `upgrade(value)` function from UpgradeableToken.\\n\\n\\n\\n  The upgrade function adjust the balance of the user and the supply\\n\\n  of the previous token and then call `upgradeFrom(value)`.\\n\\n\\n\\n  The UpgradeAgent is the responsible to create the tokens for the user\\n\\n  in the new contract.\\n\\n\\n\\n  * @param from Account to upgrade.\\n\\n  * @param value Tokens to upgrade.\\n\\n\\n\\n  */\\n\\n  function upgradeFrom(address from, uint value) public;\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\\n\\n *\\n\\n */\\n\\ncontract UpgradeableToken is EIP20Token, Burnable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\\n\\n  address public upgradeMaster;\\n\\n\\n\\n  /** The next contract where the tokens will be migrated. */\\n\\n  UpgradeAgent public upgradeAgent;\\n\\n\\n\\n  /** How many tokens we have upgraded by now. */\\n\\n  uint public totalUpgraded = 0;\\n\\n\\n\\n  /**\\n\\n   * Upgrade states.\\n\\n   *\\n\\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\\n\\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\\n\\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\\n\\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\\n\\n   *\\n\\n   */\\n\\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\\n\\n\\n\\n  /**\\n\\n   * Somebody has upgraded some of his tokens.\\n\\n   */\\n\\n  event Upgrade(address indexed from, address to, uint value);\\n\\n\\n\\n  /**\\n\\n   * New upgrade agent available.\\n\\n   */\\n\\n  event UpgradeAgentSet(address agent);\\n\\n\\n\\n  /**\\n\\n   * Do not allow construction without upgrade master set.\\n\\n   */\\n\\n  function UpgradeableToken(address master) internal {\\n\\n    setUpgradeMaster(master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow the token holder to upgrade some of their tokens to a new contract.\\n\\n   */\\n\\n  function upgrade(uint value) public {\\n\\n    UpgradeState state = getUpgradeState();\\n\\n    // Ensure it's not called in a bad state\\n\\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\\n\\n\\n\\n    // Validate input value.\\n\\n    require(value != 0);\\n\\n\\n\\n    // Upgrade agent reissues the tokens\\n\\n    upgradeAgent.upgradeFrom(msg.sender, value);\\n\\n    \\n\\n    // Take tokens out from circulation\\n\\n    burnTokens(msg.sender, value);\\n\\n    totalUpgraded = totalUpgraded.add(value);\\n\\n\\n\\n    Upgrade(msg.sender, upgradeAgent, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set an upgrade agent that handles the upgrade process\\n\\n   */\\n\\n  function setUpgradeAgent(address agent) onlyMaster external {\\n\\n    // Check whether the token is in a state that we could think of upgrading\\n\\n    require(canUpgrade());\\n\\n\\n\\n    require(agent != 0x0);\\n\\n    // Upgrade has already begun for an agent\\n\\n    require(getUpgradeState() != UpgradeState.Upgrading);\\n\\n\\n\\n    upgradeAgent = UpgradeAgent(agent);\\n\\n\\n\\n    // Bad interface\\n\\n    require(upgradeAgent.isUpgradeAgent());\\n\\n    // Make sure that token supplies match in source and target\\n\\n    require(upgradeAgent.originalSupply() == totalSupply());\\n\\n\\n\\n    UpgradeAgentSet(upgradeAgent);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Get the state of the token upgrade.\\n\\n   */\\n\\n  function getUpgradeState() public view returns(UpgradeState) {\\n\\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\\n\\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\\n\\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\\n\\n    else return UpgradeState.Upgrading;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Change the upgrade master.\\n\\n   *\\n\\n   * This allows us to set a new owner for the upgrade mechanism.\\n\\n   */\\n\\n  function changeUpgradeMaster(address new_master) onlyMaster public {\\n\\n    setUpgradeMaster(new_master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal upgrade master setter.\\n\\n   */\\n\\n  function setUpgradeMaster(address new_master) private {\\n\\n    require(new_master != 0x0);\\n\\n    upgradeMaster = new_master;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Child contract can override to provide the condition in which the upgrade can begin.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n     return true;\\n\\n  }\\n\\n\\n\\n\\n\\n  modifier onlyMaster() {\\n\\n    require(msg.sender == upgradeMaster);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\\n\\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\\n\\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\\n\\ncontract LostAndFoundToken {\\n\\n  /**\\n\\n   * @return Address of the account that handles movements.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address);\\n\\n\\n\\n  /**\\n\\n   * @param agent Address that will be able to move tokens with transferFrom\\n\\n   * @param tokens Amount of tokens approved for transfer\\n\\n   * @param token_contract Contract of the token\\n\\n   */\\n\\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\\n\\n    require(msg.sender == getLostAndFoundMaster());\\n\\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\\n\\n    //  getting them stuck in another address by accident.\\n\\n    token_contract.approve(agent, tokens);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * A public interface to increase the supply of a token.\\n\\n *\\n\\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\\n\\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\\n\\n *\\n\\n */\\n\\ncontract MintableToken is Mintable, Ownable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n  /** List of agents that are allowed to create new tokens */\\n\\n  mapping (address => bool) public mintAgents;\\n\\n\\n\\n  event MintingAgentChanged(address addr, bool state);\\n\\n\\n\\n\\n\\n  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\\n\\n    require(multisig != address(0));\\n\\n    // Cannot create a token without supply and no minting\\n\\n    require(mintable || initialSupply != 0);\\n\\n    // Create initially all balance on the team multisig\\n\\n    if (initialSupply > 0)\\n\\n      mintInternal(multisig, initialSupply);\\n\\n    // No more new supply allowed after the token creation\\n\\n    mintingFinished = !mintable;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Create new tokens and allocate them to an address.\\n\\n   *\\n\\n   * Only callable by a mint agent (e.g. crowdsale contract).\\n\\n   */\\n\\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\\n\\n    mintInternal(receiver, amount);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a crowdsale contract to mint new tokens.\\n\\n   */\\n\\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\\n\\n    mintAgents[addr] = state;\\n\\n    MintingAgentChanged(addr, state);\\n\\n  }\\n\\n\\n\\n  modifier onlyMintAgent() {\\n\\n    // Only mint agents are allowed to mint new tokens\\n\\n    require(mintAgents[msg.sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Make sure we are not done yet. */\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * A crowdsale token.\\n\\n *\\n\\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\\n\\n *\\n\\n * - The token transfer() is disabled until the crowdsale is over\\n\\n * - The token contract gives an opt-in upgrade path to a new contract\\n\\n * - The same token can be part of several crowdsales through the approve() mechanism\\n\\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\\n\\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\\n\\n *\\n\\n */\\n\\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\\n\\n\\n\\n  string public name = \\\"TokenHome\\\";\\n\\n\\n\\n  string public symbol = \\\"TH\\\";\\n\\n\\n\\n  uint8 public decimals;\\n\\n\\n\\n  address public lost_and_found_master;\\n\\n\\n\\n  /**\\n\\n   * Construct the token.\\n\\n   *\\n\\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\\n\\n   *\\n\\n   * @param initial_supply How many tokens we start with.\\n\\n   * @param token_decimals Number of decimal places.\\n\\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\\n\\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\\n\\n   */\\n\\n  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\\n\\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\\n\\n    require(token_retriever != address(0));\\n\\n    decimals = token_decimals;\\n\\n    lost_and_found_master = token_retriever;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * When token is released to be transferable, prohibit new token creation.\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    mintingFinished = true;\\n\\n    super.releaseTokenTransfer();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n    return released && super.canUpgrade();\\n\\n  }\\n\\n\\n\\n  function burn(uint value) public {\\n\\n    burnTokens(msg.sender, value);\\n\\n  }\\n\\n\\n\\n  function getLostAndFoundMaster() internal view returns(address) {\\n\\n    return lost_and_found_master;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract base contract for token sales.\\n\\n *\\n\\n * Handles\\n\\n * - start and end dates\\n\\n * - accepting investments\\n\\n * - various statistics during the crowdfund\\n\\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\\n\\n *\\n\\n */\\n\\ncontract GenericCrowdsale is Haltable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /* The token we are selling */\\n\\n  CrowdsaleToken public token;\\n\\n\\n\\n  /* ether will be transferred to this address */\\n\\n  address public multisigWallet;\\n\\n\\n\\n  /* the starting timestamp of the crowdsale */\\n\\n  uint public startsAt;\\n\\n\\n\\n  /* the ending timestamp of the crowdsale */\\n\\n  uint public endsAt;\\n\\n\\n\\n  /* the number of tokens already sold through this contract*/\\n\\n  uint public tokensSold = 0;\\n\\n\\n\\n  /* How many wei of funding we have raised */\\n\\n  uint public weiRaised = 0;\\n\\n\\n\\n  /* How many distinct addresses have invested */\\n\\n  uint public investorCount = 0;\\n\\n\\n\\n  /* Has this crowdsale been finalized */\\n\\n  bool public finalized = false;\\n\\n\\n\\n  /* Do we need to have a unique contributor id for each customer */\\n\\n  bool public requireCustomerId = false;\\n\\n\\n\\n  /* Has this crowdsale been configured */\\n\\n  bool public configured = false;\\n\\n\\n\\n  /**\\n\\n   * Do we verify that contributor has been cleared on the server side (accredited investors only).\\n\\n   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\\n\\n   */\\n\\n  bool public requiredSignedAddress = false;\\n\\n\\n\\n  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\\n\\n  address public signerAddress;\\n\\n\\n\\n  /** How many ETH each address has invested in this crowdsale */\\n\\n  mapping (address => uint) public investedAmountOf;\\n\\n\\n\\n  /** How many tokens this crowdsale has credited for each investor address */\\n\\n  mapping (address => uint) public tokenAmountOf;\\n\\n\\n\\n  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\\n\\n  mapping (address => bool) public earlyParticipantWhitelist;\\n\\n\\n\\n  /** State machine\\n\\n   *\\n\\n   * - PendingConfiguration: Crowdsale not yet configured\\n\\n   * - Prefunding: We have not reached the starting timestamp yet\\n\\n   * - Funding: Active crowdsale\\n\\n   * - Success: Crowdsale ended\\n\\n   * - Finalized: The finalize function has been called and successfully executed\\n\\n   */\\n\\n  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\\n\\n\\n\\n\\n\\n  // A new investment was made\\n\\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\\n\\n\\n\\n  // The rules about what kind of investments we accept were changed\\n\\n  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\\n\\n\\n\\n  // Address early participation whitelist status changed\\n\\n  event Whitelisted(address addr, bool status);\\n\\n\\n\\n  // Crowdsale's finalize function has been called\\n\\n  event Finalized();\\n\\n\\n\\n  /*\\n\\n   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   *\\n\\n   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\\n\\n   */\\n\\n  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\\n\\n    setMultisig(team_multisig);\\n\\n\\n\\n    // Don't mess the dates\\n\\n    require(start != 0 && end != 0);\\n\\n    require(now < start && start < end);\\n\\n    startsAt = start;\\n\\n    endsAt = end;\\n\\n    configured = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Default fallback behaviour is to call buy.\\n\\n   * Ideally, no contract calls this crowdsale without supporting ERC20.\\n\\n   * However, some sort of refunding function may be desired to cover such situations.\\n\\n   */\\n\\n  function() payable public {\\n\\n    buy();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Make an investment.\\n\\n   *\\n\\n   * The crowdsale must be running for one to invest.\\n\\n   * We must have not pressed the emergency brake.\\n\\n   *\\n\\n   * @param receiver The Ethereum address who receives the tokens\\n\\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\\n\\n   *\\n\\n   */\\n\\n  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\\n\\n    // Determine if it's a good time to accept investment from this participant\\n\\n    if (getState() == State.PreFunding) {\\n\\n      // Are we whitelisted for early deposit\\n\\n      require(earlyParticipantWhitelist[msg.sender]);\\n\\n    }\\n\\n\\n\\n    uint weiAmount;\\n\\n    uint tokenAmount;\\n\\n    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\\n\\n    // Sanity check against bad implementation.\\n\\n    assert(weiAmount <= msg.value);\\n\\n    \\n\\n    // Dust transaction if no tokens can be given\\n\\n    require(tokenAmount != 0);\\n\\n\\n\\n    if (investedAmountOf[receiver] == 0) {\\n\\n      // A new investor\\n\\n      investorCount++;\\n\\n    }\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\\n\\n\\n\\n    // Pocket the money\\n\\n    multisigWallet.transfer(weiAmount);\\n\\n\\n\\n    // Return excess of money\\n\\n    returnExcedent(msg.value.sub(weiAmount), msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Preallocate tokens for the early investors.\\n\\n   *\\n\\n   * Preallocated tokens have been sold before the actual crowdsale opens.\\n\\n   * This function mints the tokens and moves the crowdsale needle.\\n\\n   *\\n\\n   * No money is exchanged, as the crowdsale team already have received the payment.\\n\\n   *\\n\\n   * @param receiver Account that receives the tokens.\\n\\n   * @param fullTokens tokens as full tokens - decimal places are added internally.\\n\\n   * @param weiPrice Price of a single indivisible token in wei.\\n\\n   *\\n\\n   */\\n\\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\\n\\n    require(receiver != address(0));\\n\\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\\n\\n    require(tokenAmount != 0);\\n\\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Private function to update accounting in the crowdsale.\\n\\n   */\\n\\n  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\\n\\n    // Update investor\\n\\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\\n\\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\\n\\n\\n\\n    // Update totals\\n\\n    weiRaised = weiRaised.add(weiAmount);\\n\\n    tokensSold = tokensSold.add(tokenAmount);\\n\\n\\n\\n    assignTokens(receiver, tokenAmount);\\n\\n    // Tell us that the investment was completed successfully\\n\\n    Invested(receiver, weiAmount, tokenAmount, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\\n\\n    bytes32 hash = sha256(receiver);\\n\\n    require(ecrecover(hash, v, r, s) == signerAddress);\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Buys tokens on behalf of an address.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the receiver address.\\n\\n   */\\n\\n  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\\n\\n    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\\n\\n    investInternal(receiver, 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\\n\\n    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithCustomerId(uint128 customerId) public payable {\\n\\n    buyOnBehalfWithCustomerId(msg.sender, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * The basic entry point to participate in the crowdsale process.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the sender address.\\n\\n   */\\n\\n  function buy() public payable {\\n\\n    buyOnBehalf(msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    finalized = true;\\n\\n    Finalized();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy do we need to have server-side customer ids for the investments.\\n\\n   *\\n\\n   */\\n\\n  function setRequireCustomerId(bool value) public onlyOwner {\\n\\n    requireCustomerId = value;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy if all investors must be cleared on the server side first.\\n\\n   *\\n\\n   * This is e.g. for the accredited investor clearing.\\n\\n   *\\n\\n   */\\n\\n  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\\n\\n    requiredSignedAddress = value;\\n\\n    signerAddress = signer;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow addresses to do early participation.\\n\\n   */\\n\\n  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\\n\\n    earlyParticipantWhitelist[addr] = status;\\n\\n    Whitelisted(addr, status);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal setter for the multisig wallet\\n\\n   */\\n\\n  function setMultisig(address addr) internal {\\n\\n    require(addr != 0);\\n\\n    multisigWallet = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Crowdfund state machine management.\\n\\n   *\\n\\n   * This function has the timed transition builtin.\\n\\n   * So there is no chance of the variable being stale.\\n\\n   */\\n\\n  function getState() public view returns (State) {\\n\\n    if (finalized) return State.Finalized;\\n\\n    else if (!configured) return State.PendingConfiguration;\\n\\n    else if (now < startsAt) return State.PreFunding;\\n\\n    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\\n\\n    else return State.Success;\\n\\n  }\\n\\n\\n\\n  /** Internal functions that exist to provide inversion of control should they be overriden */\\n\\n\\n\\n  /** Interface for the concrete instance to interact with the token contract in a customizable way */\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal;\\n\\n\\n\\n  /**\\n\\n   *  Determine if the goal was already reached in the current crowdsale\\n\\n   */\\n\\n  function isCrowdsaleFull() internal view returns (bool full);\\n\\n\\n\\n  /**\\n\\n   * Returns any excess wei received\\n\\n   * \\n\\n   * This function can be overriden to provide a different refunding method.\\n\\n   */\\n\\n  function returnExcedent(uint excedent, address receiver) internal {\\n\\n    if (excedent > 0) {\\n\\n      receiver.transfer(excedent);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /** \\n\\n   *  Calculate the amount of tokens that corresponds to the received amount.\\n\\n   *  The wei amount is returned too in case not all of it can be invested.\\n\\n   *\\n\\n   *  Note: When there's an excedent due to rounding error, it should be returned to allow refunding.\\n\\n   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\\n\\n   *  The workaround is good enough for most use cases, hence the simplified function signature.\\n\\n   *  @return weiAllowed The amount of wei accepted in this transaction.\\n\\n   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\\n\\n   */\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\\n\\n\\n\\n  //\\n\\n  // Modifiers\\n\\n  //\\n\\n\\n\\n  modifier inState(State state) {\\n\\n    require(getState() == state);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier unsignedBuyAllowed() {\\n\\n    require(!requiredSignedAddress);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\\n\\n  modifier notFinished() {\\n\\n    State current_state = getState();\\n\\n    require(current_state == State.PreFunding || current_state == State.Funding);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier validCustomerId(uint128 customerId) {\\n\\n    require(customerId != 0);  // UUIDv4 sanity check\\n\\n    _;\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Simple deployment information store inside contract storage.\\n\\ncontract DeploymentInfo {\\n\\n  uint private deployed_on;\\n\\n\\n\\n  function DeploymentInfo() public {\\n\\n    deployed_on = block.number;\\n\\n  }\\n\\n\\n\\n\\n\\n  function getDeploymentBlock() public view returns (uint) {\\n\\n    return deployed_on;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\\n\\n *\\n\\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\\n\\n *\\n\\n * Heavily modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n\\n\\n/// @dev Tranche based pricing.\\n\\n///      Implementing \\\"first price\\\" tranches, meaning, that if a buyer's order is\\n\\n///      covering more than one tranche, the price of the lowest tranche will apply\\n\\n///      to the whole order.\\n\\ncontract TokenTranchePricing {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /**\\n\\n   * Define pricing schedule using tranches.\\n\\n   */\\n\\n  struct Tranche {\\n\\n      // Amount in tokens when this tranche becomes inactive\\n\\n      uint amount;\\n\\n      // Timestamp interval [start, end)\\n\\n      // Starting timestamp (included in the interval)\\n\\n      uint start;\\n\\n      // Ending timestamp (excluded from the interval)\\n\\n      uint end;\\n\\n      // How many tokens per wei you will get while this tranche is active\\n\\n      uint price;\\n\\n  }\\n\\n  // We define offsets and size for the deserialization of ordered tuples in raw arrays\\n\\n  uint private constant amount_offset = 0;\\n\\n  uint private constant start_offset = 1;\\n\\n  uint private constant end_offset = 2;\\n\\n  uint private constant price_offset = 3;\\n\\n  uint private constant tranche_size = 4;\\n\\n\\n\\n  Tranche[] public tranches;\\n\\n\\n\\n  function getTranchesLength() public view returns (uint) {\\n\\n    return tranches.length;\\n\\n  }\\n\\n  \\n\\n  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\\n\\n  //\\n\\n  /// @dev Construction, creating a list of tranches\\n\\n  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\\n\\n  //\\n\\n  function configurationTokenTranchePricing(uint[] init_tranches) internal {\\n\\n    // Need to have tuples, length check\\n\\n    require(init_tranches.length % tranche_size == 0);\\n\\n    // A tranche with amount zero can never be selected and is therefore useless.\\n\\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\\n\\n    require(init_tranches[amount_offset] > 0);\\n\\n\\n\\n    uint input_tranches_length = init_tranches.length.div(tranche_size);\\n\\n    Tranche memory last_tranche;\\n\\n    for (uint i = 0; i < input_tranches_length; i++) {\\n\\n      uint tranche_offset = i.mul(tranche_size);\\n\\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\\n\\n      uint start = init_tranches[tranche_offset.add(start_offset)];\\n\\n      uint end = init_tranches[tranche_offset.add(end_offset)];\\n\\n      uint price = init_tranches[tranche_offset.add(price_offset)];\\n\\n      // No invalid steps\\n\\n      require(start < end && now < end);\\n\\n      // Bail out when entering unnecessary tranches\\n\\n      // This is preferably checked before deploying contract into any blockchain.\\n\\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\\n\\n              (end > last_tranche.end && amount >= last_tranche.amount));\\n\\n\\n\\n      last_tranche = Tranche(amount, start, end, price);\\n\\n      tranches.push(last_tranche);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return Returns the struct representing the current tranche\\n\\n  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\\n\\n    for (uint i = 0; i < tranches.length; i++) {\\n\\n      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\\n\\n        return tranches[i];\\n\\n      }\\n\\n    }\\n\\n    // No tranche is currently active\\n\\n    revert();\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current price. May revert if there is no tranche currently active.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return The current price\\n\\n  function getCurrentPrice(uint tokensSold) internal view returns (uint result) {\\n\\n    return getCurrentTranche(tokensSold).price;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\\n\\ncontract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\\n\\n  uint public sellable_tokens;\\n\\n  uint public initial_tokens;\\n\\n  uint public milieurs_per_eth; \\n\\n\\n\\n  /*\\n\\n   * The constructor for the crowdsale was removed given it didn't receive any arguments nor had any body.\\n\\n   *\\n\\n   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\\n\\n   * \\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\\n\\n   */\\n\\n\\n\\n  function configurationCrowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply, uint8 token_decimals, uint max_tokens_to_sell) public onlyOwner {\\n\\n\\n\\n      \\n\\n      initial_tokens = multisig_supply;  \\n\\n      token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\\n\\n      // Necessary if assignTokens mints\\n\\n      token.setMintAgent(address(this), true);\\n\\n      // Necessary if finalize is overriden to release the tokens for public trading.\\n\\n      token.setReleaseAgent(address(this));\\n\\n      // Necessary for the execution of buy function and of the subsequent CrowdsaleToken's transfer function. \\n\\n      token.setTransferAgent(address(this), true);\\n\\n      // Crowdsale mints to himself the initial supply\\n\\n      token.mint(address(this), crowdsale_supply);\\n\\n\\n\\n      sellable_tokens = max_tokens_to_sell;\\n\\n\\n\\n      // Configuration functionality for GenericCrowdsale.\\n\\n      configurationGenericCrowdsale(team_multisig, start, end);\\n\\n\\n\\n      // Configuration functionality for TokenTranchePricing.\\n\\n      configurationTokenTranchePricing(init_tranches);\\n\\n  }\\n\\n\\n\\n  //token assignation\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal {\\n\\n    token.transfer(receiver, tokenAmount);\\n\\n  }\\n\\n\\n\\n  //token amount calculation\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\\n\\n    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\\n\\n    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\\n\\n    weiAllowed = maxWeiAllowed.min256(weiAmount);\\n\\n\\n\\n    require(token.balanceOf(receiver).add(weiAllowed) >= 100);\\n\\n    \\n\\n    if (weiAmount < maxWeiAllowed) {\\n\\n      //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\\n\\n      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\\n\\n    }\\n\\n    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\\n\\n    else {\\n\\n      tokenAmount = sellable_tokens.sub(tokensSold);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  //TODO: implement to control funding state criterion\\n\\n  function isCrowdsaleFull() internal view returns (bool full) {\\n\\n    return tokensSold >= sellable_tokens;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    //Tokens sold + bounties represent 75% of the total, the other 25% goes ti the multisig to the partners and to regulate market \\n\\n    uint sold = tokensSold.add(  initial_tokens);\\n\\n    uint toShare = sold.mul(25).div(75).mul(10**uint(token.decimals()));\\n\\n    token.setMintAgent(address(this), true);\\n\\n    token.mint(multisigWallet, toShare);\\n\\n    token.setMintAgent(address(this), false);\\n\\n    token.releaseTokenTransfer();\\n\\n    token.burn(token.balanceOf(address(this)));\\n\\n    super.finalize();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * This function decides who handles lost tokens.\\n\\n   * Do note that this function is NOT meant to be used in a token refund mecahnism.\\n\\n   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address) {\\n\\n    return owner;\\n\\n\\n\\n  }\\n\\n\\n\\n  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\\n\\n  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\\n\\n      require(startingTime > now && startingTime < endsAt);\\n\\n      startsAt = startingTime;\\n\\n  }\\n\\n\\n\\n  function setEndingTime(uint endingTime) public onlyOwner notFinished {\\n\\n       require(endingTime > now && endingTime > startsAt);\\n\\n       endsAt = endingTime;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n  function updateEursPerEth (uint milieurs_amount) public onlyOwner {\\n\\n    require(milieurs_amount >= 100);\\n\\n    milieurs_per_eth = milieurs_amount;\\n\\n  }\\n\\n}\",\"keccak256\":\"0x77a4b14b5eff26dba56f060a11f4a2e7550d057d390e14aef70e0988fe82e7db\"}},\"version\":1}"
      },
      "DeploymentInfo": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040523415600e57600080fd5b436000556097806100206000396000f300606060405260043610603e5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166380d1cb3581146043575b600080fd5b3415604d57600080fd5b60536065565b60405190815260200160405180910390f35b600054905600a165627a7a7230582018be1bced2b0fcfe5872287cf7eaf18a68f6b977471272f9c37faee5538a3d1b0029",
            "opcodes": "PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST NUMBER PUSH1 0x0 SSTORE PUSH1 0x97 DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x3E JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x80D1CB35 DUP2 EQ PUSH1 0x43 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH1 0x4D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x53 PUSH1 0x65 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 XOR 0xbe 0x1b 0xce 0xd2 0xb0 0xfc INVALID PC PUSH19 0x287CF7EAF18A68F6B977471272F9C37FAEE553 DUP11 RETURNDATASIZE 0x1b STOP 0x29 ",
            "sourceMap": "37984:231:0:-;;;38044:72;;;;;;;;38098:12;38084:11;:26;37984:231;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.19+commit.c4cbbb05\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"getDeploymentBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"DeploymentInfo\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Envisioned in FirstBlood ICO contract.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control \\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\". \\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  /** \\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  function Ownable() internal {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner. \\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param newOwner The address to transfer ownership to. \\n\\n   */\\n\\n  function transferOwnership(address newOwner) onlyOwner public {\\n\\n    require(newOwner != address(0));\\n\\n    owner = newOwner;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract contract that allows children to implement an\\n\\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\\n\\n *\\n\\n */\\n\\ncontract Haltable is Ownable {\\n\\n  bool public halted;\\n\\n\\n\\n  event Halted(bool halted);\\n\\n\\n\\n  modifier stopInEmergency {\\n\\n    require(!halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier onlyInEmergency {\\n\\n    require(halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  // called by the owner on emergency, triggers stopped state\\n\\n  function halt() external onlyOwner {\\n\\n    halted = true;\\n\\n    Halted(true);\\n\\n  }\\n\\n\\n\\n  // called by the owner on end of emergency, returns to normal state\\n\\n  function unhalt() external onlyOwner onlyInEmergency {\\n\\n    halted = false;\\n\\n    Halted(false);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * Math operations with safety checks\\n\\n */\\n\\nlibrary SafeMath {\\n\\n  function mul(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a * b;\\n\\n    assert(a == 0 || c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function div(uint a, uint b) internal pure returns (uint) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    uint c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  function add(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n\\n\\n  function max256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Interface for the standard token.\\n\\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n\\n */\\n\\ncontract EIP20Token {\\n\\n\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\\n\\n  function approve(address spender, uint256 value) public returns (bool success);\\n\\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\n\\n  /**\\n\\n  ** Optional functions\\n\\n  *\\n\\n  function name() public view returns (string name);\\n\\n  function symbol() public view returns (string symbol);\\n\\n  function decimals() public view returns (uint8 decimals);\\n\\n  *\\n\\n  **/\\n\\n\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Interface for burning tokens\\n\\ncontract Burnable {\\n\\n  // @dev Destroys tokens for an account\\n\\n  // @param account Account whose tokens are destroyed\\n\\n  // @param value Amount of tokens to destroy\\n\\n  function burnTokens(address account, uint value) internal;\\n\\n  event Burned(address account, uint value);\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * Internal interface for the minting of tokens.\\n\\n */\\n\\ncontract Mintable {\\n\\n\\n\\n  /**\\n\\n   * @dev Mints tokens for an account\\n\\n   * This function should the Minted event.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal;\\n\\n\\n\\n  /** Token supply got increased and a new owner received these tokens */\\n\\n  event Minted(address receiver, uint amount);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Standard token\\n\\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\\n\\n */\\n\\ncontract StandardToken is EIP20Token, Burnable, Mintable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  uint private total_supply;\\n\\n  mapping(address => uint) private balances;\\n\\n  mapping(address => mapping (address => uint)) private allowed;\\n\\n\\n\\n\\n\\n  function totalSupply() public view returns (uint) {\\n\\n    return total_supply;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev transfer token for a specified address\\n\\n   * @param to The address to transfer to.\\n\\n   * @param value The amount to be transferred.\\n\\n   */\\n\\n  function transfer(address to, uint value) public returns (bool success) {\\n\\n    balances[msg.sender] = balances[msg.sender].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    Transfer(msg.sender, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Gets the balance of the specified address.\\n\\n   * @param account The address whose balance is to be queried.\\n\\n   * @return An uint representing the amount owned by the passed address.\\n\\n   */\\n\\n  function balanceOf(address account) public view returns (uint balance) {\\n\\n    return balances[account];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param from address The address which you want to send tokens from\\n\\n   * @param to address The address which you want to transfer to\\n\\n   * @param value uint the amout of tokens to be transfered\\n\\n   */\\n\\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\\n\\n    uint allowance = allowed[from][msg.sender];\\n\\n\\n\\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\\n\\n    // require(value <= allowance);\\n\\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\\n\\n\\n\\n    balances[from] = balances[from].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    allowed[from][msg.sender] = allowance.sub(value);\\n\\n    Transfer(from, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * @param spender The address which will spend the funds.\\n\\n   * @param value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address spender, uint value) public returns (bool success) {\\n\\n\\n\\n    // To change the approve amount you first have to reduce the addresses'\\n\\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\\n\\n    //  already 0 to mitigate the race condition described here:\\n\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n    require (value == 0 || allowed[msg.sender][spender] == 0);\\n\\n\\n\\n    allowed[msg.sender][spender] = value;\\n\\n    Approval(msg.sender, spender, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n\\n   * @param account address The address which owns the funds.\\n\\n   * @param spender address The address which will spend the funds.\\n\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n\\n   */\\n\\n  function allowance(address account, address spender) public view returns (uint remaining) {\\n\\n    return allowed[account][spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic increment of approved spending\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   *\\n\\n   */\\n\\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\\n\\n      uint oldValue = allowed[msg.sender][spender];\\n\\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic decrement of approved spending.\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   */\\n\\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\\n\\n\\n\\n      uint oldVal = allowed[msg.sender][spender];\\n\\n\\n\\n      if (subtractedValue > oldVal) {\\n\\n          allowed[msg.sender][spender] = 0;\\n\\n      } else {\\n\\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\\n\\n      }\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\\n\\n   */\\n\\n  function burnTokens(address account, uint value) internal {\\n\\n    balances[account] = balances[account].sub(value);\\n\\n    total_supply = total_supply.sub(value);\\n\\n    Transfer(account, 0, value);\\n\\n    Burned(account, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal minting function.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal {\\n\\n    total_supply = total_supply.add(amount);\\n\\n    balances[receiver] = balances[receiver].add(amount);\\n\\n    Minted(receiver, amount);\\n\\n\\n\\n    // Beware: Address zero may be used for special transactions in a future fork.\\n\\n    // This will make the mint transaction appear in EtherScan.io\\n\\n    // We can remove this after there is a standardized minting event\\n\\n    Transfer(0, receiver, amount);\\n\\n  }\\n\\n  \\n\\n}\\n\\n\\n\\n/**\\n\\n * Define interface for releasing the token transfer after a successful crowdsale.\\n\\n */\\n\\ncontract ReleasableToken is StandardToken, Ownable {\\n\\n\\n\\n  /* The finalizer contract that allows lifting the transfer limits on this token */\\n\\n  address public releaseAgent;\\n\\n\\n\\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\\n\\n  bool public released = false;\\n\\n\\n\\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\\n\\n  mapping (address => bool) public transferAgents;\\n\\n\\n\\n  /**\\n\\n   * Set the contract that can call release and make the token transferable.\\n\\n   *\\n\\n   * Since the owner of this contract is (or should be) the crowdsale,\\n\\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\\n\\n   */\\n\\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\\n\\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\\n\\n    releaseAgent = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\\n\\n   */\\n\\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\\n\\n    transferAgents[addr] = state;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * One way function to release the tokens into the wild.\\n\\n   *\\n\\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\\n\\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    released = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Limit token transfer until the crowdsale is over.\\n\\n   */\\n\\n  modifier canTransfer(address sender) {\\n\\n    require(released || transferAgents[sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only before or after the tokens have been released */\\n\\n  modifier inReleaseState(bool releaseState) {\\n\\n    require(releaseState == released);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only by a whitelisted release agent. */\\n\\n  modifier onlyReleaseAgent() {\\n\\n    require(msg.sender == releaseAgent);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** We restrict transfer by overriding it */\\n\\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\\n\\n    // Call StandardToken.transfer()\\n\\n   return super.transfer(to, value);\\n\\n  }\\n\\n\\n\\n  /** We restrict transferFrom by overriding it */\\n\\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\\n\\n    // Call StandardToken.transferForm()\\n\\n    return super.transferFrom(from, to, value);\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * First envisioned by Golem and Lunyr projects.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Inspired by Lunyr.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n */\\n\\n\\n\\n/**\\n\\n * Upgrade agent transfers tokens to a new contract.\\n\\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\\n\\n *\\n\\n * The Upgrade agent is the interface used to implement a token\\n\\n * migration in the case of an emergency.\\n\\n * The function upgradeFrom has to implement the part of the creation\\n\\n * of new tokens on behalf of the user doing the upgrade.\\n\\n *\\n\\n * The new token can implement this interface directly, or use.\\n\\n */\\n\\ncontract UpgradeAgent {\\n\\n\\n\\n  /** This value should be the same as the original token's total supply */\\n\\n  uint public originalSupply;\\n\\n\\n\\n  /** Interface to ensure the contract is correctly configured */\\n\\n  function isUpgradeAgent() public pure returns (bool) {\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  Upgrade an account\\n\\n\\n\\n  When the token contract is in the upgrade status the each user will\\n\\n  have to call `upgrade(value)` function from UpgradeableToken.\\n\\n\\n\\n  The upgrade function adjust the balance of the user and the supply\\n\\n  of the previous token and then call `upgradeFrom(value)`.\\n\\n\\n\\n  The UpgradeAgent is the responsible to create the tokens for the user\\n\\n  in the new contract.\\n\\n\\n\\n  * @param from Account to upgrade.\\n\\n  * @param value Tokens to upgrade.\\n\\n\\n\\n  */\\n\\n  function upgradeFrom(address from, uint value) public;\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\\n\\n *\\n\\n */\\n\\ncontract UpgradeableToken is EIP20Token, Burnable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\\n\\n  address public upgradeMaster;\\n\\n\\n\\n  /** The next contract where the tokens will be migrated. */\\n\\n  UpgradeAgent public upgradeAgent;\\n\\n\\n\\n  /** How many tokens we have upgraded by now. */\\n\\n  uint public totalUpgraded = 0;\\n\\n\\n\\n  /**\\n\\n   * Upgrade states.\\n\\n   *\\n\\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\\n\\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\\n\\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\\n\\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\\n\\n   *\\n\\n   */\\n\\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\\n\\n\\n\\n  /**\\n\\n   * Somebody has upgraded some of his tokens.\\n\\n   */\\n\\n  event Upgrade(address indexed from, address to, uint value);\\n\\n\\n\\n  /**\\n\\n   * New upgrade agent available.\\n\\n   */\\n\\n  event UpgradeAgentSet(address agent);\\n\\n\\n\\n  /**\\n\\n   * Do not allow construction without upgrade master set.\\n\\n   */\\n\\n  function UpgradeableToken(address master) internal {\\n\\n    setUpgradeMaster(master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow the token holder to upgrade some of their tokens to a new contract.\\n\\n   */\\n\\n  function upgrade(uint value) public {\\n\\n    UpgradeState state = getUpgradeState();\\n\\n    // Ensure it's not called in a bad state\\n\\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\\n\\n\\n\\n    // Validate input value.\\n\\n    require(value != 0);\\n\\n\\n\\n    // Upgrade agent reissues the tokens\\n\\n    upgradeAgent.upgradeFrom(msg.sender, value);\\n\\n    \\n\\n    // Take tokens out from circulation\\n\\n    burnTokens(msg.sender, value);\\n\\n    totalUpgraded = totalUpgraded.add(value);\\n\\n\\n\\n    Upgrade(msg.sender, upgradeAgent, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set an upgrade agent that handles the upgrade process\\n\\n   */\\n\\n  function setUpgradeAgent(address agent) onlyMaster external {\\n\\n    // Check whether the token is in a state that we could think of upgrading\\n\\n    require(canUpgrade());\\n\\n\\n\\n    require(agent != 0x0);\\n\\n    // Upgrade has already begun for an agent\\n\\n    require(getUpgradeState() != UpgradeState.Upgrading);\\n\\n\\n\\n    upgradeAgent = UpgradeAgent(agent);\\n\\n\\n\\n    // Bad interface\\n\\n    require(upgradeAgent.isUpgradeAgent());\\n\\n    // Make sure that token supplies match in source and target\\n\\n    require(upgradeAgent.originalSupply() == totalSupply());\\n\\n\\n\\n    UpgradeAgentSet(upgradeAgent);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Get the state of the token upgrade.\\n\\n   */\\n\\n  function getUpgradeState() public view returns(UpgradeState) {\\n\\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\\n\\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\\n\\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\\n\\n    else return UpgradeState.Upgrading;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Change the upgrade master.\\n\\n   *\\n\\n   * This allows us to set a new owner for the upgrade mechanism.\\n\\n   */\\n\\n  function changeUpgradeMaster(address new_master) onlyMaster public {\\n\\n    setUpgradeMaster(new_master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal upgrade master setter.\\n\\n   */\\n\\n  function setUpgradeMaster(address new_master) private {\\n\\n    require(new_master != 0x0);\\n\\n    upgradeMaster = new_master;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Child contract can override to provide the condition in which the upgrade can begin.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n     return true;\\n\\n  }\\n\\n\\n\\n\\n\\n  modifier onlyMaster() {\\n\\n    require(msg.sender == upgradeMaster);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\\n\\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\\n\\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\\n\\ncontract LostAndFoundToken {\\n\\n  /**\\n\\n   * @return Address of the account that handles movements.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address);\\n\\n\\n\\n  /**\\n\\n   * @param agent Address that will be able to move tokens with transferFrom\\n\\n   * @param tokens Amount of tokens approved for transfer\\n\\n   * @param token_contract Contract of the token\\n\\n   */\\n\\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\\n\\n    require(msg.sender == getLostAndFoundMaster());\\n\\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\\n\\n    //  getting them stuck in another address by accident.\\n\\n    token_contract.approve(agent, tokens);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * A public interface to increase the supply of a token.\\n\\n *\\n\\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\\n\\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\\n\\n *\\n\\n */\\n\\ncontract MintableToken is Mintable, Ownable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n  /** List of agents that are allowed to create new tokens */\\n\\n  mapping (address => bool) public mintAgents;\\n\\n\\n\\n  event MintingAgentChanged(address addr, bool state);\\n\\n\\n\\n\\n\\n  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\\n\\n    require(multisig != address(0));\\n\\n    // Cannot create a token without supply and no minting\\n\\n    require(mintable || initialSupply != 0);\\n\\n    // Create initially all balance on the team multisig\\n\\n    if (initialSupply > 0)\\n\\n      mintInternal(multisig, initialSupply);\\n\\n    // No more new supply allowed after the token creation\\n\\n    mintingFinished = !mintable;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Create new tokens and allocate them to an address.\\n\\n   *\\n\\n   * Only callable by a mint agent (e.g. crowdsale contract).\\n\\n   */\\n\\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\\n\\n    mintInternal(receiver, amount);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a crowdsale contract to mint new tokens.\\n\\n   */\\n\\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\\n\\n    mintAgents[addr] = state;\\n\\n    MintingAgentChanged(addr, state);\\n\\n  }\\n\\n\\n\\n  modifier onlyMintAgent() {\\n\\n    // Only mint agents are allowed to mint new tokens\\n\\n    require(mintAgents[msg.sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Make sure we are not done yet. */\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * A crowdsale token.\\n\\n *\\n\\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\\n\\n *\\n\\n * - The token transfer() is disabled until the crowdsale is over\\n\\n * - The token contract gives an opt-in upgrade path to a new contract\\n\\n * - The same token can be part of several crowdsales through the approve() mechanism\\n\\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\\n\\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\\n\\n *\\n\\n */\\n\\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\\n\\n\\n\\n  string public name = \\\"TokenHome\\\";\\n\\n\\n\\n  string public symbol = \\\"TH\\\";\\n\\n\\n\\n  uint8 public decimals;\\n\\n\\n\\n  address public lost_and_found_master;\\n\\n\\n\\n  /**\\n\\n   * Construct the token.\\n\\n   *\\n\\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\\n\\n   *\\n\\n   * @param initial_supply How many tokens we start with.\\n\\n   * @param token_decimals Number of decimal places.\\n\\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\\n\\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\\n\\n   */\\n\\n  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\\n\\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\\n\\n    require(token_retriever != address(0));\\n\\n    decimals = token_decimals;\\n\\n    lost_and_found_master = token_retriever;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * When token is released to be transferable, prohibit new token creation.\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    mintingFinished = true;\\n\\n    super.releaseTokenTransfer();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n    return released && super.canUpgrade();\\n\\n  }\\n\\n\\n\\n  function burn(uint value) public {\\n\\n    burnTokens(msg.sender, value);\\n\\n  }\\n\\n\\n\\n  function getLostAndFoundMaster() internal view returns(address) {\\n\\n    return lost_and_found_master;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract base contract for token sales.\\n\\n *\\n\\n * Handles\\n\\n * - start and end dates\\n\\n * - accepting investments\\n\\n * - various statistics during the crowdfund\\n\\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\\n\\n *\\n\\n */\\n\\ncontract GenericCrowdsale is Haltable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /* The token we are selling */\\n\\n  CrowdsaleToken public token;\\n\\n\\n\\n  /* ether will be transferred to this address */\\n\\n  address public multisigWallet;\\n\\n\\n\\n  /* the starting timestamp of the crowdsale */\\n\\n  uint public startsAt;\\n\\n\\n\\n  /* the ending timestamp of the crowdsale */\\n\\n  uint public endsAt;\\n\\n\\n\\n  /* the number of tokens already sold through this contract*/\\n\\n  uint public tokensSold = 0;\\n\\n\\n\\n  /* How many wei of funding we have raised */\\n\\n  uint public weiRaised = 0;\\n\\n\\n\\n  /* How many distinct addresses have invested */\\n\\n  uint public investorCount = 0;\\n\\n\\n\\n  /* Has this crowdsale been finalized */\\n\\n  bool public finalized = false;\\n\\n\\n\\n  /* Do we need to have a unique contributor id for each customer */\\n\\n  bool public requireCustomerId = false;\\n\\n\\n\\n  /* Has this crowdsale been configured */\\n\\n  bool public configured = false;\\n\\n\\n\\n  /**\\n\\n   * Do we verify that contributor has been cleared on the server side (accredited investors only).\\n\\n   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\\n\\n   */\\n\\n  bool public requiredSignedAddress = false;\\n\\n\\n\\n  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\\n\\n  address public signerAddress;\\n\\n\\n\\n  /** How many ETH each address has invested in this crowdsale */\\n\\n  mapping (address => uint) public investedAmountOf;\\n\\n\\n\\n  /** How many tokens this crowdsale has credited for each investor address */\\n\\n  mapping (address => uint) public tokenAmountOf;\\n\\n\\n\\n  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\\n\\n  mapping (address => bool) public earlyParticipantWhitelist;\\n\\n\\n\\n  /** State machine\\n\\n   *\\n\\n   * - PendingConfiguration: Crowdsale not yet configured\\n\\n   * - Prefunding: We have not reached the starting timestamp yet\\n\\n   * - Funding: Active crowdsale\\n\\n   * - Success: Crowdsale ended\\n\\n   * - Finalized: The finalize function has been called and successfully executed\\n\\n   */\\n\\n  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\\n\\n\\n\\n\\n\\n  // A new investment was made\\n\\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\\n\\n\\n\\n  // The rules about what kind of investments we accept were changed\\n\\n  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\\n\\n\\n\\n  // Address early participation whitelist status changed\\n\\n  event Whitelisted(address addr, bool status);\\n\\n\\n\\n  // Crowdsale's finalize function has been called\\n\\n  event Finalized();\\n\\n\\n\\n  /*\\n\\n   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   *\\n\\n   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\\n\\n   */\\n\\n  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\\n\\n    setMultisig(team_multisig);\\n\\n\\n\\n    // Don't mess the dates\\n\\n    require(start != 0 && end != 0);\\n\\n    require(now < start && start < end);\\n\\n    startsAt = start;\\n\\n    endsAt = end;\\n\\n    configured = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Default fallback behaviour is to call buy.\\n\\n   * Ideally, no contract calls this crowdsale without supporting ERC20.\\n\\n   * However, some sort of refunding function may be desired to cover such situations.\\n\\n   */\\n\\n  function() payable public {\\n\\n    buy();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Make an investment.\\n\\n   *\\n\\n   * The crowdsale must be running for one to invest.\\n\\n   * We must have not pressed the emergency brake.\\n\\n   *\\n\\n   * @param receiver The Ethereum address who receives the tokens\\n\\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\\n\\n   *\\n\\n   */\\n\\n  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\\n\\n    // Determine if it's a good time to accept investment from this participant\\n\\n    if (getState() == State.PreFunding) {\\n\\n      // Are we whitelisted for early deposit\\n\\n      require(earlyParticipantWhitelist[msg.sender]);\\n\\n    }\\n\\n\\n\\n    uint weiAmount;\\n\\n    uint tokenAmount;\\n\\n    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\\n\\n    // Sanity check against bad implementation.\\n\\n    assert(weiAmount <= msg.value);\\n\\n    \\n\\n    // Dust transaction if no tokens can be given\\n\\n    require(tokenAmount != 0);\\n\\n\\n\\n    if (investedAmountOf[receiver] == 0) {\\n\\n      // A new investor\\n\\n      investorCount++;\\n\\n    }\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\\n\\n\\n\\n    // Pocket the money\\n\\n    multisigWallet.transfer(weiAmount);\\n\\n\\n\\n    // Return excess of money\\n\\n    returnExcedent(msg.value.sub(weiAmount), msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Preallocate tokens for the early investors.\\n\\n   *\\n\\n   * Preallocated tokens have been sold before the actual crowdsale opens.\\n\\n   * This function mints the tokens and moves the crowdsale needle.\\n\\n   *\\n\\n   * No money is exchanged, as the crowdsale team already have received the payment.\\n\\n   *\\n\\n   * @param receiver Account that receives the tokens.\\n\\n   * @param fullTokens tokens as full tokens - decimal places are added internally.\\n\\n   * @param weiPrice Price of a single indivisible token in wei.\\n\\n   *\\n\\n   */\\n\\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\\n\\n    require(receiver != address(0));\\n\\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\\n\\n    require(tokenAmount != 0);\\n\\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Private function to update accounting in the crowdsale.\\n\\n   */\\n\\n  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\\n\\n    // Update investor\\n\\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\\n\\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\\n\\n\\n\\n    // Update totals\\n\\n    weiRaised = weiRaised.add(weiAmount);\\n\\n    tokensSold = tokensSold.add(tokenAmount);\\n\\n\\n\\n    assignTokens(receiver, tokenAmount);\\n\\n    // Tell us that the investment was completed successfully\\n\\n    Invested(receiver, weiAmount, tokenAmount, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\\n\\n    bytes32 hash = sha256(receiver);\\n\\n    require(ecrecover(hash, v, r, s) == signerAddress);\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Buys tokens on behalf of an address.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the receiver address.\\n\\n   */\\n\\n  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\\n\\n    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\\n\\n    investInternal(receiver, 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\\n\\n    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithCustomerId(uint128 customerId) public payable {\\n\\n    buyOnBehalfWithCustomerId(msg.sender, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * The basic entry point to participate in the crowdsale process.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the sender address.\\n\\n   */\\n\\n  function buy() public payable {\\n\\n    buyOnBehalf(msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    finalized = true;\\n\\n    Finalized();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy do we need to have server-side customer ids for the investments.\\n\\n   *\\n\\n   */\\n\\n  function setRequireCustomerId(bool value) public onlyOwner {\\n\\n    requireCustomerId = value;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy if all investors must be cleared on the server side first.\\n\\n   *\\n\\n   * This is e.g. for the accredited investor clearing.\\n\\n   *\\n\\n   */\\n\\n  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\\n\\n    requiredSignedAddress = value;\\n\\n    signerAddress = signer;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow addresses to do early participation.\\n\\n   */\\n\\n  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\\n\\n    earlyParticipantWhitelist[addr] = status;\\n\\n    Whitelisted(addr, status);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal setter for the multisig wallet\\n\\n   */\\n\\n  function setMultisig(address addr) internal {\\n\\n    require(addr != 0);\\n\\n    multisigWallet = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Crowdfund state machine management.\\n\\n   *\\n\\n   * This function has the timed transition builtin.\\n\\n   * So there is no chance of the variable being stale.\\n\\n   */\\n\\n  function getState() public view returns (State) {\\n\\n    if (finalized) return State.Finalized;\\n\\n    else if (!configured) return State.PendingConfiguration;\\n\\n    else if (now < startsAt) return State.PreFunding;\\n\\n    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\\n\\n    else return State.Success;\\n\\n  }\\n\\n\\n\\n  /** Internal functions that exist to provide inversion of control should they be overriden */\\n\\n\\n\\n  /** Interface for the concrete instance to interact with the token contract in a customizable way */\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal;\\n\\n\\n\\n  /**\\n\\n   *  Determine if the goal was already reached in the current crowdsale\\n\\n   */\\n\\n  function isCrowdsaleFull() internal view returns (bool full);\\n\\n\\n\\n  /**\\n\\n   * Returns any excess wei received\\n\\n   * \\n\\n   * This function can be overriden to provide a different refunding method.\\n\\n   */\\n\\n  function returnExcedent(uint excedent, address receiver) internal {\\n\\n    if (excedent > 0) {\\n\\n      receiver.transfer(excedent);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /** \\n\\n   *  Calculate the amount of tokens that corresponds to the received amount.\\n\\n   *  The wei amount is returned too in case not all of it can be invested.\\n\\n   *\\n\\n   *  Note: When there's an excedent due to rounding error, it should be returned to allow refunding.\\n\\n   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\\n\\n   *  The workaround is good enough for most use cases, hence the simplified function signature.\\n\\n   *  @return weiAllowed The amount of wei accepted in this transaction.\\n\\n   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\\n\\n   */\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\\n\\n\\n\\n  //\\n\\n  // Modifiers\\n\\n  //\\n\\n\\n\\n  modifier inState(State state) {\\n\\n    require(getState() == state);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier unsignedBuyAllowed() {\\n\\n    require(!requiredSignedAddress);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\\n\\n  modifier notFinished() {\\n\\n    State current_state = getState();\\n\\n    require(current_state == State.PreFunding || current_state == State.Funding);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier validCustomerId(uint128 customerId) {\\n\\n    require(customerId != 0);  // UUIDv4 sanity check\\n\\n    _;\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Simple deployment information store inside contract storage.\\n\\ncontract DeploymentInfo {\\n\\n  uint private deployed_on;\\n\\n\\n\\n  function DeploymentInfo() public {\\n\\n    deployed_on = block.number;\\n\\n  }\\n\\n\\n\\n\\n\\n  function getDeploymentBlock() public view returns (uint) {\\n\\n    return deployed_on;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\\n\\n *\\n\\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\\n\\n *\\n\\n * Heavily modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n\\n\\n/// @dev Tranche based pricing.\\n\\n///      Implementing \\\"first price\\\" tranches, meaning, that if a buyer's order is\\n\\n///      covering more than one tranche, the price of the lowest tranche will apply\\n\\n///      to the whole order.\\n\\ncontract TokenTranchePricing {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /**\\n\\n   * Define pricing schedule using tranches.\\n\\n   */\\n\\n  struct Tranche {\\n\\n      // Amount in tokens when this tranche becomes inactive\\n\\n      uint amount;\\n\\n      // Timestamp interval [start, end)\\n\\n      // Starting timestamp (included in the interval)\\n\\n      uint start;\\n\\n      // Ending timestamp (excluded from the interval)\\n\\n      uint end;\\n\\n      // How many tokens per wei you will get while this tranche is active\\n\\n      uint price;\\n\\n  }\\n\\n  // We define offsets and size for the deserialization of ordered tuples in raw arrays\\n\\n  uint private constant amount_offset = 0;\\n\\n  uint private constant start_offset = 1;\\n\\n  uint private constant end_offset = 2;\\n\\n  uint private constant price_offset = 3;\\n\\n  uint private constant tranche_size = 4;\\n\\n\\n\\n  Tranche[] public tranches;\\n\\n\\n\\n  function getTranchesLength() public view returns (uint) {\\n\\n    return tranches.length;\\n\\n  }\\n\\n  \\n\\n  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\\n\\n  //\\n\\n  /// @dev Construction, creating a list of tranches\\n\\n  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\\n\\n  //\\n\\n  function configurationTokenTranchePricing(uint[] init_tranches) internal {\\n\\n    // Need to have tuples, length check\\n\\n    require(init_tranches.length % tranche_size == 0);\\n\\n    // A tranche with amount zero can never be selected and is therefore useless.\\n\\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\\n\\n    require(init_tranches[amount_offset] > 0);\\n\\n\\n\\n    uint input_tranches_length = init_tranches.length.div(tranche_size);\\n\\n    Tranche memory last_tranche;\\n\\n    for (uint i = 0; i < input_tranches_length; i++) {\\n\\n      uint tranche_offset = i.mul(tranche_size);\\n\\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\\n\\n      uint start = init_tranches[tranche_offset.add(start_offset)];\\n\\n      uint end = init_tranches[tranche_offset.add(end_offset)];\\n\\n      uint price = init_tranches[tranche_offset.add(price_offset)];\\n\\n      // No invalid steps\\n\\n      require(start < end && now < end);\\n\\n      // Bail out when entering unnecessary tranches\\n\\n      // This is preferably checked before deploying contract into any blockchain.\\n\\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\\n\\n              (end > last_tranche.end && amount >= last_tranche.amount));\\n\\n\\n\\n      last_tranche = Tranche(amount, start, end, price);\\n\\n      tranches.push(last_tranche);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return Returns the struct representing the current tranche\\n\\n  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\\n\\n    for (uint i = 0; i < tranches.length; i++) {\\n\\n      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\\n\\n        return tranches[i];\\n\\n      }\\n\\n    }\\n\\n    // No tranche is currently active\\n\\n    revert();\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current price. May revert if there is no tranche currently active.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return The current price\\n\\n  function getCurrentPrice(uint tokensSold) internal view returns (uint result) {\\n\\n    return getCurrentTranche(tokensSold).price;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\\n\\ncontract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\\n\\n  uint public sellable_tokens;\\n\\n  uint public initial_tokens;\\n\\n  uint public milieurs_per_eth; \\n\\n\\n\\n  /*\\n\\n   * The constructor for the crowdsale was removed given it didn't receive any arguments nor had any body.\\n\\n   *\\n\\n   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\\n\\n   * \\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\\n\\n   */\\n\\n\\n\\n  function configurationCrowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply, uint8 token_decimals, uint max_tokens_to_sell) public onlyOwner {\\n\\n\\n\\n      \\n\\n      initial_tokens = multisig_supply;  \\n\\n      token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\\n\\n      // Necessary if assignTokens mints\\n\\n      token.setMintAgent(address(this), true);\\n\\n      // Necessary if finalize is overriden to release the tokens for public trading.\\n\\n      token.setReleaseAgent(address(this));\\n\\n      // Necessary for the execution of buy function and of the subsequent CrowdsaleToken's transfer function. \\n\\n      token.setTransferAgent(address(this), true);\\n\\n      // Crowdsale mints to himself the initial supply\\n\\n      token.mint(address(this), crowdsale_supply);\\n\\n\\n\\n      sellable_tokens = max_tokens_to_sell;\\n\\n\\n\\n      // Configuration functionality for GenericCrowdsale.\\n\\n      configurationGenericCrowdsale(team_multisig, start, end);\\n\\n\\n\\n      // Configuration functionality for TokenTranchePricing.\\n\\n      configurationTokenTranchePricing(init_tranches);\\n\\n  }\\n\\n\\n\\n  //token assignation\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal {\\n\\n    token.transfer(receiver, tokenAmount);\\n\\n  }\\n\\n\\n\\n  //token amount calculation\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\\n\\n    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\\n\\n    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\\n\\n    weiAllowed = maxWeiAllowed.min256(weiAmount);\\n\\n\\n\\n    require(token.balanceOf(receiver).add(weiAllowed) >= 100);\\n\\n    \\n\\n    if (weiAmount < maxWeiAllowed) {\\n\\n      //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\\n\\n      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\\n\\n    }\\n\\n    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\\n\\n    else {\\n\\n      tokenAmount = sellable_tokens.sub(tokensSold);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  //TODO: implement to control funding state criterion\\n\\n  function isCrowdsaleFull() internal view returns (bool full) {\\n\\n    return tokensSold >= sellable_tokens;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    //Tokens sold + bounties represent 75% of the total, the other 25% goes ti the multisig to the partners and to regulate market \\n\\n    uint sold = tokensSold.add(  initial_tokens);\\n\\n    uint toShare = sold.mul(25).div(75).mul(10**uint(token.decimals()));\\n\\n    token.setMintAgent(address(this), true);\\n\\n    token.mint(multisigWallet, toShare);\\n\\n    token.setMintAgent(address(this), false);\\n\\n    token.releaseTokenTransfer();\\n\\n    token.burn(token.balanceOf(address(this)));\\n\\n    super.finalize();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * This function decides who handles lost tokens.\\n\\n   * Do note that this function is NOT meant to be used in a token refund mecahnism.\\n\\n   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address) {\\n\\n    return owner;\\n\\n\\n\\n  }\\n\\n\\n\\n  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\\n\\n  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\\n\\n      require(startingTime > now && startingTime < endsAt);\\n\\n      startsAt = startingTime;\\n\\n  }\\n\\n\\n\\n  function setEndingTime(uint endingTime) public onlyOwner notFinished {\\n\\n       require(endingTime > now && endingTime > startsAt);\\n\\n       endsAt = endingTime;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n  function updateEursPerEth (uint milieurs_amount) public onlyOwner {\\n\\n    require(milieurs_amount >= 100);\\n\\n    milieurs_per_eth = milieurs_amount;\\n\\n  }\\n\\n}\",\"keccak256\":\"0x77a4b14b5eff26dba56f060a11f4a2e7550d057d390e14aef70e0988fe82e7db\"}},\"version\":1}"
      },
      "EIP20Token": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "GenericCrowdsale": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "Haltable": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "606060405260008054600160a060020a033316600160a060020a03199091161790556102ea806100306000396000f30060606040526004361061006c5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416635ed7ca5b81146100715780638da5cb5b14610086578063b9b8af0b146100b5578063cb3e64fd146100dc578063f2fde38b146100ef575b600080fd5b341561007c57600080fd5b61008461010e565b005b341561009157600080fd5b610099610196565b604051600160a060020a03909116815260200160405180910390f35b34156100c057600080fd5b6100c86101a5565b604051901515815260200160405180910390f35b34156100e757600080fd5b6100846101c6565b34156100fa57600080fd5b610084600160a060020a036004351661025f565b60005433600160a060020a0390811691161461012957600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790557f92333b0b676476985757350034668cb9ee247674ac7a7479de10cd761381f7336001604051901515815260200160405180910390a1565b600054600160a060020a031681565b60005474010000000000000000000000000000000000000000900460ff1681565b60005433600160a060020a039081169116146101e157600080fd5b60005474010000000000000000000000000000000000000000900460ff16151561020a57600080fd5b6000805474ff0000000000000000000000000000000000000000191681557f92333b0b676476985757350034668cb9ee247674ac7a7479de10cd761381f73390604051901515815260200160405180910390a1565b60005433600160a060020a0390811691161461027a57600080fd5b600160a060020a038116151561028f57600080fd5b6000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820d26356478933c806913ba9ed7d1200efb3dffb56c0550266c772fd4752969b0b0029",
            "opcodes": "PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT SWAP1 SWAP2 AND OR SWAP1 SSTORE PUSH2 0x2EA DUP1 PUSH2 0x30 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x6C JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x5ED7CA5B DUP2 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x86 JUMPI DUP1 PUSH4 0xB9B8AF0B EQ PUSH2 0xB5 JUMPI DUP1 PUSH4 0xCB3E64FD EQ PUSH2 0xDC JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xEF JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 0x7C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x84 PUSH2 0x10E JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 0x91 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x99 PUSH2 0x196 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0xC0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xC8 PUSH2 0x1A5 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0xE7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x84 PUSH2 0x1C6 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0xFA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x84 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x25F JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x129 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND PUSH21 0x10000000000000000000000000000000000000000 OR SWAP1 SSTORE PUSH32 0x92333B0B676476985757350034668CB9EE247674AC7A7479DE10CD761381F733 PUSH1 0x1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x1E1 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x20A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND DUP2 SSTORE PUSH32 0x92333B0B676476985757350034668CB9EE247674AC7A7479DE10CD761381F733 SWAP1 PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x27A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x28F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xd2 PUSH4 0x56478933 0xc8 MOD SWAP2 EXTCODESIZE 0xa9 0xed PUSH30 0x1200EFB3DFFB56C0550266C772FD4752969B0B0029000000000000000000 ",
            "sourceMap": "1622:549:0:-;;;969:5;:18;;-1:-1:-1;;;;;977:10:0;969:18;-1:-1:-1;;;;;;969:18:0;;;;;;1622:549;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.19+commit.c4cbbb05\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"halt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"halted\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unhalt\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"halted\",\"type\":\"bool\"}],\"name\":\"Halted\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to. \"}}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"Haltable\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Envisioned in FirstBlood ICO contract.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control \\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\". \\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  /** \\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  function Ownable() internal {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner. \\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param newOwner The address to transfer ownership to. \\n\\n   */\\n\\n  function transferOwnership(address newOwner) onlyOwner public {\\n\\n    require(newOwner != address(0));\\n\\n    owner = newOwner;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract contract that allows children to implement an\\n\\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\\n\\n *\\n\\n */\\n\\ncontract Haltable is Ownable {\\n\\n  bool public halted;\\n\\n\\n\\n  event Halted(bool halted);\\n\\n\\n\\n  modifier stopInEmergency {\\n\\n    require(!halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier onlyInEmergency {\\n\\n    require(halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  // called by the owner on emergency, triggers stopped state\\n\\n  function halt() external onlyOwner {\\n\\n    halted = true;\\n\\n    Halted(true);\\n\\n  }\\n\\n\\n\\n  // called by the owner on end of emergency, returns to normal state\\n\\n  function unhalt() external onlyOwner onlyInEmergency {\\n\\n    halted = false;\\n\\n    Halted(false);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * Math operations with safety checks\\n\\n */\\n\\nlibrary SafeMath {\\n\\n  function mul(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a * b;\\n\\n    assert(a == 0 || c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function div(uint a, uint b) internal pure returns (uint) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    uint c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  function add(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n\\n\\n  function max256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Interface for the standard token.\\n\\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n\\n */\\n\\ncontract EIP20Token {\\n\\n\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\\n\\n  function approve(address spender, uint256 value) public returns (bool success);\\n\\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\n\\n  /**\\n\\n  ** Optional functions\\n\\n  *\\n\\n  function name() public view returns (string name);\\n\\n  function symbol() public view returns (string symbol);\\n\\n  function decimals() public view returns (uint8 decimals);\\n\\n  *\\n\\n  **/\\n\\n\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Interface for burning tokens\\n\\ncontract Burnable {\\n\\n  // @dev Destroys tokens for an account\\n\\n  // @param account Account whose tokens are destroyed\\n\\n  // @param value Amount of tokens to destroy\\n\\n  function burnTokens(address account, uint value) internal;\\n\\n  event Burned(address account, uint value);\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * Internal interface for the minting of tokens.\\n\\n */\\n\\ncontract Mintable {\\n\\n\\n\\n  /**\\n\\n   * @dev Mints tokens for an account\\n\\n   * This function should the Minted event.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal;\\n\\n\\n\\n  /** Token supply got increased and a new owner received these tokens */\\n\\n  event Minted(address receiver, uint amount);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Standard token\\n\\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\\n\\n */\\n\\ncontract StandardToken is EIP20Token, Burnable, Mintable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  uint private total_supply;\\n\\n  mapping(address => uint) private balances;\\n\\n  mapping(address => mapping (address => uint)) private allowed;\\n\\n\\n\\n\\n\\n  function totalSupply() public view returns (uint) {\\n\\n    return total_supply;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev transfer token for a specified address\\n\\n   * @param to The address to transfer to.\\n\\n   * @param value The amount to be transferred.\\n\\n   */\\n\\n  function transfer(address to, uint value) public returns (bool success) {\\n\\n    balances[msg.sender] = balances[msg.sender].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    Transfer(msg.sender, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Gets the balance of the specified address.\\n\\n   * @param account The address whose balance is to be queried.\\n\\n   * @return An uint representing the amount owned by the passed address.\\n\\n   */\\n\\n  function balanceOf(address account) public view returns (uint balance) {\\n\\n    return balances[account];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param from address The address which you want to send tokens from\\n\\n   * @param to address The address which you want to transfer to\\n\\n   * @param value uint the amout of tokens to be transfered\\n\\n   */\\n\\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\\n\\n    uint allowance = allowed[from][msg.sender];\\n\\n\\n\\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\\n\\n    // require(value <= allowance);\\n\\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\\n\\n\\n\\n    balances[from] = balances[from].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    allowed[from][msg.sender] = allowance.sub(value);\\n\\n    Transfer(from, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * @param spender The address which will spend the funds.\\n\\n   * @param value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address spender, uint value) public returns (bool success) {\\n\\n\\n\\n    // To change the approve amount you first have to reduce the addresses'\\n\\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\\n\\n    //  already 0 to mitigate the race condition described here:\\n\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n    require (value == 0 || allowed[msg.sender][spender] == 0);\\n\\n\\n\\n    allowed[msg.sender][spender] = value;\\n\\n    Approval(msg.sender, spender, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n\\n   * @param account address The address which owns the funds.\\n\\n   * @param spender address The address which will spend the funds.\\n\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n\\n   */\\n\\n  function allowance(address account, address spender) public view returns (uint remaining) {\\n\\n    return allowed[account][spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic increment of approved spending\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   *\\n\\n   */\\n\\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\\n\\n      uint oldValue = allowed[msg.sender][spender];\\n\\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic decrement of approved spending.\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   */\\n\\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\\n\\n\\n\\n      uint oldVal = allowed[msg.sender][spender];\\n\\n\\n\\n      if (subtractedValue > oldVal) {\\n\\n          allowed[msg.sender][spender] = 0;\\n\\n      } else {\\n\\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\\n\\n      }\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\\n\\n   */\\n\\n  function burnTokens(address account, uint value) internal {\\n\\n    balances[account] = balances[account].sub(value);\\n\\n    total_supply = total_supply.sub(value);\\n\\n    Transfer(account, 0, value);\\n\\n    Burned(account, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal minting function.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal {\\n\\n    total_supply = total_supply.add(amount);\\n\\n    balances[receiver] = balances[receiver].add(amount);\\n\\n    Minted(receiver, amount);\\n\\n\\n\\n    // Beware: Address zero may be used for special transactions in a future fork.\\n\\n    // This will make the mint transaction appear in EtherScan.io\\n\\n    // We can remove this after there is a standardized minting event\\n\\n    Transfer(0, receiver, amount);\\n\\n  }\\n\\n  \\n\\n}\\n\\n\\n\\n/**\\n\\n * Define interface for releasing the token transfer after a successful crowdsale.\\n\\n */\\n\\ncontract ReleasableToken is StandardToken, Ownable {\\n\\n\\n\\n  /* The finalizer contract that allows lifting the transfer limits on this token */\\n\\n  address public releaseAgent;\\n\\n\\n\\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\\n\\n  bool public released = false;\\n\\n\\n\\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\\n\\n  mapping (address => bool) public transferAgents;\\n\\n\\n\\n  /**\\n\\n   * Set the contract that can call release and make the token transferable.\\n\\n   *\\n\\n   * Since the owner of this contract is (or should be) the crowdsale,\\n\\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\\n\\n   */\\n\\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\\n\\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\\n\\n    releaseAgent = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\\n\\n   */\\n\\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\\n\\n    transferAgents[addr] = state;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * One way function to release the tokens into the wild.\\n\\n   *\\n\\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\\n\\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    released = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Limit token transfer until the crowdsale is over.\\n\\n   */\\n\\n  modifier canTransfer(address sender) {\\n\\n    require(released || transferAgents[sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only before or after the tokens have been released */\\n\\n  modifier inReleaseState(bool releaseState) {\\n\\n    require(releaseState == released);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only by a whitelisted release agent. */\\n\\n  modifier onlyReleaseAgent() {\\n\\n    require(msg.sender == releaseAgent);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** We restrict transfer by overriding it */\\n\\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\\n\\n    // Call StandardToken.transfer()\\n\\n   return super.transfer(to, value);\\n\\n  }\\n\\n\\n\\n  /** We restrict transferFrom by overriding it */\\n\\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\\n\\n    // Call StandardToken.transferForm()\\n\\n    return super.transferFrom(from, to, value);\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * First envisioned by Golem and Lunyr projects.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Inspired by Lunyr.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n */\\n\\n\\n\\n/**\\n\\n * Upgrade agent transfers tokens to a new contract.\\n\\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\\n\\n *\\n\\n * The Upgrade agent is the interface used to implement a token\\n\\n * migration in the case of an emergency.\\n\\n * The function upgradeFrom has to implement the part of the creation\\n\\n * of new tokens on behalf of the user doing the upgrade.\\n\\n *\\n\\n * The new token can implement this interface directly, or use.\\n\\n */\\n\\ncontract UpgradeAgent {\\n\\n\\n\\n  /** This value should be the same as the original token's total supply */\\n\\n  uint public originalSupply;\\n\\n\\n\\n  /** Interface to ensure the contract is correctly configured */\\n\\n  function isUpgradeAgent() public pure returns (bool) {\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  Upgrade an account\\n\\n\\n\\n  When the token contract is in the upgrade status the each user will\\n\\n  have to call `upgrade(value)` function from UpgradeableToken.\\n\\n\\n\\n  The upgrade function adjust the balance of the user and the supply\\n\\n  of the previous token and then call `upgradeFrom(value)`.\\n\\n\\n\\n  The UpgradeAgent is the responsible to create the tokens for the user\\n\\n  in the new contract.\\n\\n\\n\\n  * @param from Account to upgrade.\\n\\n  * @param value Tokens to upgrade.\\n\\n\\n\\n  */\\n\\n  function upgradeFrom(address from, uint value) public;\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\\n\\n *\\n\\n */\\n\\ncontract UpgradeableToken is EIP20Token, Burnable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\\n\\n  address public upgradeMaster;\\n\\n\\n\\n  /** The next contract where the tokens will be migrated. */\\n\\n  UpgradeAgent public upgradeAgent;\\n\\n\\n\\n  /** How many tokens we have upgraded by now. */\\n\\n  uint public totalUpgraded = 0;\\n\\n\\n\\n  /**\\n\\n   * Upgrade states.\\n\\n   *\\n\\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\\n\\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\\n\\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\\n\\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\\n\\n   *\\n\\n   */\\n\\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\\n\\n\\n\\n  /**\\n\\n   * Somebody has upgraded some of his tokens.\\n\\n   */\\n\\n  event Upgrade(address indexed from, address to, uint value);\\n\\n\\n\\n  /**\\n\\n   * New upgrade agent available.\\n\\n   */\\n\\n  event UpgradeAgentSet(address agent);\\n\\n\\n\\n  /**\\n\\n   * Do not allow construction without upgrade master set.\\n\\n   */\\n\\n  function UpgradeableToken(address master) internal {\\n\\n    setUpgradeMaster(master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow the token holder to upgrade some of their tokens to a new contract.\\n\\n   */\\n\\n  function upgrade(uint value) public {\\n\\n    UpgradeState state = getUpgradeState();\\n\\n    // Ensure it's not called in a bad state\\n\\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\\n\\n\\n\\n    // Validate input value.\\n\\n    require(value != 0);\\n\\n\\n\\n    // Upgrade agent reissues the tokens\\n\\n    upgradeAgent.upgradeFrom(msg.sender, value);\\n\\n    \\n\\n    // Take tokens out from circulation\\n\\n    burnTokens(msg.sender, value);\\n\\n    totalUpgraded = totalUpgraded.add(value);\\n\\n\\n\\n    Upgrade(msg.sender, upgradeAgent, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set an upgrade agent that handles the upgrade process\\n\\n   */\\n\\n  function setUpgradeAgent(address agent) onlyMaster external {\\n\\n    // Check whether the token is in a state that we could think of upgrading\\n\\n    require(canUpgrade());\\n\\n\\n\\n    require(agent != 0x0);\\n\\n    // Upgrade has already begun for an agent\\n\\n    require(getUpgradeState() != UpgradeState.Upgrading);\\n\\n\\n\\n    upgradeAgent = UpgradeAgent(agent);\\n\\n\\n\\n    // Bad interface\\n\\n    require(upgradeAgent.isUpgradeAgent());\\n\\n    // Make sure that token supplies match in source and target\\n\\n    require(upgradeAgent.originalSupply() == totalSupply());\\n\\n\\n\\n    UpgradeAgentSet(upgradeAgent);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Get the state of the token upgrade.\\n\\n   */\\n\\n  function getUpgradeState() public view returns(UpgradeState) {\\n\\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\\n\\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\\n\\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\\n\\n    else return UpgradeState.Upgrading;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Change the upgrade master.\\n\\n   *\\n\\n   * This allows us to set a new owner for the upgrade mechanism.\\n\\n   */\\n\\n  function changeUpgradeMaster(address new_master) onlyMaster public {\\n\\n    setUpgradeMaster(new_master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal upgrade master setter.\\n\\n   */\\n\\n  function setUpgradeMaster(address new_master) private {\\n\\n    require(new_master != 0x0);\\n\\n    upgradeMaster = new_master;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Child contract can override to provide the condition in which the upgrade can begin.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n     return true;\\n\\n  }\\n\\n\\n\\n\\n\\n  modifier onlyMaster() {\\n\\n    require(msg.sender == upgradeMaster);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\\n\\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\\n\\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\\n\\ncontract LostAndFoundToken {\\n\\n  /**\\n\\n   * @return Address of the account that handles movements.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address);\\n\\n\\n\\n  /**\\n\\n   * @param agent Address that will be able to move tokens with transferFrom\\n\\n   * @param tokens Amount of tokens approved for transfer\\n\\n   * @param token_contract Contract of the token\\n\\n   */\\n\\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\\n\\n    require(msg.sender == getLostAndFoundMaster());\\n\\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\\n\\n    //  getting them stuck in another address by accident.\\n\\n    token_contract.approve(agent, tokens);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * A public interface to increase the supply of a token.\\n\\n *\\n\\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\\n\\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\\n\\n *\\n\\n */\\n\\ncontract MintableToken is Mintable, Ownable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n  /** List of agents that are allowed to create new tokens */\\n\\n  mapping (address => bool) public mintAgents;\\n\\n\\n\\n  event MintingAgentChanged(address addr, bool state);\\n\\n\\n\\n\\n\\n  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\\n\\n    require(multisig != address(0));\\n\\n    // Cannot create a token without supply and no minting\\n\\n    require(mintable || initialSupply != 0);\\n\\n    // Create initially all balance on the team multisig\\n\\n    if (initialSupply > 0)\\n\\n      mintInternal(multisig, initialSupply);\\n\\n    // No more new supply allowed after the token creation\\n\\n    mintingFinished = !mintable;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Create new tokens and allocate them to an address.\\n\\n   *\\n\\n   * Only callable by a mint agent (e.g. crowdsale contract).\\n\\n   */\\n\\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\\n\\n    mintInternal(receiver, amount);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a crowdsale contract to mint new tokens.\\n\\n   */\\n\\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\\n\\n    mintAgents[addr] = state;\\n\\n    MintingAgentChanged(addr, state);\\n\\n  }\\n\\n\\n\\n  modifier onlyMintAgent() {\\n\\n    // Only mint agents are allowed to mint new tokens\\n\\n    require(mintAgents[msg.sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Make sure we are not done yet. */\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * A crowdsale token.\\n\\n *\\n\\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\\n\\n *\\n\\n * - The token transfer() is disabled until the crowdsale is over\\n\\n * - The token contract gives an opt-in upgrade path to a new contract\\n\\n * - The same token can be part of several crowdsales through the approve() mechanism\\n\\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\\n\\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\\n\\n *\\n\\n */\\n\\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\\n\\n\\n\\n  string public name = \\\"TokenHome\\\";\\n\\n\\n\\n  string public symbol = \\\"TH\\\";\\n\\n\\n\\n  uint8 public decimals;\\n\\n\\n\\n  address public lost_and_found_master;\\n\\n\\n\\n  /**\\n\\n   * Construct the token.\\n\\n   *\\n\\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\\n\\n   *\\n\\n   * @param initial_supply How many tokens we start with.\\n\\n   * @param token_decimals Number of decimal places.\\n\\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\\n\\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\\n\\n   */\\n\\n  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\\n\\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\\n\\n    require(token_retriever != address(0));\\n\\n    decimals = token_decimals;\\n\\n    lost_and_found_master = token_retriever;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * When token is released to be transferable, prohibit new token creation.\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    mintingFinished = true;\\n\\n    super.releaseTokenTransfer();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n    return released && super.canUpgrade();\\n\\n  }\\n\\n\\n\\n  function burn(uint value) public {\\n\\n    burnTokens(msg.sender, value);\\n\\n  }\\n\\n\\n\\n  function getLostAndFoundMaster() internal view returns(address) {\\n\\n    return lost_and_found_master;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract base contract for token sales.\\n\\n *\\n\\n * Handles\\n\\n * - start and end dates\\n\\n * - accepting investments\\n\\n * - various statistics during the crowdfund\\n\\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\\n\\n *\\n\\n */\\n\\ncontract GenericCrowdsale is Haltable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /* The token we are selling */\\n\\n  CrowdsaleToken public token;\\n\\n\\n\\n  /* ether will be transferred to this address */\\n\\n  address public multisigWallet;\\n\\n\\n\\n  /* the starting timestamp of the crowdsale */\\n\\n  uint public startsAt;\\n\\n\\n\\n  /* the ending timestamp of the crowdsale */\\n\\n  uint public endsAt;\\n\\n\\n\\n  /* the number of tokens already sold through this contract*/\\n\\n  uint public tokensSold = 0;\\n\\n\\n\\n  /* How many wei of funding we have raised */\\n\\n  uint public weiRaised = 0;\\n\\n\\n\\n  /* How many distinct addresses have invested */\\n\\n  uint public investorCount = 0;\\n\\n\\n\\n  /* Has this crowdsale been finalized */\\n\\n  bool public finalized = false;\\n\\n\\n\\n  /* Do we need to have a unique contributor id for each customer */\\n\\n  bool public requireCustomerId = false;\\n\\n\\n\\n  /* Has this crowdsale been configured */\\n\\n  bool public configured = false;\\n\\n\\n\\n  /**\\n\\n   * Do we verify that contributor has been cleared on the server side (accredited investors only).\\n\\n   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\\n\\n   */\\n\\n  bool public requiredSignedAddress = false;\\n\\n\\n\\n  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\\n\\n  address public signerAddress;\\n\\n\\n\\n  /** How many ETH each address has invested in this crowdsale */\\n\\n  mapping (address => uint) public investedAmountOf;\\n\\n\\n\\n  /** How many tokens this crowdsale has credited for each investor address */\\n\\n  mapping (address => uint) public tokenAmountOf;\\n\\n\\n\\n  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\\n\\n  mapping (address => bool) public earlyParticipantWhitelist;\\n\\n\\n\\n  /** State machine\\n\\n   *\\n\\n   * - PendingConfiguration: Crowdsale not yet configured\\n\\n   * - Prefunding: We have not reached the starting timestamp yet\\n\\n   * - Funding: Active crowdsale\\n\\n   * - Success: Crowdsale ended\\n\\n   * - Finalized: The finalize function has been called and successfully executed\\n\\n   */\\n\\n  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\\n\\n\\n\\n\\n\\n  // A new investment was made\\n\\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\\n\\n\\n\\n  // The rules about what kind of investments we accept were changed\\n\\n  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\\n\\n\\n\\n  // Address early participation whitelist status changed\\n\\n  event Whitelisted(address addr, bool status);\\n\\n\\n\\n  // Crowdsale's finalize function has been called\\n\\n  event Finalized();\\n\\n\\n\\n  /*\\n\\n   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   *\\n\\n   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\\n\\n   */\\n\\n  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\\n\\n    setMultisig(team_multisig);\\n\\n\\n\\n    // Don't mess the dates\\n\\n    require(start != 0 && end != 0);\\n\\n    require(now < start && start < end);\\n\\n    startsAt = start;\\n\\n    endsAt = end;\\n\\n    configured = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Default fallback behaviour is to call buy.\\n\\n   * Ideally, no contract calls this crowdsale without supporting ERC20.\\n\\n   * However, some sort of refunding function may be desired to cover such situations.\\n\\n   */\\n\\n  function() payable public {\\n\\n    buy();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Make an investment.\\n\\n   *\\n\\n   * The crowdsale must be running for one to invest.\\n\\n   * We must have not pressed the emergency brake.\\n\\n   *\\n\\n   * @param receiver The Ethereum address who receives the tokens\\n\\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\\n\\n   *\\n\\n   */\\n\\n  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\\n\\n    // Determine if it's a good time to accept investment from this participant\\n\\n    if (getState() == State.PreFunding) {\\n\\n      // Are we whitelisted for early deposit\\n\\n      require(earlyParticipantWhitelist[msg.sender]);\\n\\n    }\\n\\n\\n\\n    uint weiAmount;\\n\\n    uint tokenAmount;\\n\\n    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\\n\\n    // Sanity check against bad implementation.\\n\\n    assert(weiAmount <= msg.value);\\n\\n    \\n\\n    // Dust transaction if no tokens can be given\\n\\n    require(tokenAmount != 0);\\n\\n\\n\\n    if (investedAmountOf[receiver] == 0) {\\n\\n      // A new investor\\n\\n      investorCount++;\\n\\n    }\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\\n\\n\\n\\n    // Pocket the money\\n\\n    multisigWallet.transfer(weiAmount);\\n\\n\\n\\n    // Return excess of money\\n\\n    returnExcedent(msg.value.sub(weiAmount), msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Preallocate tokens for the early investors.\\n\\n   *\\n\\n   * Preallocated tokens have been sold before the actual crowdsale opens.\\n\\n   * This function mints the tokens and moves the crowdsale needle.\\n\\n   *\\n\\n   * No money is exchanged, as the crowdsale team already have received the payment.\\n\\n   *\\n\\n   * @param receiver Account that receives the tokens.\\n\\n   * @param fullTokens tokens as full tokens - decimal places are added internally.\\n\\n   * @param weiPrice Price of a single indivisible token in wei.\\n\\n   *\\n\\n   */\\n\\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\\n\\n    require(receiver != address(0));\\n\\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\\n\\n    require(tokenAmount != 0);\\n\\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Private function to update accounting in the crowdsale.\\n\\n   */\\n\\n  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\\n\\n    // Update investor\\n\\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\\n\\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\\n\\n\\n\\n    // Update totals\\n\\n    weiRaised = weiRaised.add(weiAmount);\\n\\n    tokensSold = tokensSold.add(tokenAmount);\\n\\n\\n\\n    assignTokens(receiver, tokenAmount);\\n\\n    // Tell us that the investment was completed successfully\\n\\n    Invested(receiver, weiAmount, tokenAmount, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\\n\\n    bytes32 hash = sha256(receiver);\\n\\n    require(ecrecover(hash, v, r, s) == signerAddress);\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Buys tokens on behalf of an address.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the receiver address.\\n\\n   */\\n\\n  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\\n\\n    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\\n\\n    investInternal(receiver, 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\\n\\n    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithCustomerId(uint128 customerId) public payable {\\n\\n    buyOnBehalfWithCustomerId(msg.sender, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * The basic entry point to participate in the crowdsale process.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the sender address.\\n\\n   */\\n\\n  function buy() public payable {\\n\\n    buyOnBehalf(msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    finalized = true;\\n\\n    Finalized();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy do we need to have server-side customer ids for the investments.\\n\\n   *\\n\\n   */\\n\\n  function setRequireCustomerId(bool value) public onlyOwner {\\n\\n    requireCustomerId = value;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy if all investors must be cleared on the server side first.\\n\\n   *\\n\\n   * This is e.g. for the accredited investor clearing.\\n\\n   *\\n\\n   */\\n\\n  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\\n\\n    requiredSignedAddress = value;\\n\\n    signerAddress = signer;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow addresses to do early participation.\\n\\n   */\\n\\n  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\\n\\n    earlyParticipantWhitelist[addr] = status;\\n\\n    Whitelisted(addr, status);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal setter for the multisig wallet\\n\\n   */\\n\\n  function setMultisig(address addr) internal {\\n\\n    require(addr != 0);\\n\\n    multisigWallet = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Crowdfund state machine management.\\n\\n   *\\n\\n   * This function has the timed transition builtin.\\n\\n   * So there is no chance of the variable being stale.\\n\\n   */\\n\\n  function getState() public view returns (State) {\\n\\n    if (finalized) return State.Finalized;\\n\\n    else if (!configured) return State.PendingConfiguration;\\n\\n    else if (now < startsAt) return State.PreFunding;\\n\\n    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\\n\\n    else return State.Success;\\n\\n  }\\n\\n\\n\\n  /** Internal functions that exist to provide inversion of control should they be overriden */\\n\\n\\n\\n  /** Interface for the concrete instance to interact with the token contract in a customizable way */\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal;\\n\\n\\n\\n  /**\\n\\n   *  Determine if the goal was already reached in the current crowdsale\\n\\n   */\\n\\n  function isCrowdsaleFull() internal view returns (bool full);\\n\\n\\n\\n  /**\\n\\n   * Returns any excess wei received\\n\\n   * \\n\\n   * This function can be overriden to provide a different refunding method.\\n\\n   */\\n\\n  function returnExcedent(uint excedent, address receiver) internal {\\n\\n    if (excedent > 0) {\\n\\n      receiver.transfer(excedent);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /** \\n\\n   *  Calculate the amount of tokens that corresponds to the received amount.\\n\\n   *  The wei amount is returned too in case not all of it can be invested.\\n\\n   *\\n\\n   *  Note: When there's an excedent due to rounding error, it should be returned to allow refunding.\\n\\n   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\\n\\n   *  The workaround is good enough for most use cases, hence the simplified function signature.\\n\\n   *  @return weiAllowed The amount of wei accepted in this transaction.\\n\\n   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\\n\\n   */\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\\n\\n\\n\\n  //\\n\\n  // Modifiers\\n\\n  //\\n\\n\\n\\n  modifier inState(State state) {\\n\\n    require(getState() == state);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier unsignedBuyAllowed() {\\n\\n    require(!requiredSignedAddress);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\\n\\n  modifier notFinished() {\\n\\n    State current_state = getState();\\n\\n    require(current_state == State.PreFunding || current_state == State.Funding);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier validCustomerId(uint128 customerId) {\\n\\n    require(customerId != 0);  // UUIDv4 sanity check\\n\\n    _;\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Simple deployment information store inside contract storage.\\n\\ncontract DeploymentInfo {\\n\\n  uint private deployed_on;\\n\\n\\n\\n  function DeploymentInfo() public {\\n\\n    deployed_on = block.number;\\n\\n  }\\n\\n\\n\\n\\n\\n  function getDeploymentBlock() public view returns (uint) {\\n\\n    return deployed_on;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\\n\\n *\\n\\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\\n\\n *\\n\\n * Heavily modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n\\n\\n/// @dev Tranche based pricing.\\n\\n///      Implementing \\\"first price\\\" tranches, meaning, that if a buyer's order is\\n\\n///      covering more than one tranche, the price of the lowest tranche will apply\\n\\n///      to the whole order.\\n\\ncontract TokenTranchePricing {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /**\\n\\n   * Define pricing schedule using tranches.\\n\\n   */\\n\\n  struct Tranche {\\n\\n      // Amount in tokens when this tranche becomes inactive\\n\\n      uint amount;\\n\\n      // Timestamp interval [start, end)\\n\\n      // Starting timestamp (included in the interval)\\n\\n      uint start;\\n\\n      // Ending timestamp (excluded from the interval)\\n\\n      uint end;\\n\\n      // How many tokens per wei you will get while this tranche is active\\n\\n      uint price;\\n\\n  }\\n\\n  // We define offsets and size for the deserialization of ordered tuples in raw arrays\\n\\n  uint private constant amount_offset = 0;\\n\\n  uint private constant start_offset = 1;\\n\\n  uint private constant end_offset = 2;\\n\\n  uint private constant price_offset = 3;\\n\\n  uint private constant tranche_size = 4;\\n\\n\\n\\n  Tranche[] public tranches;\\n\\n\\n\\n  function getTranchesLength() public view returns (uint) {\\n\\n    return tranches.length;\\n\\n  }\\n\\n  \\n\\n  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\\n\\n  //\\n\\n  /// @dev Construction, creating a list of tranches\\n\\n  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\\n\\n  //\\n\\n  function configurationTokenTranchePricing(uint[] init_tranches) internal {\\n\\n    // Need to have tuples, length check\\n\\n    require(init_tranches.length % tranche_size == 0);\\n\\n    // A tranche with amount zero can never be selected and is therefore useless.\\n\\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\\n\\n    require(init_tranches[amount_offset] > 0);\\n\\n\\n\\n    uint input_tranches_length = init_tranches.length.div(tranche_size);\\n\\n    Tranche memory last_tranche;\\n\\n    for (uint i = 0; i < input_tranches_length; i++) {\\n\\n      uint tranche_offset = i.mul(tranche_size);\\n\\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\\n\\n      uint start = init_tranches[tranche_offset.add(start_offset)];\\n\\n      uint end = init_tranches[tranche_offset.add(end_offset)];\\n\\n      uint price = init_tranches[tranche_offset.add(price_offset)];\\n\\n      // No invalid steps\\n\\n      require(start < end && now < end);\\n\\n      // Bail out when entering unnecessary tranches\\n\\n      // This is preferably checked before deploying contract into any blockchain.\\n\\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\\n\\n              (end > last_tranche.end && amount >= last_tranche.amount));\\n\\n\\n\\n      last_tranche = Tranche(amount, start, end, price);\\n\\n      tranches.push(last_tranche);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return Returns the struct representing the current tranche\\n\\n  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\\n\\n    for (uint i = 0; i < tranches.length; i++) {\\n\\n      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\\n\\n        return tranches[i];\\n\\n      }\\n\\n    }\\n\\n    // No tranche is currently active\\n\\n    revert();\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current price. May revert if there is no tranche currently active.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return The current price\\n\\n  function getCurrentPrice(uint tokensSold) internal view returns (uint result) {\\n\\n    return getCurrentTranche(tokensSold).price;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\\n\\ncontract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\\n\\n  uint public sellable_tokens;\\n\\n  uint public initial_tokens;\\n\\n  uint public milieurs_per_eth; \\n\\n\\n\\n  /*\\n\\n   * The constructor for the crowdsale was removed given it didn't receive any arguments nor had any body.\\n\\n   *\\n\\n   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\\n\\n   * \\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\\n\\n   */\\n\\n\\n\\n  function configurationCrowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply, uint8 token_decimals, uint max_tokens_to_sell) public onlyOwner {\\n\\n\\n\\n      \\n\\n      initial_tokens = multisig_supply;  \\n\\n      token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\\n\\n      // Necessary if assignTokens mints\\n\\n      token.setMintAgent(address(this), true);\\n\\n      // Necessary if finalize is overriden to release the tokens for public trading.\\n\\n      token.setReleaseAgent(address(this));\\n\\n      // Necessary for the execution of buy function and of the subsequent CrowdsaleToken's transfer function. \\n\\n      token.setTransferAgent(address(this), true);\\n\\n      // Crowdsale mints to himself the initial supply\\n\\n      token.mint(address(this), crowdsale_supply);\\n\\n\\n\\n      sellable_tokens = max_tokens_to_sell;\\n\\n\\n\\n      // Configuration functionality for GenericCrowdsale.\\n\\n      configurationGenericCrowdsale(team_multisig, start, end);\\n\\n\\n\\n      // Configuration functionality for TokenTranchePricing.\\n\\n      configurationTokenTranchePricing(init_tranches);\\n\\n  }\\n\\n\\n\\n  //token assignation\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal {\\n\\n    token.transfer(receiver, tokenAmount);\\n\\n  }\\n\\n\\n\\n  //token amount calculation\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\\n\\n    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\\n\\n    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\\n\\n    weiAllowed = maxWeiAllowed.min256(weiAmount);\\n\\n\\n\\n    require(token.balanceOf(receiver).add(weiAllowed) >= 100);\\n\\n    \\n\\n    if (weiAmount < maxWeiAllowed) {\\n\\n      //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\\n\\n      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\\n\\n    }\\n\\n    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\\n\\n    else {\\n\\n      tokenAmount = sellable_tokens.sub(tokensSold);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  //TODO: implement to control funding state criterion\\n\\n  function isCrowdsaleFull() internal view returns (bool full) {\\n\\n    return tokensSold >= sellable_tokens;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    //Tokens sold + bounties represent 75% of the total, the other 25% goes ti the multisig to the partners and to regulate market \\n\\n    uint sold = tokensSold.add(  initial_tokens);\\n\\n    uint toShare = sold.mul(25).div(75).mul(10**uint(token.decimals()));\\n\\n    token.setMintAgent(address(this), true);\\n\\n    token.mint(multisigWallet, toShare);\\n\\n    token.setMintAgent(address(this), false);\\n\\n    token.releaseTokenTransfer();\\n\\n    token.burn(token.balanceOf(address(this)));\\n\\n    super.finalize();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * This function decides who handles lost tokens.\\n\\n   * Do note that this function is NOT meant to be used in a token refund mecahnism.\\n\\n   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address) {\\n\\n    return owner;\\n\\n\\n\\n  }\\n\\n\\n\\n  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\\n\\n  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\\n\\n      require(startingTime > now && startingTime < endsAt);\\n\\n      startsAt = startingTime;\\n\\n  }\\n\\n\\n\\n  function setEndingTime(uint endingTime) public onlyOwner notFinished {\\n\\n       require(endingTime > now && endingTime > startsAt);\\n\\n       endsAt = endingTime;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n  function updateEursPerEth (uint milieurs_amount) public onlyOwner {\\n\\n    require(milieurs_amount >= 100);\\n\\n    milieurs_per_eth = milieurs_amount;\\n\\n  }\\n\\n}\",\"keccak256\":\"0x77a4b14b5eff26dba56f060a11f4a2e7550d057d390e14aef70e0988fe82e7db\"}},\"version\":1}"
      },
      "LostAndFoundToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "Mintable": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "MintableToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "Ownable": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "ReleasableToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040526004805460a060020a60ff021916905560038054600160a060020a03191633600160a060020a03161790556109de8061003e6000396000f3006060604052600436106100e55763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166302f652a381146100ea578063095ea7b31461011057806318160ddd1461014657806323b872dd1461016b57806329ff4f53146101935780635f412d4f146101b257806370a08231146101c5578063867c2857146101e45780638da5cb5b146102035780639613252114610232578063a9059cbb14610245578063ac3cb72c14610267578063d1f276d314610289578063dd62ed3e1461029c578063e2301d02146102c1578063f2fde38b146102e3575b600080fd5b34156100f557600080fd5b61010e600160a060020a03600435166024351515610302565b005b341561011b57600080fd5b610132600160a060020a0360043516602435610363565b604051901515815260200160405180910390f35b341561015157600080fd5b610159610409565b60405190815260200160405180910390f35b341561017657600080fd5b610132600160a060020a036004358116906024351660443561040f565b341561019e57600080fd5b61010e600160a060020a0360043516610463565b34156101bd57600080fd5b61010e6104c8565b34156101d057600080fd5b610159600160a060020a0360043516610509565b34156101ef57600080fd5b610132600160a060020a0360043516610524565b341561020e57600080fd5b610216610539565b604051600160a060020a03909116815260200160405180910390f35b341561023d57600080fd5b610132610548565b341561025057600080fd5b610132600160a060020a0360043516602435610558565b341561027257600080fd5b610132600160a060020a03600435166024356105aa565b341561029457600080fd5b61021661064f565b34156102a757600080fd5b610159600160a060020a036004358116906024351661065e565b34156102cc57600080fd5b610132600160a060020a0360043516602435610689565b34156102ee57600080fd5b61010e600160a060020a036004351661075c565b60035433600160a060020a0390811691161461031d57600080fd5b60045460009060a060020a900460ff161561033757600080fd5b50600160a060020a03919091166000908152600560205260409020805460ff1916911515919091179055565b60008115806103955750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156103a057600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005490565b600454600090849060a060020a900460ff16806104445750600160a060020a03811660009081526005602052604090205460ff165b151561044f57600080fd5b61045a8585856107bb565b95945050505050565b60035433600160a060020a0390811691161461047e57600080fd5b60045460009060a060020a900460ff161561049857600080fd5b506004805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b60045433600160a060020a039081169116146104e357600080fd5b6004805474ff0000000000000000000000000000000000000000191660a060020a179055565b600160a060020a031660009081526001602052604090205490565b60056020526000908152604090205460ff1681565b600354600160a060020a031681565b60045460a060020a900460ff1681565b600454600090339060a060020a900460ff168061058d5750600160a060020a03811660009081526005602052604090205460ff165b151561059857600080fd5b6105a284846108cb565b949350505050565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120546105e2818463ffffffff61098a16565b600160a060020a033381166000818152600260209081526040808320948a168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060019392505050565b600454600160a060020a031681565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600160a060020a033381166000908152600260209081526040808320938616835292905290812054808311156106e657600160a060020a0333811660009081526002602090815260408083209388168352929052908120556106f6565b6105e2818463ffffffff6109a016565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60035433600160a060020a0390811691161461077757600080fd5b600160a060020a038116151561078c57600080fd5b6003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600160a060020a0380841660008181526002602090815260408083203390951683529381528382205492825260019052918220546107ff908463ffffffff6109a016565b600160a060020a038087166000908152600160205260408082209390935590861681522054610834908463ffffffff61098a16565b600160a060020a03851660009081526001602052604090205561085d818463ffffffff6109a016565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b600160a060020a0333166000908152600160205260408120546108f4908363ffffffff6109a016565b600160a060020a033381166000908152600160205260408082209390935590851681522054610929908363ffffffff61098a16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b60008282018381101561099957fe5b9392505050565b6000828211156109ac57fe5b509003905600a165627a7a723058207c1e51d8e2cbaa55b5dd58616d25cba7f69c4043e253f95f94a6ad172570b1b40029",
            "opcodes": "PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 DUP1 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP PUSH1 0xFF MUL NOT AND SWAP1 SSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND OR SWAP1 SSTORE PUSH2 0x9DE DUP1 PUSH2 0x3E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xE5 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x2F652A3 DUP2 EQ PUSH2 0xEA JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x110 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x146 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x16B JUMPI DUP1 PUSH4 0x29FF4F53 EQ PUSH2 0x193 JUMPI DUP1 PUSH4 0x5F412D4F EQ PUSH2 0x1B2 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1C5 JUMPI DUP1 PUSH4 0x867C2857 EQ PUSH2 0x1E4 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x203 JUMPI DUP1 PUSH4 0x96132521 EQ PUSH2 0x232 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x245 JUMPI DUP1 PUSH4 0xAC3CB72C EQ PUSH2 0x267 JUMPI DUP1 PUSH4 0xD1F276D3 EQ PUSH2 0x289 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x29C JUMPI DUP1 PUSH4 0xE2301D02 EQ PUSH2 0x2C1 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2E3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 0xF5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10E PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD ISZERO ISZERO PUSH2 0x302 JUMP JUMPDEST STOP JUMPDEST CALLVALUE ISZERO PUSH2 0x11B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x132 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x363 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x151 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x159 PUSH2 0x409 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x176 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x132 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x40F JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x19E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10E PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x463 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x1BD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10E PUSH2 0x4C8 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x1D0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x159 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x509 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x132 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x524 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x20E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x216 PUSH2 0x539 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0x23D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x132 PUSH2 0x548 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x250 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x132 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x558 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x272 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x132 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x5AA JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x294 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x216 PUSH2 0x64F JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x2A7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x159 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x65E JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x2CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x132 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x689 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x2EE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x10E PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x75C JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x31D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x337 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 SWAP1 SWAP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 DUP1 SLOAD PUSH1 0xFF NOT AND SWAP2 ISZERO ISZERO SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x395 JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x3A0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 DUP5 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x444 JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO ISZERO PUSH2 0x44F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x45A DUP6 DUP6 DUP6 PUSH2 0x7BB JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x47E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x498 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x4 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x4 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x4E3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND PUSH1 0xA0 PUSH1 0x2 EXP OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x0 SWAP1 CALLER SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP1 PUSH2 0x58D JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x5 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH1 0xFF AND JUMPDEST ISZERO ISZERO PUSH2 0x598 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x5A2 DUP5 DUP5 PUSH2 0x8CB JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SLOAD PUSH2 0x5E2 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x98A AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP11 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x4 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SLOAD DUP1 DUP4 GT ISZERO PUSH2 0x6E6 JUMPI PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SSTORE PUSH2 0x6F6 JUMP JUMPDEST PUSH2 0x5E2 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x9A0 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD CALLER PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND SWAP2 AND EQ PUSH2 0x777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x78C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER SWAP1 SWAP6 AND DUP4 MSTORE SWAP4 DUP2 MSTORE DUP4 DUP3 KECCAK256 SLOAD SWAP3 DUP3 MSTORE PUSH1 0x1 SWAP1 MSTORE SWAP2 DUP3 KECCAK256 SLOAD PUSH2 0x7FF SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x9A0 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x834 SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x98A AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x85D DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x9A0 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x8F4 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x9A0 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x929 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x98A AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 CALLER SWAP1 SWAP2 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x999 JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x9AC JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH29 0x1E51D8E2CBAA55B5DD58616D25CBA7F69C4043E253F95F94A6AD172570 0xb1 0xb4 STOP 0x29 ",
            "sourceMap": "11010:2755:0:-;;;11309:28;;;-1:-1:-1;;;;;;11309:28:0;;;969:5;:18;;-1:-1:-1;;;;;;969:18:0;977:10;-1:-1:-1;;;;;969:18:0;;;;11010:2755;;;-1:-1:-1;11010:2755:0;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.19+commit.c4cbbb05\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"state\",\"type\":\"bool\"}],\"name\":\"setTransferAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"setReleaseAgent\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"releaseTokenTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"transferAgents\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"released\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"releaseAgent\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens than an owner allowed to a spender.\",\"params\":{\"account\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint specifing the amount of tokens still avaible for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"account\":\"The address whose balance is to be queried.\"},\"return\":\"An uint representing the amount owned by the passed address.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"newOwner\":\"The address to transfer ownership to. \"}}}},\"userdoc\":{\"methods\":{\"addApproval(address,uint256)\":{\"notice\":\"Atomic increment of approved spending    * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729    \"},\"releaseTokenTransfer()\":{\"notice\":\"One way function to release the tokens into the wild.    * Can be called only from the release agent that should typically be the finalize agent ICO contract. In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\"},\"setReleaseAgent(address)\":{\"notice\":\"Set the contract that can call release and make the token transferable.    * Since the owner of this contract is (or should be) the crowdsale, it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\"},\"setTransferAgent(address,bool)\":{\"notice\":\"Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\"},\"subApproval(address,uint256)\":{\"notice\":\"Atomic decrement of approved spending.    * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"},\"transfer(address,uint256)\":{\"notice\":\"We restrict transfer by overriding it \"},\"transferFrom(address,address,uint256)\":{\"notice\":\"We restrict transferFrom by overriding it \"}}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"ReleasableToken\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Envisioned in FirstBlood ICO contract.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control \\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\". \\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  /** \\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  function Ownable() internal {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner. \\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param newOwner The address to transfer ownership to. \\n\\n   */\\n\\n  function transferOwnership(address newOwner) onlyOwner public {\\n\\n    require(newOwner != address(0));\\n\\n    owner = newOwner;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract contract that allows children to implement an\\n\\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\\n\\n *\\n\\n */\\n\\ncontract Haltable is Ownable {\\n\\n  bool public halted;\\n\\n\\n\\n  event Halted(bool halted);\\n\\n\\n\\n  modifier stopInEmergency {\\n\\n    require(!halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier onlyInEmergency {\\n\\n    require(halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  // called by the owner on emergency, triggers stopped state\\n\\n  function halt() external onlyOwner {\\n\\n    halted = true;\\n\\n    Halted(true);\\n\\n  }\\n\\n\\n\\n  // called by the owner on end of emergency, returns to normal state\\n\\n  function unhalt() external onlyOwner onlyInEmergency {\\n\\n    halted = false;\\n\\n    Halted(false);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * Math operations with safety checks\\n\\n */\\n\\nlibrary SafeMath {\\n\\n  function mul(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a * b;\\n\\n    assert(a == 0 || c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function div(uint a, uint b) internal pure returns (uint) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    uint c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  function add(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n\\n\\n  function max256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Interface for the standard token.\\n\\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n\\n */\\n\\ncontract EIP20Token {\\n\\n\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\\n\\n  function approve(address spender, uint256 value) public returns (bool success);\\n\\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\n\\n  /**\\n\\n  ** Optional functions\\n\\n  *\\n\\n  function name() public view returns (string name);\\n\\n  function symbol() public view returns (string symbol);\\n\\n  function decimals() public view returns (uint8 decimals);\\n\\n  *\\n\\n  **/\\n\\n\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Interface for burning tokens\\n\\ncontract Burnable {\\n\\n  // @dev Destroys tokens for an account\\n\\n  // @param account Account whose tokens are destroyed\\n\\n  // @param value Amount of tokens to destroy\\n\\n  function burnTokens(address account, uint value) internal;\\n\\n  event Burned(address account, uint value);\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * Internal interface for the minting of tokens.\\n\\n */\\n\\ncontract Mintable {\\n\\n\\n\\n  /**\\n\\n   * @dev Mints tokens for an account\\n\\n   * This function should the Minted event.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal;\\n\\n\\n\\n  /** Token supply got increased and a new owner received these tokens */\\n\\n  event Minted(address receiver, uint amount);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Standard token\\n\\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\\n\\n */\\n\\ncontract StandardToken is EIP20Token, Burnable, Mintable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  uint private total_supply;\\n\\n  mapping(address => uint) private balances;\\n\\n  mapping(address => mapping (address => uint)) private allowed;\\n\\n\\n\\n\\n\\n  function totalSupply() public view returns (uint) {\\n\\n    return total_supply;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev transfer token for a specified address\\n\\n   * @param to The address to transfer to.\\n\\n   * @param value The amount to be transferred.\\n\\n   */\\n\\n  function transfer(address to, uint value) public returns (bool success) {\\n\\n    balances[msg.sender] = balances[msg.sender].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    Transfer(msg.sender, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Gets the balance of the specified address.\\n\\n   * @param account The address whose balance is to be queried.\\n\\n   * @return An uint representing the amount owned by the passed address.\\n\\n   */\\n\\n  function balanceOf(address account) public view returns (uint balance) {\\n\\n    return balances[account];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param from address The address which you want to send tokens from\\n\\n   * @param to address The address which you want to transfer to\\n\\n   * @param value uint the amout of tokens to be transfered\\n\\n   */\\n\\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\\n\\n    uint allowance = allowed[from][msg.sender];\\n\\n\\n\\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\\n\\n    // require(value <= allowance);\\n\\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\\n\\n\\n\\n    balances[from] = balances[from].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    allowed[from][msg.sender] = allowance.sub(value);\\n\\n    Transfer(from, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * @param spender The address which will spend the funds.\\n\\n   * @param value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address spender, uint value) public returns (bool success) {\\n\\n\\n\\n    // To change the approve amount you first have to reduce the addresses'\\n\\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\\n\\n    //  already 0 to mitigate the race condition described here:\\n\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n    require (value == 0 || allowed[msg.sender][spender] == 0);\\n\\n\\n\\n    allowed[msg.sender][spender] = value;\\n\\n    Approval(msg.sender, spender, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n\\n   * @param account address The address which owns the funds.\\n\\n   * @param spender address The address which will spend the funds.\\n\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n\\n   */\\n\\n  function allowance(address account, address spender) public view returns (uint remaining) {\\n\\n    return allowed[account][spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic increment of approved spending\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   *\\n\\n   */\\n\\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\\n\\n      uint oldValue = allowed[msg.sender][spender];\\n\\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic decrement of approved spending.\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   */\\n\\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\\n\\n\\n\\n      uint oldVal = allowed[msg.sender][spender];\\n\\n\\n\\n      if (subtractedValue > oldVal) {\\n\\n          allowed[msg.sender][spender] = 0;\\n\\n      } else {\\n\\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\\n\\n      }\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\\n\\n   */\\n\\n  function burnTokens(address account, uint value) internal {\\n\\n    balances[account] = balances[account].sub(value);\\n\\n    total_supply = total_supply.sub(value);\\n\\n    Transfer(account, 0, value);\\n\\n    Burned(account, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal minting function.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal {\\n\\n    total_supply = total_supply.add(amount);\\n\\n    balances[receiver] = balances[receiver].add(amount);\\n\\n    Minted(receiver, amount);\\n\\n\\n\\n    // Beware: Address zero may be used for special transactions in a future fork.\\n\\n    // This will make the mint transaction appear in EtherScan.io\\n\\n    // We can remove this after there is a standardized minting event\\n\\n    Transfer(0, receiver, amount);\\n\\n  }\\n\\n  \\n\\n}\\n\\n\\n\\n/**\\n\\n * Define interface for releasing the token transfer after a successful crowdsale.\\n\\n */\\n\\ncontract ReleasableToken is StandardToken, Ownable {\\n\\n\\n\\n  /* The finalizer contract that allows lifting the transfer limits on this token */\\n\\n  address public releaseAgent;\\n\\n\\n\\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\\n\\n  bool public released = false;\\n\\n\\n\\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\\n\\n  mapping (address => bool) public transferAgents;\\n\\n\\n\\n  /**\\n\\n   * Set the contract that can call release and make the token transferable.\\n\\n   *\\n\\n   * Since the owner of this contract is (or should be) the crowdsale,\\n\\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\\n\\n   */\\n\\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\\n\\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\\n\\n    releaseAgent = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\\n\\n   */\\n\\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\\n\\n    transferAgents[addr] = state;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * One way function to release the tokens into the wild.\\n\\n   *\\n\\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\\n\\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    released = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Limit token transfer until the crowdsale is over.\\n\\n   */\\n\\n  modifier canTransfer(address sender) {\\n\\n    require(released || transferAgents[sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only before or after the tokens have been released */\\n\\n  modifier inReleaseState(bool releaseState) {\\n\\n    require(releaseState == released);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only by a whitelisted release agent. */\\n\\n  modifier onlyReleaseAgent() {\\n\\n    require(msg.sender == releaseAgent);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** We restrict transfer by overriding it */\\n\\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\\n\\n    // Call StandardToken.transfer()\\n\\n   return super.transfer(to, value);\\n\\n  }\\n\\n\\n\\n  /** We restrict transferFrom by overriding it */\\n\\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\\n\\n    // Call StandardToken.transferForm()\\n\\n    return super.transferFrom(from, to, value);\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * First envisioned by Golem and Lunyr projects.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Inspired by Lunyr.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n */\\n\\n\\n\\n/**\\n\\n * Upgrade agent transfers tokens to a new contract.\\n\\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\\n\\n *\\n\\n * The Upgrade agent is the interface used to implement a token\\n\\n * migration in the case of an emergency.\\n\\n * The function upgradeFrom has to implement the part of the creation\\n\\n * of new tokens on behalf of the user doing the upgrade.\\n\\n *\\n\\n * The new token can implement this interface directly, or use.\\n\\n */\\n\\ncontract UpgradeAgent {\\n\\n\\n\\n  /** This value should be the same as the original token's total supply */\\n\\n  uint public originalSupply;\\n\\n\\n\\n  /** Interface to ensure the contract is correctly configured */\\n\\n  function isUpgradeAgent() public pure returns (bool) {\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  Upgrade an account\\n\\n\\n\\n  When the token contract is in the upgrade status the each user will\\n\\n  have to call `upgrade(value)` function from UpgradeableToken.\\n\\n\\n\\n  The upgrade function adjust the balance of the user and the supply\\n\\n  of the previous token and then call `upgradeFrom(value)`.\\n\\n\\n\\n  The UpgradeAgent is the responsible to create the tokens for the user\\n\\n  in the new contract.\\n\\n\\n\\n  * @param from Account to upgrade.\\n\\n  * @param value Tokens to upgrade.\\n\\n\\n\\n  */\\n\\n  function upgradeFrom(address from, uint value) public;\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\\n\\n *\\n\\n */\\n\\ncontract UpgradeableToken is EIP20Token, Burnable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\\n\\n  address public upgradeMaster;\\n\\n\\n\\n  /** The next contract where the tokens will be migrated. */\\n\\n  UpgradeAgent public upgradeAgent;\\n\\n\\n\\n  /** How many tokens we have upgraded by now. */\\n\\n  uint public totalUpgraded = 0;\\n\\n\\n\\n  /**\\n\\n   * Upgrade states.\\n\\n   *\\n\\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\\n\\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\\n\\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\\n\\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\\n\\n   *\\n\\n   */\\n\\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\\n\\n\\n\\n  /**\\n\\n   * Somebody has upgraded some of his tokens.\\n\\n   */\\n\\n  event Upgrade(address indexed from, address to, uint value);\\n\\n\\n\\n  /**\\n\\n   * New upgrade agent available.\\n\\n   */\\n\\n  event UpgradeAgentSet(address agent);\\n\\n\\n\\n  /**\\n\\n   * Do not allow construction without upgrade master set.\\n\\n   */\\n\\n  function UpgradeableToken(address master) internal {\\n\\n    setUpgradeMaster(master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow the token holder to upgrade some of their tokens to a new contract.\\n\\n   */\\n\\n  function upgrade(uint value) public {\\n\\n    UpgradeState state = getUpgradeState();\\n\\n    // Ensure it's not called in a bad state\\n\\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\\n\\n\\n\\n    // Validate input value.\\n\\n    require(value != 0);\\n\\n\\n\\n    // Upgrade agent reissues the tokens\\n\\n    upgradeAgent.upgradeFrom(msg.sender, value);\\n\\n    \\n\\n    // Take tokens out from circulation\\n\\n    burnTokens(msg.sender, value);\\n\\n    totalUpgraded = totalUpgraded.add(value);\\n\\n\\n\\n    Upgrade(msg.sender, upgradeAgent, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set an upgrade agent that handles the upgrade process\\n\\n   */\\n\\n  function setUpgradeAgent(address agent) onlyMaster external {\\n\\n    // Check whether the token is in a state that we could think of upgrading\\n\\n    require(canUpgrade());\\n\\n\\n\\n    require(agent != 0x0);\\n\\n    // Upgrade has already begun for an agent\\n\\n    require(getUpgradeState() != UpgradeState.Upgrading);\\n\\n\\n\\n    upgradeAgent = UpgradeAgent(agent);\\n\\n\\n\\n    // Bad interface\\n\\n    require(upgradeAgent.isUpgradeAgent());\\n\\n    // Make sure that token supplies match in source and target\\n\\n    require(upgradeAgent.originalSupply() == totalSupply());\\n\\n\\n\\n    UpgradeAgentSet(upgradeAgent);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Get the state of the token upgrade.\\n\\n   */\\n\\n  function getUpgradeState() public view returns(UpgradeState) {\\n\\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\\n\\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\\n\\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\\n\\n    else return UpgradeState.Upgrading;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Change the upgrade master.\\n\\n   *\\n\\n   * This allows us to set a new owner for the upgrade mechanism.\\n\\n   */\\n\\n  function changeUpgradeMaster(address new_master) onlyMaster public {\\n\\n    setUpgradeMaster(new_master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal upgrade master setter.\\n\\n   */\\n\\n  function setUpgradeMaster(address new_master) private {\\n\\n    require(new_master != 0x0);\\n\\n    upgradeMaster = new_master;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Child contract can override to provide the condition in which the upgrade can begin.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n     return true;\\n\\n  }\\n\\n\\n\\n\\n\\n  modifier onlyMaster() {\\n\\n    require(msg.sender == upgradeMaster);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\\n\\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\\n\\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\\n\\ncontract LostAndFoundToken {\\n\\n  /**\\n\\n   * @return Address of the account that handles movements.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address);\\n\\n\\n\\n  /**\\n\\n   * @param agent Address that will be able to move tokens with transferFrom\\n\\n   * @param tokens Amount of tokens approved for transfer\\n\\n   * @param token_contract Contract of the token\\n\\n   */\\n\\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\\n\\n    require(msg.sender == getLostAndFoundMaster());\\n\\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\\n\\n    //  getting them stuck in another address by accident.\\n\\n    token_contract.approve(agent, tokens);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * A public interface to increase the supply of a token.\\n\\n *\\n\\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\\n\\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\\n\\n *\\n\\n */\\n\\ncontract MintableToken is Mintable, Ownable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n  /** List of agents that are allowed to create new tokens */\\n\\n  mapping (address => bool) public mintAgents;\\n\\n\\n\\n  event MintingAgentChanged(address addr, bool state);\\n\\n\\n\\n\\n\\n  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\\n\\n    require(multisig != address(0));\\n\\n    // Cannot create a token without supply and no minting\\n\\n    require(mintable || initialSupply != 0);\\n\\n    // Create initially all balance on the team multisig\\n\\n    if (initialSupply > 0)\\n\\n      mintInternal(multisig, initialSupply);\\n\\n    // No more new supply allowed after the token creation\\n\\n    mintingFinished = !mintable;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Create new tokens and allocate them to an address.\\n\\n   *\\n\\n   * Only callable by a mint agent (e.g. crowdsale contract).\\n\\n   */\\n\\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\\n\\n    mintInternal(receiver, amount);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a crowdsale contract to mint new tokens.\\n\\n   */\\n\\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\\n\\n    mintAgents[addr] = state;\\n\\n    MintingAgentChanged(addr, state);\\n\\n  }\\n\\n\\n\\n  modifier onlyMintAgent() {\\n\\n    // Only mint agents are allowed to mint new tokens\\n\\n    require(mintAgents[msg.sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Make sure we are not done yet. */\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * A crowdsale token.\\n\\n *\\n\\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\\n\\n *\\n\\n * - The token transfer() is disabled until the crowdsale is over\\n\\n * - The token contract gives an opt-in upgrade path to a new contract\\n\\n * - The same token can be part of several crowdsales through the approve() mechanism\\n\\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\\n\\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\\n\\n *\\n\\n */\\n\\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\\n\\n\\n\\n  string public name = \\\"TokenHome\\\";\\n\\n\\n\\n  string public symbol = \\\"TH\\\";\\n\\n\\n\\n  uint8 public decimals;\\n\\n\\n\\n  address public lost_and_found_master;\\n\\n\\n\\n  /**\\n\\n   * Construct the token.\\n\\n   *\\n\\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\\n\\n   *\\n\\n   * @param initial_supply How many tokens we start with.\\n\\n   * @param token_decimals Number of decimal places.\\n\\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\\n\\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\\n\\n   */\\n\\n  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\\n\\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\\n\\n    require(token_retriever != address(0));\\n\\n    decimals = token_decimals;\\n\\n    lost_and_found_master = token_retriever;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * When token is released to be transferable, prohibit new token creation.\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    mintingFinished = true;\\n\\n    super.releaseTokenTransfer();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n    return released && super.canUpgrade();\\n\\n  }\\n\\n\\n\\n  function burn(uint value) public {\\n\\n    burnTokens(msg.sender, value);\\n\\n  }\\n\\n\\n\\n  function getLostAndFoundMaster() internal view returns(address) {\\n\\n    return lost_and_found_master;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract base contract for token sales.\\n\\n *\\n\\n * Handles\\n\\n * - start and end dates\\n\\n * - accepting investments\\n\\n * - various statistics during the crowdfund\\n\\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\\n\\n *\\n\\n */\\n\\ncontract GenericCrowdsale is Haltable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /* The token we are selling */\\n\\n  CrowdsaleToken public token;\\n\\n\\n\\n  /* ether will be transferred to this address */\\n\\n  address public multisigWallet;\\n\\n\\n\\n  /* the starting timestamp of the crowdsale */\\n\\n  uint public startsAt;\\n\\n\\n\\n  /* the ending timestamp of the crowdsale */\\n\\n  uint public endsAt;\\n\\n\\n\\n  /* the number of tokens already sold through this contract*/\\n\\n  uint public tokensSold = 0;\\n\\n\\n\\n  /* How many wei of funding we have raised */\\n\\n  uint public weiRaised = 0;\\n\\n\\n\\n  /* How many distinct addresses have invested */\\n\\n  uint public investorCount = 0;\\n\\n\\n\\n  /* Has this crowdsale been finalized */\\n\\n  bool public finalized = false;\\n\\n\\n\\n  /* Do we need to have a unique contributor id for each customer */\\n\\n  bool public requireCustomerId = false;\\n\\n\\n\\n  /* Has this crowdsale been configured */\\n\\n  bool public configured = false;\\n\\n\\n\\n  /**\\n\\n   * Do we verify that contributor has been cleared on the server side (accredited investors only).\\n\\n   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\\n\\n   */\\n\\n  bool public requiredSignedAddress = false;\\n\\n\\n\\n  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\\n\\n  address public signerAddress;\\n\\n\\n\\n  /** How many ETH each address has invested in this crowdsale */\\n\\n  mapping (address => uint) public investedAmountOf;\\n\\n\\n\\n  /** How many tokens this crowdsale has credited for each investor address */\\n\\n  mapping (address => uint) public tokenAmountOf;\\n\\n\\n\\n  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\\n\\n  mapping (address => bool) public earlyParticipantWhitelist;\\n\\n\\n\\n  /** State machine\\n\\n   *\\n\\n   * - PendingConfiguration: Crowdsale not yet configured\\n\\n   * - Prefunding: We have not reached the starting timestamp yet\\n\\n   * - Funding: Active crowdsale\\n\\n   * - Success: Crowdsale ended\\n\\n   * - Finalized: The finalize function has been called and successfully executed\\n\\n   */\\n\\n  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\\n\\n\\n\\n\\n\\n  // A new investment was made\\n\\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\\n\\n\\n\\n  // The rules about what kind of investments we accept were changed\\n\\n  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\\n\\n\\n\\n  // Address early participation whitelist status changed\\n\\n  event Whitelisted(address addr, bool status);\\n\\n\\n\\n  // Crowdsale's finalize function has been called\\n\\n  event Finalized();\\n\\n\\n\\n  /*\\n\\n   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   *\\n\\n   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\\n\\n   */\\n\\n  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\\n\\n    setMultisig(team_multisig);\\n\\n\\n\\n    // Don't mess the dates\\n\\n    require(start != 0 && end != 0);\\n\\n    require(now < start && start < end);\\n\\n    startsAt = start;\\n\\n    endsAt = end;\\n\\n    configured = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Default fallback behaviour is to call buy.\\n\\n   * Ideally, no contract calls this crowdsale without supporting ERC20.\\n\\n   * However, some sort of refunding function may be desired to cover such situations.\\n\\n   */\\n\\n  function() payable public {\\n\\n    buy();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Make an investment.\\n\\n   *\\n\\n   * The crowdsale must be running for one to invest.\\n\\n   * We must have not pressed the emergency brake.\\n\\n   *\\n\\n   * @param receiver The Ethereum address who receives the tokens\\n\\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\\n\\n   *\\n\\n   */\\n\\n  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\\n\\n    // Determine if it's a good time to accept investment from this participant\\n\\n    if (getState() == State.PreFunding) {\\n\\n      // Are we whitelisted for early deposit\\n\\n      require(earlyParticipantWhitelist[msg.sender]);\\n\\n    }\\n\\n\\n\\n    uint weiAmount;\\n\\n    uint tokenAmount;\\n\\n    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\\n\\n    // Sanity check against bad implementation.\\n\\n    assert(weiAmount <= msg.value);\\n\\n    \\n\\n    // Dust transaction if no tokens can be given\\n\\n    require(tokenAmount != 0);\\n\\n\\n\\n    if (investedAmountOf[receiver] == 0) {\\n\\n      // A new investor\\n\\n      investorCount++;\\n\\n    }\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\\n\\n\\n\\n    // Pocket the money\\n\\n    multisigWallet.transfer(weiAmount);\\n\\n\\n\\n    // Return excess of money\\n\\n    returnExcedent(msg.value.sub(weiAmount), msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Preallocate tokens for the early investors.\\n\\n   *\\n\\n   * Preallocated tokens have been sold before the actual crowdsale opens.\\n\\n   * This function mints the tokens and moves the crowdsale needle.\\n\\n   *\\n\\n   * No money is exchanged, as the crowdsale team already have received the payment.\\n\\n   *\\n\\n   * @param receiver Account that receives the tokens.\\n\\n   * @param fullTokens tokens as full tokens - decimal places are added internally.\\n\\n   * @param weiPrice Price of a single indivisible token in wei.\\n\\n   *\\n\\n   */\\n\\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\\n\\n    require(receiver != address(0));\\n\\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\\n\\n    require(tokenAmount != 0);\\n\\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Private function to update accounting in the crowdsale.\\n\\n   */\\n\\n  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\\n\\n    // Update investor\\n\\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\\n\\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\\n\\n\\n\\n    // Update totals\\n\\n    weiRaised = weiRaised.add(weiAmount);\\n\\n    tokensSold = tokensSold.add(tokenAmount);\\n\\n\\n\\n    assignTokens(receiver, tokenAmount);\\n\\n    // Tell us that the investment was completed successfully\\n\\n    Invested(receiver, weiAmount, tokenAmount, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\\n\\n    bytes32 hash = sha256(receiver);\\n\\n    require(ecrecover(hash, v, r, s) == signerAddress);\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Buys tokens on behalf of an address.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the receiver address.\\n\\n   */\\n\\n  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\\n\\n    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\\n\\n    investInternal(receiver, 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\\n\\n    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithCustomerId(uint128 customerId) public payable {\\n\\n    buyOnBehalfWithCustomerId(msg.sender, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * The basic entry point to participate in the crowdsale process.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the sender address.\\n\\n   */\\n\\n  function buy() public payable {\\n\\n    buyOnBehalf(msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    finalized = true;\\n\\n    Finalized();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy do we need to have server-side customer ids for the investments.\\n\\n   *\\n\\n   */\\n\\n  function setRequireCustomerId(bool value) public onlyOwner {\\n\\n    requireCustomerId = value;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy if all investors must be cleared on the server side first.\\n\\n   *\\n\\n   * This is e.g. for the accredited investor clearing.\\n\\n   *\\n\\n   */\\n\\n  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\\n\\n    requiredSignedAddress = value;\\n\\n    signerAddress = signer;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow addresses to do early participation.\\n\\n   */\\n\\n  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\\n\\n    earlyParticipantWhitelist[addr] = status;\\n\\n    Whitelisted(addr, status);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal setter for the multisig wallet\\n\\n   */\\n\\n  function setMultisig(address addr) internal {\\n\\n    require(addr != 0);\\n\\n    multisigWallet = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Crowdfund state machine management.\\n\\n   *\\n\\n   * This function has the timed transition builtin.\\n\\n   * So there is no chance of the variable being stale.\\n\\n   */\\n\\n  function getState() public view returns (State) {\\n\\n    if (finalized) return State.Finalized;\\n\\n    else if (!configured) return State.PendingConfiguration;\\n\\n    else if (now < startsAt) return State.PreFunding;\\n\\n    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\\n\\n    else return State.Success;\\n\\n  }\\n\\n\\n\\n  /** Internal functions that exist to provide inversion of control should they be overriden */\\n\\n\\n\\n  /** Interface for the concrete instance to interact with the token contract in a customizable way */\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal;\\n\\n\\n\\n  /**\\n\\n   *  Determine if the goal was already reached in the current crowdsale\\n\\n   */\\n\\n  function isCrowdsaleFull() internal view returns (bool full);\\n\\n\\n\\n  /**\\n\\n   * Returns any excess wei received\\n\\n   * \\n\\n   * This function can be overriden to provide a different refunding method.\\n\\n   */\\n\\n  function returnExcedent(uint excedent, address receiver) internal {\\n\\n    if (excedent > 0) {\\n\\n      receiver.transfer(excedent);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /** \\n\\n   *  Calculate the amount of tokens that corresponds to the received amount.\\n\\n   *  The wei amount is returned too in case not all of it can be invested.\\n\\n   *\\n\\n   *  Note: When there's an excedent due to rounding error, it should be returned to allow refunding.\\n\\n   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\\n\\n   *  The workaround is good enough for most use cases, hence the simplified function signature.\\n\\n   *  @return weiAllowed The amount of wei accepted in this transaction.\\n\\n   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\\n\\n   */\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\\n\\n\\n\\n  //\\n\\n  // Modifiers\\n\\n  //\\n\\n\\n\\n  modifier inState(State state) {\\n\\n    require(getState() == state);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier unsignedBuyAllowed() {\\n\\n    require(!requiredSignedAddress);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\\n\\n  modifier notFinished() {\\n\\n    State current_state = getState();\\n\\n    require(current_state == State.PreFunding || current_state == State.Funding);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier validCustomerId(uint128 customerId) {\\n\\n    require(customerId != 0);  // UUIDv4 sanity check\\n\\n    _;\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Simple deployment information store inside contract storage.\\n\\ncontract DeploymentInfo {\\n\\n  uint private deployed_on;\\n\\n\\n\\n  function DeploymentInfo() public {\\n\\n    deployed_on = block.number;\\n\\n  }\\n\\n\\n\\n\\n\\n  function getDeploymentBlock() public view returns (uint) {\\n\\n    return deployed_on;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\\n\\n *\\n\\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\\n\\n *\\n\\n * Heavily modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n\\n\\n/// @dev Tranche based pricing.\\n\\n///      Implementing \\\"first price\\\" tranches, meaning, that if a buyer's order is\\n\\n///      covering more than one tranche, the price of the lowest tranche will apply\\n\\n///      to the whole order.\\n\\ncontract TokenTranchePricing {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /**\\n\\n   * Define pricing schedule using tranches.\\n\\n   */\\n\\n  struct Tranche {\\n\\n      // Amount in tokens when this tranche becomes inactive\\n\\n      uint amount;\\n\\n      // Timestamp interval [start, end)\\n\\n      // Starting timestamp (included in the interval)\\n\\n      uint start;\\n\\n      // Ending timestamp (excluded from the interval)\\n\\n      uint end;\\n\\n      // How many tokens per wei you will get while this tranche is active\\n\\n      uint price;\\n\\n  }\\n\\n  // We define offsets and size for the deserialization of ordered tuples in raw arrays\\n\\n  uint private constant amount_offset = 0;\\n\\n  uint private constant start_offset = 1;\\n\\n  uint private constant end_offset = 2;\\n\\n  uint private constant price_offset = 3;\\n\\n  uint private constant tranche_size = 4;\\n\\n\\n\\n  Tranche[] public tranches;\\n\\n\\n\\n  function getTranchesLength() public view returns (uint) {\\n\\n    return tranches.length;\\n\\n  }\\n\\n  \\n\\n  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\\n\\n  //\\n\\n  /// @dev Construction, creating a list of tranches\\n\\n  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\\n\\n  //\\n\\n  function configurationTokenTranchePricing(uint[] init_tranches) internal {\\n\\n    // Need to have tuples, length check\\n\\n    require(init_tranches.length % tranche_size == 0);\\n\\n    // A tranche with amount zero can never be selected and is therefore useless.\\n\\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\\n\\n    require(init_tranches[amount_offset] > 0);\\n\\n\\n\\n    uint input_tranches_length = init_tranches.length.div(tranche_size);\\n\\n    Tranche memory last_tranche;\\n\\n    for (uint i = 0; i < input_tranches_length; i++) {\\n\\n      uint tranche_offset = i.mul(tranche_size);\\n\\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\\n\\n      uint start = init_tranches[tranche_offset.add(start_offset)];\\n\\n      uint end = init_tranches[tranche_offset.add(end_offset)];\\n\\n      uint price = init_tranches[tranche_offset.add(price_offset)];\\n\\n      // No invalid steps\\n\\n      require(start < end && now < end);\\n\\n      // Bail out when entering unnecessary tranches\\n\\n      // This is preferably checked before deploying contract into any blockchain.\\n\\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\\n\\n              (end > last_tranche.end && amount >= last_tranche.amount));\\n\\n\\n\\n      last_tranche = Tranche(amount, start, end, price);\\n\\n      tranches.push(last_tranche);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return Returns the struct representing the current tranche\\n\\n  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\\n\\n    for (uint i = 0; i < tranches.length; i++) {\\n\\n      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\\n\\n        return tranches[i];\\n\\n      }\\n\\n    }\\n\\n    // No tranche is currently active\\n\\n    revert();\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current price. May revert if there is no tranche currently active.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return The current price\\n\\n  function getCurrentPrice(uint tokensSold) internal view returns (uint result) {\\n\\n    return getCurrentTranche(tokensSold).price;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\\n\\ncontract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\\n\\n  uint public sellable_tokens;\\n\\n  uint public initial_tokens;\\n\\n  uint public milieurs_per_eth; \\n\\n\\n\\n  /*\\n\\n   * The constructor for the crowdsale was removed given it didn't receive any arguments nor had any body.\\n\\n   *\\n\\n   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\\n\\n   * \\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\\n\\n   */\\n\\n\\n\\n  function configurationCrowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply, uint8 token_decimals, uint max_tokens_to_sell) public onlyOwner {\\n\\n\\n\\n      \\n\\n      initial_tokens = multisig_supply;  \\n\\n      token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\\n\\n      // Necessary if assignTokens mints\\n\\n      token.setMintAgent(address(this), true);\\n\\n      // Necessary if finalize is overriden to release the tokens for public trading.\\n\\n      token.setReleaseAgent(address(this));\\n\\n      // Necessary for the execution of buy function and of the subsequent CrowdsaleToken's transfer function. \\n\\n      token.setTransferAgent(address(this), true);\\n\\n      // Crowdsale mints to himself the initial supply\\n\\n      token.mint(address(this), crowdsale_supply);\\n\\n\\n\\n      sellable_tokens = max_tokens_to_sell;\\n\\n\\n\\n      // Configuration functionality for GenericCrowdsale.\\n\\n      configurationGenericCrowdsale(team_multisig, start, end);\\n\\n\\n\\n      // Configuration functionality for TokenTranchePricing.\\n\\n      configurationTokenTranchePricing(init_tranches);\\n\\n  }\\n\\n\\n\\n  //token assignation\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal {\\n\\n    token.transfer(receiver, tokenAmount);\\n\\n  }\\n\\n\\n\\n  //token amount calculation\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\\n\\n    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\\n\\n    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\\n\\n    weiAllowed = maxWeiAllowed.min256(weiAmount);\\n\\n\\n\\n    require(token.balanceOf(receiver).add(weiAllowed) >= 100);\\n\\n    \\n\\n    if (weiAmount < maxWeiAllowed) {\\n\\n      //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\\n\\n      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\\n\\n    }\\n\\n    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\\n\\n    else {\\n\\n      tokenAmount = sellable_tokens.sub(tokensSold);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  //TODO: implement to control funding state criterion\\n\\n  function isCrowdsaleFull() internal view returns (bool full) {\\n\\n    return tokensSold >= sellable_tokens;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    //Tokens sold + bounties represent 75% of the total, the other 25% goes ti the multisig to the partners and to regulate market \\n\\n    uint sold = tokensSold.add(  initial_tokens);\\n\\n    uint toShare = sold.mul(25).div(75).mul(10**uint(token.decimals()));\\n\\n    token.setMintAgent(address(this), true);\\n\\n    token.mint(multisigWallet, toShare);\\n\\n    token.setMintAgent(address(this), false);\\n\\n    token.releaseTokenTransfer();\\n\\n    token.burn(token.balanceOf(address(this)));\\n\\n    super.finalize();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * This function decides who handles lost tokens.\\n\\n   * Do note that this function is NOT meant to be used in a token refund mecahnism.\\n\\n   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address) {\\n\\n    return owner;\\n\\n\\n\\n  }\\n\\n\\n\\n  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\\n\\n  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\\n\\n      require(startingTime > now && startingTime < endsAt);\\n\\n      startsAt = startingTime;\\n\\n  }\\n\\n\\n\\n  function setEndingTime(uint endingTime) public onlyOwner notFinished {\\n\\n       require(endingTime > now && endingTime > startsAt);\\n\\n       endsAt = endingTime;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n  function updateEursPerEth (uint milieurs_amount) public onlyOwner {\\n\\n    require(milieurs_amount >= 100);\\n\\n    milieurs_per_eth = milieurs_amount;\\n\\n  }\\n\\n}\",\"keccak256\":\"0x77a4b14b5eff26dba56f060a11f4a2e7550d057d390e14aef70e0988fe82e7db\"}},\"version\":1}"
      },
      "SafeMath": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60606040523415600e57600080fd5b603580601b6000396000f3006060604052600080fd00a165627a7a7230582033a2aa65fddefed484c8f68d81bca8acf41d64c54fa9e6b4e73a8ab39df9d2880029",
            "opcodes": "PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH1 0xE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x35 DUP1 PUSH1 0x1B PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 CALLER LOG2 0xaa PUSH6 0xFDDEFED484C8 0xf6 DUP14 DUP2 0xbc 0xa8 0xac DELEGATECALL 0x1d PUSH5 0xC54FA9E6B4 0xe7 GASPRICE DUP11 0xb3 SWAP14 0xf9 0xd2 DUP9 STOP 0x29 ",
            "sourceMap": "2377:1073:0:-;;;;;;;;;;;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.19+commit.c4cbbb05\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"SafeMath\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Envisioned in FirstBlood ICO contract.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control \\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\". \\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  /** \\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  function Ownable() internal {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner. \\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param newOwner The address to transfer ownership to. \\n\\n   */\\n\\n  function transferOwnership(address newOwner) onlyOwner public {\\n\\n    require(newOwner != address(0));\\n\\n    owner = newOwner;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract contract that allows children to implement an\\n\\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\\n\\n *\\n\\n */\\n\\ncontract Haltable is Ownable {\\n\\n  bool public halted;\\n\\n\\n\\n  event Halted(bool halted);\\n\\n\\n\\n  modifier stopInEmergency {\\n\\n    require(!halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier onlyInEmergency {\\n\\n    require(halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  // called by the owner on emergency, triggers stopped state\\n\\n  function halt() external onlyOwner {\\n\\n    halted = true;\\n\\n    Halted(true);\\n\\n  }\\n\\n\\n\\n  // called by the owner on end of emergency, returns to normal state\\n\\n  function unhalt() external onlyOwner onlyInEmergency {\\n\\n    halted = false;\\n\\n    Halted(false);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * Math operations with safety checks\\n\\n */\\n\\nlibrary SafeMath {\\n\\n  function mul(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a * b;\\n\\n    assert(a == 0 || c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function div(uint a, uint b) internal pure returns (uint) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    uint c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  function add(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n\\n\\n  function max256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Interface for the standard token.\\n\\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n\\n */\\n\\ncontract EIP20Token {\\n\\n\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\\n\\n  function approve(address spender, uint256 value) public returns (bool success);\\n\\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\n\\n  /**\\n\\n  ** Optional functions\\n\\n  *\\n\\n  function name() public view returns (string name);\\n\\n  function symbol() public view returns (string symbol);\\n\\n  function decimals() public view returns (uint8 decimals);\\n\\n  *\\n\\n  **/\\n\\n\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Interface for burning tokens\\n\\ncontract Burnable {\\n\\n  // @dev Destroys tokens for an account\\n\\n  // @param account Account whose tokens are destroyed\\n\\n  // @param value Amount of tokens to destroy\\n\\n  function burnTokens(address account, uint value) internal;\\n\\n  event Burned(address account, uint value);\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * Internal interface for the minting of tokens.\\n\\n */\\n\\ncontract Mintable {\\n\\n\\n\\n  /**\\n\\n   * @dev Mints tokens for an account\\n\\n   * This function should the Minted event.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal;\\n\\n\\n\\n  /** Token supply got increased and a new owner received these tokens */\\n\\n  event Minted(address receiver, uint amount);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Standard token\\n\\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\\n\\n */\\n\\ncontract StandardToken is EIP20Token, Burnable, Mintable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  uint private total_supply;\\n\\n  mapping(address => uint) private balances;\\n\\n  mapping(address => mapping (address => uint)) private allowed;\\n\\n\\n\\n\\n\\n  function totalSupply() public view returns (uint) {\\n\\n    return total_supply;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev transfer token for a specified address\\n\\n   * @param to The address to transfer to.\\n\\n   * @param value The amount to be transferred.\\n\\n   */\\n\\n  function transfer(address to, uint value) public returns (bool success) {\\n\\n    balances[msg.sender] = balances[msg.sender].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    Transfer(msg.sender, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Gets the balance of the specified address.\\n\\n   * @param account The address whose balance is to be queried.\\n\\n   * @return An uint representing the amount owned by the passed address.\\n\\n   */\\n\\n  function balanceOf(address account) public view returns (uint balance) {\\n\\n    return balances[account];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param from address The address which you want to send tokens from\\n\\n   * @param to address The address which you want to transfer to\\n\\n   * @param value uint the amout of tokens to be transfered\\n\\n   */\\n\\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\\n\\n    uint allowance = allowed[from][msg.sender];\\n\\n\\n\\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\\n\\n    // require(value <= allowance);\\n\\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\\n\\n\\n\\n    balances[from] = balances[from].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    allowed[from][msg.sender] = allowance.sub(value);\\n\\n    Transfer(from, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * @param spender The address which will spend the funds.\\n\\n   * @param value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address spender, uint value) public returns (bool success) {\\n\\n\\n\\n    // To change the approve amount you first have to reduce the addresses'\\n\\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\\n\\n    //  already 0 to mitigate the race condition described here:\\n\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n    require (value == 0 || allowed[msg.sender][spender] == 0);\\n\\n\\n\\n    allowed[msg.sender][spender] = value;\\n\\n    Approval(msg.sender, spender, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n\\n   * @param account address The address which owns the funds.\\n\\n   * @param spender address The address which will spend the funds.\\n\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n\\n   */\\n\\n  function allowance(address account, address spender) public view returns (uint remaining) {\\n\\n    return allowed[account][spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic increment of approved spending\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   *\\n\\n   */\\n\\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\\n\\n      uint oldValue = allowed[msg.sender][spender];\\n\\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic decrement of approved spending.\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   */\\n\\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\\n\\n\\n\\n      uint oldVal = allowed[msg.sender][spender];\\n\\n\\n\\n      if (subtractedValue > oldVal) {\\n\\n          allowed[msg.sender][spender] = 0;\\n\\n      } else {\\n\\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\\n\\n      }\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\\n\\n   */\\n\\n  function burnTokens(address account, uint value) internal {\\n\\n    balances[account] = balances[account].sub(value);\\n\\n    total_supply = total_supply.sub(value);\\n\\n    Transfer(account, 0, value);\\n\\n    Burned(account, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal minting function.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal {\\n\\n    total_supply = total_supply.add(amount);\\n\\n    balances[receiver] = balances[receiver].add(amount);\\n\\n    Minted(receiver, amount);\\n\\n\\n\\n    // Beware: Address zero may be used for special transactions in a future fork.\\n\\n    // This will make the mint transaction appear in EtherScan.io\\n\\n    // We can remove this after there is a standardized minting event\\n\\n    Transfer(0, receiver, amount);\\n\\n  }\\n\\n  \\n\\n}\\n\\n\\n\\n/**\\n\\n * Define interface for releasing the token transfer after a successful crowdsale.\\n\\n */\\n\\ncontract ReleasableToken is StandardToken, Ownable {\\n\\n\\n\\n  /* The finalizer contract that allows lifting the transfer limits on this token */\\n\\n  address public releaseAgent;\\n\\n\\n\\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\\n\\n  bool public released = false;\\n\\n\\n\\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\\n\\n  mapping (address => bool) public transferAgents;\\n\\n\\n\\n  /**\\n\\n   * Set the contract that can call release and make the token transferable.\\n\\n   *\\n\\n   * Since the owner of this contract is (or should be) the crowdsale,\\n\\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\\n\\n   */\\n\\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\\n\\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\\n\\n    releaseAgent = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\\n\\n   */\\n\\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\\n\\n    transferAgents[addr] = state;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * One way function to release the tokens into the wild.\\n\\n   *\\n\\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\\n\\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    released = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Limit token transfer until the crowdsale is over.\\n\\n   */\\n\\n  modifier canTransfer(address sender) {\\n\\n    require(released || transferAgents[sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only before or after the tokens have been released */\\n\\n  modifier inReleaseState(bool releaseState) {\\n\\n    require(releaseState == released);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only by a whitelisted release agent. */\\n\\n  modifier onlyReleaseAgent() {\\n\\n    require(msg.sender == releaseAgent);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** We restrict transfer by overriding it */\\n\\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\\n\\n    // Call StandardToken.transfer()\\n\\n   return super.transfer(to, value);\\n\\n  }\\n\\n\\n\\n  /** We restrict transferFrom by overriding it */\\n\\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\\n\\n    // Call StandardToken.transferForm()\\n\\n    return super.transferFrom(from, to, value);\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * First envisioned by Golem and Lunyr projects.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Inspired by Lunyr.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n */\\n\\n\\n\\n/**\\n\\n * Upgrade agent transfers tokens to a new contract.\\n\\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\\n\\n *\\n\\n * The Upgrade agent is the interface used to implement a token\\n\\n * migration in the case of an emergency.\\n\\n * The function upgradeFrom has to implement the part of the creation\\n\\n * of new tokens on behalf of the user doing the upgrade.\\n\\n *\\n\\n * The new token can implement this interface directly, or use.\\n\\n */\\n\\ncontract UpgradeAgent {\\n\\n\\n\\n  /** This value should be the same as the original token's total supply */\\n\\n  uint public originalSupply;\\n\\n\\n\\n  /** Interface to ensure the contract is correctly configured */\\n\\n  function isUpgradeAgent() public pure returns (bool) {\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  Upgrade an account\\n\\n\\n\\n  When the token contract is in the upgrade status the each user will\\n\\n  have to call `upgrade(value)` function from UpgradeableToken.\\n\\n\\n\\n  The upgrade function adjust the balance of the user and the supply\\n\\n  of the previous token and then call `upgradeFrom(value)`.\\n\\n\\n\\n  The UpgradeAgent is the responsible to create the tokens for the user\\n\\n  in the new contract.\\n\\n\\n\\n  * @param from Account to upgrade.\\n\\n  * @param value Tokens to upgrade.\\n\\n\\n\\n  */\\n\\n  function upgradeFrom(address from, uint value) public;\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\\n\\n *\\n\\n */\\n\\ncontract UpgradeableToken is EIP20Token, Burnable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\\n\\n  address public upgradeMaster;\\n\\n\\n\\n  /** The next contract where the tokens will be migrated. */\\n\\n  UpgradeAgent public upgradeAgent;\\n\\n\\n\\n  /** How many tokens we have upgraded by now. */\\n\\n  uint public totalUpgraded = 0;\\n\\n\\n\\n  /**\\n\\n   * Upgrade states.\\n\\n   *\\n\\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\\n\\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\\n\\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\\n\\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\\n\\n   *\\n\\n   */\\n\\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\\n\\n\\n\\n  /**\\n\\n   * Somebody has upgraded some of his tokens.\\n\\n   */\\n\\n  event Upgrade(address indexed from, address to, uint value);\\n\\n\\n\\n  /**\\n\\n   * New upgrade agent available.\\n\\n   */\\n\\n  event UpgradeAgentSet(address agent);\\n\\n\\n\\n  /**\\n\\n   * Do not allow construction without upgrade master set.\\n\\n   */\\n\\n  function UpgradeableToken(address master) internal {\\n\\n    setUpgradeMaster(master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow the token holder to upgrade some of their tokens to a new contract.\\n\\n   */\\n\\n  function upgrade(uint value) public {\\n\\n    UpgradeState state = getUpgradeState();\\n\\n    // Ensure it's not called in a bad state\\n\\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\\n\\n\\n\\n    // Validate input value.\\n\\n    require(value != 0);\\n\\n\\n\\n    // Upgrade agent reissues the tokens\\n\\n    upgradeAgent.upgradeFrom(msg.sender, value);\\n\\n    \\n\\n    // Take tokens out from circulation\\n\\n    burnTokens(msg.sender, value);\\n\\n    totalUpgraded = totalUpgraded.add(value);\\n\\n\\n\\n    Upgrade(msg.sender, upgradeAgent, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set an upgrade agent that handles the upgrade process\\n\\n   */\\n\\n  function setUpgradeAgent(address agent) onlyMaster external {\\n\\n    // Check whether the token is in a state that we could think of upgrading\\n\\n    require(canUpgrade());\\n\\n\\n\\n    require(agent != 0x0);\\n\\n    // Upgrade has already begun for an agent\\n\\n    require(getUpgradeState() != UpgradeState.Upgrading);\\n\\n\\n\\n    upgradeAgent = UpgradeAgent(agent);\\n\\n\\n\\n    // Bad interface\\n\\n    require(upgradeAgent.isUpgradeAgent());\\n\\n    // Make sure that token supplies match in source and target\\n\\n    require(upgradeAgent.originalSupply() == totalSupply());\\n\\n\\n\\n    UpgradeAgentSet(upgradeAgent);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Get the state of the token upgrade.\\n\\n   */\\n\\n  function getUpgradeState() public view returns(UpgradeState) {\\n\\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\\n\\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\\n\\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\\n\\n    else return UpgradeState.Upgrading;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Change the upgrade master.\\n\\n   *\\n\\n   * This allows us to set a new owner for the upgrade mechanism.\\n\\n   */\\n\\n  function changeUpgradeMaster(address new_master) onlyMaster public {\\n\\n    setUpgradeMaster(new_master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal upgrade master setter.\\n\\n   */\\n\\n  function setUpgradeMaster(address new_master) private {\\n\\n    require(new_master != 0x0);\\n\\n    upgradeMaster = new_master;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Child contract can override to provide the condition in which the upgrade can begin.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n     return true;\\n\\n  }\\n\\n\\n\\n\\n\\n  modifier onlyMaster() {\\n\\n    require(msg.sender == upgradeMaster);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\\n\\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\\n\\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\\n\\ncontract LostAndFoundToken {\\n\\n  /**\\n\\n   * @return Address of the account that handles movements.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address);\\n\\n\\n\\n  /**\\n\\n   * @param agent Address that will be able to move tokens with transferFrom\\n\\n   * @param tokens Amount of tokens approved for transfer\\n\\n   * @param token_contract Contract of the token\\n\\n   */\\n\\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\\n\\n    require(msg.sender == getLostAndFoundMaster());\\n\\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\\n\\n    //  getting them stuck in another address by accident.\\n\\n    token_contract.approve(agent, tokens);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * A public interface to increase the supply of a token.\\n\\n *\\n\\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\\n\\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\\n\\n *\\n\\n */\\n\\ncontract MintableToken is Mintable, Ownable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n  /** List of agents that are allowed to create new tokens */\\n\\n  mapping (address => bool) public mintAgents;\\n\\n\\n\\n  event MintingAgentChanged(address addr, bool state);\\n\\n\\n\\n\\n\\n  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\\n\\n    require(multisig != address(0));\\n\\n    // Cannot create a token without supply and no minting\\n\\n    require(mintable || initialSupply != 0);\\n\\n    // Create initially all balance on the team multisig\\n\\n    if (initialSupply > 0)\\n\\n      mintInternal(multisig, initialSupply);\\n\\n    // No more new supply allowed after the token creation\\n\\n    mintingFinished = !mintable;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Create new tokens and allocate them to an address.\\n\\n   *\\n\\n   * Only callable by a mint agent (e.g. crowdsale contract).\\n\\n   */\\n\\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\\n\\n    mintInternal(receiver, amount);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a crowdsale contract to mint new tokens.\\n\\n   */\\n\\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\\n\\n    mintAgents[addr] = state;\\n\\n    MintingAgentChanged(addr, state);\\n\\n  }\\n\\n\\n\\n  modifier onlyMintAgent() {\\n\\n    // Only mint agents are allowed to mint new tokens\\n\\n    require(mintAgents[msg.sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Make sure we are not done yet. */\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * A crowdsale token.\\n\\n *\\n\\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\\n\\n *\\n\\n * - The token transfer() is disabled until the crowdsale is over\\n\\n * - The token contract gives an opt-in upgrade path to a new contract\\n\\n * - The same token can be part of several crowdsales through the approve() mechanism\\n\\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\\n\\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\\n\\n *\\n\\n */\\n\\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\\n\\n\\n\\n  string public name = \\\"TokenHome\\\";\\n\\n\\n\\n  string public symbol = \\\"TH\\\";\\n\\n\\n\\n  uint8 public decimals;\\n\\n\\n\\n  address public lost_and_found_master;\\n\\n\\n\\n  /**\\n\\n   * Construct the token.\\n\\n   *\\n\\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\\n\\n   *\\n\\n   * @param initial_supply How many tokens we start with.\\n\\n   * @param token_decimals Number of decimal places.\\n\\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\\n\\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\\n\\n   */\\n\\n  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\\n\\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\\n\\n    require(token_retriever != address(0));\\n\\n    decimals = token_decimals;\\n\\n    lost_and_found_master = token_retriever;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * When token is released to be transferable, prohibit new token creation.\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    mintingFinished = true;\\n\\n    super.releaseTokenTransfer();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n    return released && super.canUpgrade();\\n\\n  }\\n\\n\\n\\n  function burn(uint value) public {\\n\\n    burnTokens(msg.sender, value);\\n\\n  }\\n\\n\\n\\n  function getLostAndFoundMaster() internal view returns(address) {\\n\\n    return lost_and_found_master;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract base contract for token sales.\\n\\n *\\n\\n * Handles\\n\\n * - start and end dates\\n\\n * - accepting investments\\n\\n * - various statistics during the crowdfund\\n\\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\\n\\n *\\n\\n */\\n\\ncontract GenericCrowdsale is Haltable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /* The token we are selling */\\n\\n  CrowdsaleToken public token;\\n\\n\\n\\n  /* ether will be transferred to this address */\\n\\n  address public multisigWallet;\\n\\n\\n\\n  /* the starting timestamp of the crowdsale */\\n\\n  uint public startsAt;\\n\\n\\n\\n  /* the ending timestamp of the crowdsale */\\n\\n  uint public endsAt;\\n\\n\\n\\n  /* the number of tokens already sold through this contract*/\\n\\n  uint public tokensSold = 0;\\n\\n\\n\\n  /* How many wei of funding we have raised */\\n\\n  uint public weiRaised = 0;\\n\\n\\n\\n  /* How many distinct addresses have invested */\\n\\n  uint public investorCount = 0;\\n\\n\\n\\n  /* Has this crowdsale been finalized */\\n\\n  bool public finalized = false;\\n\\n\\n\\n  /* Do we need to have a unique contributor id for each customer */\\n\\n  bool public requireCustomerId = false;\\n\\n\\n\\n  /* Has this crowdsale been configured */\\n\\n  bool public configured = false;\\n\\n\\n\\n  /**\\n\\n   * Do we verify that contributor has been cleared on the server side (accredited investors only).\\n\\n   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\\n\\n   */\\n\\n  bool public requiredSignedAddress = false;\\n\\n\\n\\n  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\\n\\n  address public signerAddress;\\n\\n\\n\\n  /** How many ETH each address has invested in this crowdsale */\\n\\n  mapping (address => uint) public investedAmountOf;\\n\\n\\n\\n  /** How many tokens this crowdsale has credited for each investor address */\\n\\n  mapping (address => uint) public tokenAmountOf;\\n\\n\\n\\n  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\\n\\n  mapping (address => bool) public earlyParticipantWhitelist;\\n\\n\\n\\n  /** State machine\\n\\n   *\\n\\n   * - PendingConfiguration: Crowdsale not yet configured\\n\\n   * - Prefunding: We have not reached the starting timestamp yet\\n\\n   * - Funding: Active crowdsale\\n\\n   * - Success: Crowdsale ended\\n\\n   * - Finalized: The finalize function has been called and successfully executed\\n\\n   */\\n\\n  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\\n\\n\\n\\n\\n\\n  // A new investment was made\\n\\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\\n\\n\\n\\n  // The rules about what kind of investments we accept were changed\\n\\n  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\\n\\n\\n\\n  // Address early participation whitelist status changed\\n\\n  event Whitelisted(address addr, bool status);\\n\\n\\n\\n  // Crowdsale's finalize function has been called\\n\\n  event Finalized();\\n\\n\\n\\n  /*\\n\\n   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   *\\n\\n   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\\n\\n   */\\n\\n  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\\n\\n    setMultisig(team_multisig);\\n\\n\\n\\n    // Don't mess the dates\\n\\n    require(start != 0 && end != 0);\\n\\n    require(now < start && start < end);\\n\\n    startsAt = start;\\n\\n    endsAt = end;\\n\\n    configured = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Default fallback behaviour is to call buy.\\n\\n   * Ideally, no contract calls this crowdsale without supporting ERC20.\\n\\n   * However, some sort of refunding function may be desired to cover such situations.\\n\\n   */\\n\\n  function() payable public {\\n\\n    buy();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Make an investment.\\n\\n   *\\n\\n   * The crowdsale must be running for one to invest.\\n\\n   * We must have not pressed the emergency brake.\\n\\n   *\\n\\n   * @param receiver The Ethereum address who receives the tokens\\n\\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\\n\\n   *\\n\\n   */\\n\\n  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\\n\\n    // Determine if it's a good time to accept investment from this participant\\n\\n    if (getState() == State.PreFunding) {\\n\\n      // Are we whitelisted for early deposit\\n\\n      require(earlyParticipantWhitelist[msg.sender]);\\n\\n    }\\n\\n\\n\\n    uint weiAmount;\\n\\n    uint tokenAmount;\\n\\n    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\\n\\n    // Sanity check against bad implementation.\\n\\n    assert(weiAmount <= msg.value);\\n\\n    \\n\\n    // Dust transaction if no tokens can be given\\n\\n    require(tokenAmount != 0);\\n\\n\\n\\n    if (investedAmountOf[receiver] == 0) {\\n\\n      // A new investor\\n\\n      investorCount++;\\n\\n    }\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\\n\\n\\n\\n    // Pocket the money\\n\\n    multisigWallet.transfer(weiAmount);\\n\\n\\n\\n    // Return excess of money\\n\\n    returnExcedent(msg.value.sub(weiAmount), msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Preallocate tokens for the early investors.\\n\\n   *\\n\\n   * Preallocated tokens have been sold before the actual crowdsale opens.\\n\\n   * This function mints the tokens and moves the crowdsale needle.\\n\\n   *\\n\\n   * No money is exchanged, as the crowdsale team already have received the payment.\\n\\n   *\\n\\n   * @param receiver Account that receives the tokens.\\n\\n   * @param fullTokens tokens as full tokens - decimal places are added internally.\\n\\n   * @param weiPrice Price of a single indivisible token in wei.\\n\\n   *\\n\\n   */\\n\\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\\n\\n    require(receiver != address(0));\\n\\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\\n\\n    require(tokenAmount != 0);\\n\\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Private function to update accounting in the crowdsale.\\n\\n   */\\n\\n  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\\n\\n    // Update investor\\n\\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\\n\\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\\n\\n\\n\\n    // Update totals\\n\\n    weiRaised = weiRaised.add(weiAmount);\\n\\n    tokensSold = tokensSold.add(tokenAmount);\\n\\n\\n\\n    assignTokens(receiver, tokenAmount);\\n\\n    // Tell us that the investment was completed successfully\\n\\n    Invested(receiver, weiAmount, tokenAmount, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\\n\\n    bytes32 hash = sha256(receiver);\\n\\n    require(ecrecover(hash, v, r, s) == signerAddress);\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Buys tokens on behalf of an address.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the receiver address.\\n\\n   */\\n\\n  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\\n\\n    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\\n\\n    investInternal(receiver, 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\\n\\n    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithCustomerId(uint128 customerId) public payable {\\n\\n    buyOnBehalfWithCustomerId(msg.sender, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * The basic entry point to participate in the crowdsale process.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the sender address.\\n\\n   */\\n\\n  function buy() public payable {\\n\\n    buyOnBehalf(msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    finalized = true;\\n\\n    Finalized();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy do we need to have server-side customer ids for the investments.\\n\\n   *\\n\\n   */\\n\\n  function setRequireCustomerId(bool value) public onlyOwner {\\n\\n    requireCustomerId = value;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy if all investors must be cleared on the server side first.\\n\\n   *\\n\\n   * This is e.g. for the accredited investor clearing.\\n\\n   *\\n\\n   */\\n\\n  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\\n\\n    requiredSignedAddress = value;\\n\\n    signerAddress = signer;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow addresses to do early participation.\\n\\n   */\\n\\n  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\\n\\n    earlyParticipantWhitelist[addr] = status;\\n\\n    Whitelisted(addr, status);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal setter for the multisig wallet\\n\\n   */\\n\\n  function setMultisig(address addr) internal {\\n\\n    require(addr != 0);\\n\\n    multisigWallet = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Crowdfund state machine management.\\n\\n   *\\n\\n   * This function has the timed transition builtin.\\n\\n   * So there is no chance of the variable being stale.\\n\\n   */\\n\\n  function getState() public view returns (State) {\\n\\n    if (finalized) return State.Finalized;\\n\\n    else if (!configured) return State.PendingConfiguration;\\n\\n    else if (now < startsAt) return State.PreFunding;\\n\\n    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\\n\\n    else return State.Success;\\n\\n  }\\n\\n\\n\\n  /** Internal functions that exist to provide inversion of control should they be overriden */\\n\\n\\n\\n  /** Interface for the concrete instance to interact with the token contract in a customizable way */\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal;\\n\\n\\n\\n  /**\\n\\n   *  Determine if the goal was already reached in the current crowdsale\\n\\n   */\\n\\n  function isCrowdsaleFull() internal view returns (bool full);\\n\\n\\n\\n  /**\\n\\n   * Returns any excess wei received\\n\\n   * \\n\\n   * This function can be overriden to provide a different refunding method.\\n\\n   */\\n\\n  function returnExcedent(uint excedent, address receiver) internal {\\n\\n    if (excedent > 0) {\\n\\n      receiver.transfer(excedent);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /** \\n\\n   *  Calculate the amount of tokens that corresponds to the received amount.\\n\\n   *  The wei amount is returned too in case not all of it can be invested.\\n\\n   *\\n\\n   *  Note: When there's an excedent due to rounding error, it should be returned to allow refunding.\\n\\n   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\\n\\n   *  The workaround is good enough for most use cases, hence the simplified function signature.\\n\\n   *  @return weiAllowed The amount of wei accepted in this transaction.\\n\\n   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\\n\\n   */\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\\n\\n\\n\\n  //\\n\\n  // Modifiers\\n\\n  //\\n\\n\\n\\n  modifier inState(State state) {\\n\\n    require(getState() == state);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier unsignedBuyAllowed() {\\n\\n    require(!requiredSignedAddress);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\\n\\n  modifier notFinished() {\\n\\n    State current_state = getState();\\n\\n    require(current_state == State.PreFunding || current_state == State.Funding);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier validCustomerId(uint128 customerId) {\\n\\n    require(customerId != 0);  // UUIDv4 sanity check\\n\\n    _;\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Simple deployment information store inside contract storage.\\n\\ncontract DeploymentInfo {\\n\\n  uint private deployed_on;\\n\\n\\n\\n  function DeploymentInfo() public {\\n\\n    deployed_on = block.number;\\n\\n  }\\n\\n\\n\\n\\n\\n  function getDeploymentBlock() public view returns (uint) {\\n\\n    return deployed_on;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\\n\\n *\\n\\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\\n\\n *\\n\\n * Heavily modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n\\n\\n/// @dev Tranche based pricing.\\n\\n///      Implementing \\\"first price\\\" tranches, meaning, that if a buyer's order is\\n\\n///      covering more than one tranche, the price of the lowest tranche will apply\\n\\n///      to the whole order.\\n\\ncontract TokenTranchePricing {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /**\\n\\n   * Define pricing schedule using tranches.\\n\\n   */\\n\\n  struct Tranche {\\n\\n      // Amount in tokens when this tranche becomes inactive\\n\\n      uint amount;\\n\\n      // Timestamp interval [start, end)\\n\\n      // Starting timestamp (included in the interval)\\n\\n      uint start;\\n\\n      // Ending timestamp (excluded from the interval)\\n\\n      uint end;\\n\\n      // How many tokens per wei you will get while this tranche is active\\n\\n      uint price;\\n\\n  }\\n\\n  // We define offsets and size for the deserialization of ordered tuples in raw arrays\\n\\n  uint private constant amount_offset = 0;\\n\\n  uint private constant start_offset = 1;\\n\\n  uint private constant end_offset = 2;\\n\\n  uint private constant price_offset = 3;\\n\\n  uint private constant tranche_size = 4;\\n\\n\\n\\n  Tranche[] public tranches;\\n\\n\\n\\n  function getTranchesLength() public view returns (uint) {\\n\\n    return tranches.length;\\n\\n  }\\n\\n  \\n\\n  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\\n\\n  //\\n\\n  /// @dev Construction, creating a list of tranches\\n\\n  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\\n\\n  //\\n\\n  function configurationTokenTranchePricing(uint[] init_tranches) internal {\\n\\n    // Need to have tuples, length check\\n\\n    require(init_tranches.length % tranche_size == 0);\\n\\n    // A tranche with amount zero can never be selected and is therefore useless.\\n\\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\\n\\n    require(init_tranches[amount_offset] > 0);\\n\\n\\n\\n    uint input_tranches_length = init_tranches.length.div(tranche_size);\\n\\n    Tranche memory last_tranche;\\n\\n    for (uint i = 0; i < input_tranches_length; i++) {\\n\\n      uint tranche_offset = i.mul(tranche_size);\\n\\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\\n\\n      uint start = init_tranches[tranche_offset.add(start_offset)];\\n\\n      uint end = init_tranches[tranche_offset.add(end_offset)];\\n\\n      uint price = init_tranches[tranche_offset.add(price_offset)];\\n\\n      // No invalid steps\\n\\n      require(start < end && now < end);\\n\\n      // Bail out when entering unnecessary tranches\\n\\n      // This is preferably checked before deploying contract into any blockchain.\\n\\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\\n\\n              (end > last_tranche.end && amount >= last_tranche.amount));\\n\\n\\n\\n      last_tranche = Tranche(amount, start, end, price);\\n\\n      tranches.push(last_tranche);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return Returns the struct representing the current tranche\\n\\n  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\\n\\n    for (uint i = 0; i < tranches.length; i++) {\\n\\n      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\\n\\n        return tranches[i];\\n\\n      }\\n\\n    }\\n\\n    // No tranche is currently active\\n\\n    revert();\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current price. May revert if there is no tranche currently active.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return The current price\\n\\n  function getCurrentPrice(uint tokensSold) internal view returns (uint result) {\\n\\n    return getCurrentTranche(tokensSold).price;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\\n\\ncontract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\\n\\n  uint public sellable_tokens;\\n\\n  uint public initial_tokens;\\n\\n  uint public milieurs_per_eth; \\n\\n\\n\\n  /*\\n\\n   * The constructor for the crowdsale was removed given it didn't receive any arguments nor had any body.\\n\\n   *\\n\\n   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\\n\\n   * \\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\\n\\n   */\\n\\n\\n\\n  function configurationCrowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply, uint8 token_decimals, uint max_tokens_to_sell) public onlyOwner {\\n\\n\\n\\n      \\n\\n      initial_tokens = multisig_supply;  \\n\\n      token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\\n\\n      // Necessary if assignTokens mints\\n\\n      token.setMintAgent(address(this), true);\\n\\n      // Necessary if finalize is overriden to release the tokens for public trading.\\n\\n      token.setReleaseAgent(address(this));\\n\\n      // Necessary for the execution of buy function and of the subsequent CrowdsaleToken's transfer function. \\n\\n      token.setTransferAgent(address(this), true);\\n\\n      // Crowdsale mints to himself the initial supply\\n\\n      token.mint(address(this), crowdsale_supply);\\n\\n\\n\\n      sellable_tokens = max_tokens_to_sell;\\n\\n\\n\\n      // Configuration functionality for GenericCrowdsale.\\n\\n      configurationGenericCrowdsale(team_multisig, start, end);\\n\\n\\n\\n      // Configuration functionality for TokenTranchePricing.\\n\\n      configurationTokenTranchePricing(init_tranches);\\n\\n  }\\n\\n\\n\\n  //token assignation\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal {\\n\\n    token.transfer(receiver, tokenAmount);\\n\\n  }\\n\\n\\n\\n  //token amount calculation\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\\n\\n    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\\n\\n    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\\n\\n    weiAllowed = maxWeiAllowed.min256(weiAmount);\\n\\n\\n\\n    require(token.balanceOf(receiver).add(weiAllowed) >= 100);\\n\\n    \\n\\n    if (weiAmount < maxWeiAllowed) {\\n\\n      //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\\n\\n      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\\n\\n    }\\n\\n    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\\n\\n    else {\\n\\n      tokenAmount = sellable_tokens.sub(tokensSold);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  //TODO: implement to control funding state criterion\\n\\n  function isCrowdsaleFull() internal view returns (bool full) {\\n\\n    return tokensSold >= sellable_tokens;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    //Tokens sold + bounties represent 75% of the total, the other 25% goes ti the multisig to the partners and to regulate market \\n\\n    uint sold = tokensSold.add(  initial_tokens);\\n\\n    uint toShare = sold.mul(25).div(75).mul(10**uint(token.decimals()));\\n\\n    token.setMintAgent(address(this), true);\\n\\n    token.mint(multisigWallet, toShare);\\n\\n    token.setMintAgent(address(this), false);\\n\\n    token.releaseTokenTransfer();\\n\\n    token.burn(token.balanceOf(address(this)));\\n\\n    super.finalize();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * This function decides who handles lost tokens.\\n\\n   * Do note that this function is NOT meant to be used in a token refund mecahnism.\\n\\n   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address) {\\n\\n    return owner;\\n\\n\\n\\n  }\\n\\n\\n\\n  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\\n\\n  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\\n\\n      require(startingTime > now && startingTime < endsAt);\\n\\n      startsAt = startingTime;\\n\\n  }\\n\\n\\n\\n  function setEndingTime(uint endingTime) public onlyOwner notFinished {\\n\\n       require(endingTime > now && endingTime > startsAt);\\n\\n       endsAt = endingTime;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n  function updateEursPerEth (uint milieurs_amount) public onlyOwner {\\n\\n    require(milieurs_amount >= 100);\\n\\n    milieurs_per_eth = milieurs_amount;\\n\\n  }\\n\\n}\",\"keccak256\":\"0x77a4b14b5eff26dba56f060a11f4a2e7550d057d390e14aef70e0988fe82e7db\"}},\"version\":1}"
      },
      "StandardToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b61064c8061001e6000396000f30060606040526004361061008d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461009257806318160ddd146100c857806323b872dd146100ed57806370a0823114610115578063a9059cbb14610134578063ac3cb72c14610156578063dd62ed3e14610178578063e2301d021461019d575b600080fd5b341561009d57600080fd5b6100b4600160a060020a03600435166024356101bf565b604051901515815260200160405180910390f35b34156100d357600080fd5b6100db610265565b60405190815260200160405180910390f35b34156100f857600080fd5b6100b4600160a060020a036004358116906024351660443561026b565b341561012057600080fd5b6100db600160a060020a036004351661037b565b341561013f57600080fd5b6100b4600160a060020a0360043516602435610396565b341561016157600080fd5b6100b4600160a060020a0360043516602435610455565b341561018357600080fd5b6100db600160a060020a03600435811690602435166104fa565b34156101a857600080fd5b6100b4600160a060020a0360043516602435610525565b60008115806101f15750600160a060020a03338116600090815260026020908152604080832093871683529290522054155b15156101fc57600080fd5b600160a060020a03338116600081815260026020908152604080832094881680845294909152908190208590557f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9259085905190815260200160405180910390a350600192915050565b60005490565b600160a060020a0380841660008181526002602090815260408083203390951683529381528382205492825260019052918220546102af908463ffffffff6105f816565b600160a060020a0380871660009081526001602052604080822093909355908616815220546102e4908463ffffffff61060a16565b600160a060020a03851660009081526001602052604090205561030d818463ffffffff6105f816565b600160a060020a03808716600081815260026020908152604080832033861684529091529081902093909355908616917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9086905190815260200160405180910390a3506001949350505050565b600160a060020a031660009081526001602052604090205490565b600160a060020a0333166000908152600160205260408120546103bf908363ffffffff6105f816565b600160a060020a0333811660009081526001602052604080822093909355908516815220546103f4908363ffffffff61060a16565b600160a060020a0380851660008181526001602052604090819020939093559133909116907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9085905190815260200160405180910390a350600192915050565b600160a060020a03338116600090815260026020908152604080832093861683529290529081205461048d818463ffffffff61060a16565b600160a060020a033381166000818152600260209081526040808320948a168084529490915290819020849055919290917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591905190815260200160405180910390a35060019392505050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600160a060020a0333811660009081526002602090815260408083209386168352929052908120548083111561058257600160a060020a033381166000908152600260209081526040808320938816835292905290812055610592565b61048d818463ffffffff6105f816565b600160a060020a0333811660008181526002602090815260408083209489168084529490915290819020547f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925915190815260200160405180910390a35060019392505050565b60008282111561060457fe5b50900390565b60008282018381101561061957fe5b93925050505600a165627a7a72305820d61529e60390941991c5ecdac14ed648efa13771bd6599922762deb886c4d0730029",
            "opcodes": "PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x64C DUP1 PUSH2 0x1E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x8D JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x95EA7B3 DUP2 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xC8 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xED JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x115 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x134 JUMPI DUP1 PUSH4 0xAC3CB72C EQ PUSH2 0x156 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x178 JUMPI DUP1 PUSH4 0xE2301D02 EQ PUSH2 0x19D JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH2 0x9D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x1BF JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 ISZERO ISZERO DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0xD3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDB PUSH2 0x265 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH2 0xF8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x26B JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x120 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x37B JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x396 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x455 JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x183 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xDB PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x4FA JUMP JUMPDEST CALLVALUE ISZERO PUSH2 0x1A8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xB4 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x525 JUMP JUMPDEST PUSH1 0x0 DUP2 ISZERO DUP1 PUSH2 0x1F1 JUMPI POP PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP8 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE KECCAK256 SLOAD ISZERO JUMPDEST ISZERO ISZERO PUSH2 0x1FC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP9 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER SWAP1 SWAP6 AND DUP4 MSTORE SWAP4 DUP2 MSTORE DUP4 DUP3 KECCAK256 SLOAD SWAP3 DUP3 MSTORE PUSH1 0x1 SWAP1 MSTORE SWAP2 DUP3 KECCAK256 SLOAD PUSH2 0x2AF SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x5F8 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP8 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x2E4 SWAP1 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x60A AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE PUSH2 0x30D DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x5F8 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP8 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP7 AND SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP7 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD PUSH2 0x3BF SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x5F8 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x3F4 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x60A AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x1 PUSH1 0x20 MSTORE PUSH1 0x40 SWAP1 DUP2 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP2 CALLER SWAP1 SWAP2 AND SWAP1 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP1 DUP6 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SLOAD PUSH2 0x48D DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x60A AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP11 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 DUP5 SWAP1 SSTORE SWAP2 SWAP3 SWAP1 SWAP2 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 SWAP1 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP7 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SLOAD DUP1 DUP4 GT ISZERO PUSH2 0x582 JUMPI PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 DUP9 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SSTORE PUSH2 0x592 JUMP JUMPDEST PUSH2 0x48D DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x5F8 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB CALLER DUP2 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 DUP10 AND DUP1 DUP5 MSTORE SWAP5 SWAP1 SWAP2 MSTORE SWAP1 DUP2 SWAP1 KECCAK256 SLOAD PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP2 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x604 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 ADD DUP4 DUP2 LT ISZERO PUSH2 0x619 JUMPI INVALID JUMPDEST SWAP4 SWAP3 POP POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xd6 ISZERO 0x29 0xe6 SUB SWAP1 SWAP5 NOT SWAP2 0xc5 0xec 0xda 0xc1 0x4e 0xd6 0x48 0xef LOG1 CALLDATACOPY PUSH18 0xBD6599922762DEB886C4D073002900000000 ",
            "sourceMap": "5869:5043:0:-;;;;;;;;;;;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.19+commit.c4cbbb05\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"from\",\"type\":\"address\"},{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"balance\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"to\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"addedValue\",\"type\":\"uint256\"}],\"name\":\"addApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"account\",\"type\":\"address\"},{\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"remaining\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"spender\",\"type\":\"address\"},{\"name\":\"subtractedValue\",\"type\":\"uint256\"}],\"name\":\"subApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Minted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Burned\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens than an owner allowed to a spender.\",\"params\":{\"account\":\"address The address which owns the funds.\",\"spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint specifing the amount of tokens still avaible for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\",\"params\":{\"spender\":\"The address which will spend the funds.\",\"value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"account\":\"The address whose balance is to be queried.\"},\"return\":\"An uint representing the amount owned by the passed address.\"},\"transfer(address,uint256)\":{\"details\":\"transfer token for a specified address\",\"params\":{\"to\":\"The address to transfer to.\",\"value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"from\":\"address The address which you want to send tokens from\",\"to\":\"address The address which you want to transfer to\",\"value\":\"uint the amout of tokens to be transfered\"}}},\"title\":\"Standard token\"},\"userdoc\":{\"methods\":{\"addApproval(address,uint256)\":{\"notice\":\"Atomic increment of approved spending    * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729    \"},\"subApproval(address,uint256)\":{\"notice\":\"Atomic decrement of approved spending.    * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\"}}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"StandardToken\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Envisioned in FirstBlood ICO contract.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control \\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\". \\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  /** \\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  function Ownable() internal {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner. \\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param newOwner The address to transfer ownership to. \\n\\n   */\\n\\n  function transferOwnership(address newOwner) onlyOwner public {\\n\\n    require(newOwner != address(0));\\n\\n    owner = newOwner;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract contract that allows children to implement an\\n\\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\\n\\n *\\n\\n */\\n\\ncontract Haltable is Ownable {\\n\\n  bool public halted;\\n\\n\\n\\n  event Halted(bool halted);\\n\\n\\n\\n  modifier stopInEmergency {\\n\\n    require(!halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier onlyInEmergency {\\n\\n    require(halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  // called by the owner on emergency, triggers stopped state\\n\\n  function halt() external onlyOwner {\\n\\n    halted = true;\\n\\n    Halted(true);\\n\\n  }\\n\\n\\n\\n  // called by the owner on end of emergency, returns to normal state\\n\\n  function unhalt() external onlyOwner onlyInEmergency {\\n\\n    halted = false;\\n\\n    Halted(false);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * Math operations with safety checks\\n\\n */\\n\\nlibrary SafeMath {\\n\\n  function mul(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a * b;\\n\\n    assert(a == 0 || c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function div(uint a, uint b) internal pure returns (uint) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    uint c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  function add(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n\\n\\n  function max256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Interface for the standard token.\\n\\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n\\n */\\n\\ncontract EIP20Token {\\n\\n\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\\n\\n  function approve(address spender, uint256 value) public returns (bool success);\\n\\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\n\\n  /**\\n\\n  ** Optional functions\\n\\n  *\\n\\n  function name() public view returns (string name);\\n\\n  function symbol() public view returns (string symbol);\\n\\n  function decimals() public view returns (uint8 decimals);\\n\\n  *\\n\\n  **/\\n\\n\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Interface for burning tokens\\n\\ncontract Burnable {\\n\\n  // @dev Destroys tokens for an account\\n\\n  // @param account Account whose tokens are destroyed\\n\\n  // @param value Amount of tokens to destroy\\n\\n  function burnTokens(address account, uint value) internal;\\n\\n  event Burned(address account, uint value);\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * Internal interface for the minting of tokens.\\n\\n */\\n\\ncontract Mintable {\\n\\n\\n\\n  /**\\n\\n   * @dev Mints tokens for an account\\n\\n   * This function should the Minted event.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal;\\n\\n\\n\\n  /** Token supply got increased and a new owner received these tokens */\\n\\n  event Minted(address receiver, uint amount);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Standard token\\n\\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\\n\\n */\\n\\ncontract StandardToken is EIP20Token, Burnable, Mintable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  uint private total_supply;\\n\\n  mapping(address => uint) private balances;\\n\\n  mapping(address => mapping (address => uint)) private allowed;\\n\\n\\n\\n\\n\\n  function totalSupply() public view returns (uint) {\\n\\n    return total_supply;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev transfer token for a specified address\\n\\n   * @param to The address to transfer to.\\n\\n   * @param value The amount to be transferred.\\n\\n   */\\n\\n  function transfer(address to, uint value) public returns (bool success) {\\n\\n    balances[msg.sender] = balances[msg.sender].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    Transfer(msg.sender, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Gets the balance of the specified address.\\n\\n   * @param account The address whose balance is to be queried.\\n\\n   * @return An uint representing the amount owned by the passed address.\\n\\n   */\\n\\n  function balanceOf(address account) public view returns (uint balance) {\\n\\n    return balances[account];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param from address The address which you want to send tokens from\\n\\n   * @param to address The address which you want to transfer to\\n\\n   * @param value uint the amout of tokens to be transfered\\n\\n   */\\n\\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\\n\\n    uint allowance = allowed[from][msg.sender];\\n\\n\\n\\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\\n\\n    // require(value <= allowance);\\n\\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\\n\\n\\n\\n    balances[from] = balances[from].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    allowed[from][msg.sender] = allowance.sub(value);\\n\\n    Transfer(from, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * @param spender The address which will spend the funds.\\n\\n   * @param value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address spender, uint value) public returns (bool success) {\\n\\n\\n\\n    // To change the approve amount you first have to reduce the addresses'\\n\\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\\n\\n    //  already 0 to mitigate the race condition described here:\\n\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n    require (value == 0 || allowed[msg.sender][spender] == 0);\\n\\n\\n\\n    allowed[msg.sender][spender] = value;\\n\\n    Approval(msg.sender, spender, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n\\n   * @param account address The address which owns the funds.\\n\\n   * @param spender address The address which will spend the funds.\\n\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n\\n   */\\n\\n  function allowance(address account, address spender) public view returns (uint remaining) {\\n\\n    return allowed[account][spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic increment of approved spending\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   *\\n\\n   */\\n\\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\\n\\n      uint oldValue = allowed[msg.sender][spender];\\n\\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic decrement of approved spending.\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   */\\n\\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\\n\\n\\n\\n      uint oldVal = allowed[msg.sender][spender];\\n\\n\\n\\n      if (subtractedValue > oldVal) {\\n\\n          allowed[msg.sender][spender] = 0;\\n\\n      } else {\\n\\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\\n\\n      }\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\\n\\n   */\\n\\n  function burnTokens(address account, uint value) internal {\\n\\n    balances[account] = balances[account].sub(value);\\n\\n    total_supply = total_supply.sub(value);\\n\\n    Transfer(account, 0, value);\\n\\n    Burned(account, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal minting function.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal {\\n\\n    total_supply = total_supply.add(amount);\\n\\n    balances[receiver] = balances[receiver].add(amount);\\n\\n    Minted(receiver, amount);\\n\\n\\n\\n    // Beware: Address zero may be used for special transactions in a future fork.\\n\\n    // This will make the mint transaction appear in EtherScan.io\\n\\n    // We can remove this after there is a standardized minting event\\n\\n    Transfer(0, receiver, amount);\\n\\n  }\\n\\n  \\n\\n}\\n\\n\\n\\n/**\\n\\n * Define interface for releasing the token transfer after a successful crowdsale.\\n\\n */\\n\\ncontract ReleasableToken is StandardToken, Ownable {\\n\\n\\n\\n  /* The finalizer contract that allows lifting the transfer limits on this token */\\n\\n  address public releaseAgent;\\n\\n\\n\\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\\n\\n  bool public released = false;\\n\\n\\n\\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\\n\\n  mapping (address => bool) public transferAgents;\\n\\n\\n\\n  /**\\n\\n   * Set the contract that can call release and make the token transferable.\\n\\n   *\\n\\n   * Since the owner of this contract is (or should be) the crowdsale,\\n\\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\\n\\n   */\\n\\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\\n\\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\\n\\n    releaseAgent = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\\n\\n   */\\n\\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\\n\\n    transferAgents[addr] = state;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * One way function to release the tokens into the wild.\\n\\n   *\\n\\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\\n\\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    released = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Limit token transfer until the crowdsale is over.\\n\\n   */\\n\\n  modifier canTransfer(address sender) {\\n\\n    require(released || transferAgents[sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only before or after the tokens have been released */\\n\\n  modifier inReleaseState(bool releaseState) {\\n\\n    require(releaseState == released);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only by a whitelisted release agent. */\\n\\n  modifier onlyReleaseAgent() {\\n\\n    require(msg.sender == releaseAgent);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** We restrict transfer by overriding it */\\n\\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\\n\\n    // Call StandardToken.transfer()\\n\\n   return super.transfer(to, value);\\n\\n  }\\n\\n\\n\\n  /** We restrict transferFrom by overriding it */\\n\\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\\n\\n    // Call StandardToken.transferForm()\\n\\n    return super.transferFrom(from, to, value);\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * First envisioned by Golem and Lunyr projects.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Inspired by Lunyr.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n */\\n\\n\\n\\n/**\\n\\n * Upgrade agent transfers tokens to a new contract.\\n\\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\\n\\n *\\n\\n * The Upgrade agent is the interface used to implement a token\\n\\n * migration in the case of an emergency.\\n\\n * The function upgradeFrom has to implement the part of the creation\\n\\n * of new tokens on behalf of the user doing the upgrade.\\n\\n *\\n\\n * The new token can implement this interface directly, or use.\\n\\n */\\n\\ncontract UpgradeAgent {\\n\\n\\n\\n  /** This value should be the same as the original token's total supply */\\n\\n  uint public originalSupply;\\n\\n\\n\\n  /** Interface to ensure the contract is correctly configured */\\n\\n  function isUpgradeAgent() public pure returns (bool) {\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  Upgrade an account\\n\\n\\n\\n  When the token contract is in the upgrade status the each user will\\n\\n  have to call `upgrade(value)` function from UpgradeableToken.\\n\\n\\n\\n  The upgrade function adjust the balance of the user and the supply\\n\\n  of the previous token and then call `upgradeFrom(value)`.\\n\\n\\n\\n  The UpgradeAgent is the responsible to create the tokens for the user\\n\\n  in the new contract.\\n\\n\\n\\n  * @param from Account to upgrade.\\n\\n  * @param value Tokens to upgrade.\\n\\n\\n\\n  */\\n\\n  function upgradeFrom(address from, uint value) public;\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\\n\\n *\\n\\n */\\n\\ncontract UpgradeableToken is EIP20Token, Burnable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\\n\\n  address public upgradeMaster;\\n\\n\\n\\n  /** The next contract where the tokens will be migrated. */\\n\\n  UpgradeAgent public upgradeAgent;\\n\\n\\n\\n  /** How many tokens we have upgraded by now. */\\n\\n  uint public totalUpgraded = 0;\\n\\n\\n\\n  /**\\n\\n   * Upgrade states.\\n\\n   *\\n\\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\\n\\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\\n\\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\\n\\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\\n\\n   *\\n\\n   */\\n\\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\\n\\n\\n\\n  /**\\n\\n   * Somebody has upgraded some of his tokens.\\n\\n   */\\n\\n  event Upgrade(address indexed from, address to, uint value);\\n\\n\\n\\n  /**\\n\\n   * New upgrade agent available.\\n\\n   */\\n\\n  event UpgradeAgentSet(address agent);\\n\\n\\n\\n  /**\\n\\n   * Do not allow construction without upgrade master set.\\n\\n   */\\n\\n  function UpgradeableToken(address master) internal {\\n\\n    setUpgradeMaster(master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow the token holder to upgrade some of their tokens to a new contract.\\n\\n   */\\n\\n  function upgrade(uint value) public {\\n\\n    UpgradeState state = getUpgradeState();\\n\\n    // Ensure it's not called in a bad state\\n\\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\\n\\n\\n\\n    // Validate input value.\\n\\n    require(value != 0);\\n\\n\\n\\n    // Upgrade agent reissues the tokens\\n\\n    upgradeAgent.upgradeFrom(msg.sender, value);\\n\\n    \\n\\n    // Take tokens out from circulation\\n\\n    burnTokens(msg.sender, value);\\n\\n    totalUpgraded = totalUpgraded.add(value);\\n\\n\\n\\n    Upgrade(msg.sender, upgradeAgent, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set an upgrade agent that handles the upgrade process\\n\\n   */\\n\\n  function setUpgradeAgent(address agent) onlyMaster external {\\n\\n    // Check whether the token is in a state that we could think of upgrading\\n\\n    require(canUpgrade());\\n\\n\\n\\n    require(agent != 0x0);\\n\\n    // Upgrade has already begun for an agent\\n\\n    require(getUpgradeState() != UpgradeState.Upgrading);\\n\\n\\n\\n    upgradeAgent = UpgradeAgent(agent);\\n\\n\\n\\n    // Bad interface\\n\\n    require(upgradeAgent.isUpgradeAgent());\\n\\n    // Make sure that token supplies match in source and target\\n\\n    require(upgradeAgent.originalSupply() == totalSupply());\\n\\n\\n\\n    UpgradeAgentSet(upgradeAgent);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Get the state of the token upgrade.\\n\\n   */\\n\\n  function getUpgradeState() public view returns(UpgradeState) {\\n\\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\\n\\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\\n\\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\\n\\n    else return UpgradeState.Upgrading;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Change the upgrade master.\\n\\n   *\\n\\n   * This allows us to set a new owner for the upgrade mechanism.\\n\\n   */\\n\\n  function changeUpgradeMaster(address new_master) onlyMaster public {\\n\\n    setUpgradeMaster(new_master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal upgrade master setter.\\n\\n   */\\n\\n  function setUpgradeMaster(address new_master) private {\\n\\n    require(new_master != 0x0);\\n\\n    upgradeMaster = new_master;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Child contract can override to provide the condition in which the upgrade can begin.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n     return true;\\n\\n  }\\n\\n\\n\\n\\n\\n  modifier onlyMaster() {\\n\\n    require(msg.sender == upgradeMaster);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\\n\\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\\n\\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\\n\\ncontract LostAndFoundToken {\\n\\n  /**\\n\\n   * @return Address of the account that handles movements.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address);\\n\\n\\n\\n  /**\\n\\n   * @param agent Address that will be able to move tokens with transferFrom\\n\\n   * @param tokens Amount of tokens approved for transfer\\n\\n   * @param token_contract Contract of the token\\n\\n   */\\n\\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\\n\\n    require(msg.sender == getLostAndFoundMaster());\\n\\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\\n\\n    //  getting them stuck in another address by accident.\\n\\n    token_contract.approve(agent, tokens);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * A public interface to increase the supply of a token.\\n\\n *\\n\\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\\n\\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\\n\\n *\\n\\n */\\n\\ncontract MintableToken is Mintable, Ownable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n  /** List of agents that are allowed to create new tokens */\\n\\n  mapping (address => bool) public mintAgents;\\n\\n\\n\\n  event MintingAgentChanged(address addr, bool state);\\n\\n\\n\\n\\n\\n  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\\n\\n    require(multisig != address(0));\\n\\n    // Cannot create a token without supply and no minting\\n\\n    require(mintable || initialSupply != 0);\\n\\n    // Create initially all balance on the team multisig\\n\\n    if (initialSupply > 0)\\n\\n      mintInternal(multisig, initialSupply);\\n\\n    // No more new supply allowed after the token creation\\n\\n    mintingFinished = !mintable;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Create new tokens and allocate them to an address.\\n\\n   *\\n\\n   * Only callable by a mint agent (e.g. crowdsale contract).\\n\\n   */\\n\\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\\n\\n    mintInternal(receiver, amount);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a crowdsale contract to mint new tokens.\\n\\n   */\\n\\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\\n\\n    mintAgents[addr] = state;\\n\\n    MintingAgentChanged(addr, state);\\n\\n  }\\n\\n\\n\\n  modifier onlyMintAgent() {\\n\\n    // Only mint agents are allowed to mint new tokens\\n\\n    require(mintAgents[msg.sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Make sure we are not done yet. */\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * A crowdsale token.\\n\\n *\\n\\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\\n\\n *\\n\\n * - The token transfer() is disabled until the crowdsale is over\\n\\n * - The token contract gives an opt-in upgrade path to a new contract\\n\\n * - The same token can be part of several crowdsales through the approve() mechanism\\n\\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\\n\\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\\n\\n *\\n\\n */\\n\\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\\n\\n\\n\\n  string public name = \\\"TokenHome\\\";\\n\\n\\n\\n  string public symbol = \\\"TH\\\";\\n\\n\\n\\n  uint8 public decimals;\\n\\n\\n\\n  address public lost_and_found_master;\\n\\n\\n\\n  /**\\n\\n   * Construct the token.\\n\\n   *\\n\\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\\n\\n   *\\n\\n   * @param initial_supply How many tokens we start with.\\n\\n   * @param token_decimals Number of decimal places.\\n\\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\\n\\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\\n\\n   */\\n\\n  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\\n\\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\\n\\n    require(token_retriever != address(0));\\n\\n    decimals = token_decimals;\\n\\n    lost_and_found_master = token_retriever;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * When token is released to be transferable, prohibit new token creation.\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    mintingFinished = true;\\n\\n    super.releaseTokenTransfer();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n    return released && super.canUpgrade();\\n\\n  }\\n\\n\\n\\n  function burn(uint value) public {\\n\\n    burnTokens(msg.sender, value);\\n\\n  }\\n\\n\\n\\n  function getLostAndFoundMaster() internal view returns(address) {\\n\\n    return lost_and_found_master;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract base contract for token sales.\\n\\n *\\n\\n * Handles\\n\\n * - start and end dates\\n\\n * - accepting investments\\n\\n * - various statistics during the crowdfund\\n\\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\\n\\n *\\n\\n */\\n\\ncontract GenericCrowdsale is Haltable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /* The token we are selling */\\n\\n  CrowdsaleToken public token;\\n\\n\\n\\n  /* ether will be transferred to this address */\\n\\n  address public multisigWallet;\\n\\n\\n\\n  /* the starting timestamp of the crowdsale */\\n\\n  uint public startsAt;\\n\\n\\n\\n  /* the ending timestamp of the crowdsale */\\n\\n  uint public endsAt;\\n\\n\\n\\n  /* the number of tokens already sold through this contract*/\\n\\n  uint public tokensSold = 0;\\n\\n\\n\\n  /* How many wei of funding we have raised */\\n\\n  uint public weiRaised = 0;\\n\\n\\n\\n  /* How many distinct addresses have invested */\\n\\n  uint public investorCount = 0;\\n\\n\\n\\n  /* Has this crowdsale been finalized */\\n\\n  bool public finalized = false;\\n\\n\\n\\n  /* Do we need to have a unique contributor id for each customer */\\n\\n  bool public requireCustomerId = false;\\n\\n\\n\\n  /* Has this crowdsale been configured */\\n\\n  bool public configured = false;\\n\\n\\n\\n  /**\\n\\n   * Do we verify that contributor has been cleared on the server side (accredited investors only).\\n\\n   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\\n\\n   */\\n\\n  bool public requiredSignedAddress = false;\\n\\n\\n\\n  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\\n\\n  address public signerAddress;\\n\\n\\n\\n  /** How many ETH each address has invested in this crowdsale */\\n\\n  mapping (address => uint) public investedAmountOf;\\n\\n\\n\\n  /** How many tokens this crowdsale has credited for each investor address */\\n\\n  mapping (address => uint) public tokenAmountOf;\\n\\n\\n\\n  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\\n\\n  mapping (address => bool) public earlyParticipantWhitelist;\\n\\n\\n\\n  /** State machine\\n\\n   *\\n\\n   * - PendingConfiguration: Crowdsale not yet configured\\n\\n   * - Prefunding: We have not reached the starting timestamp yet\\n\\n   * - Funding: Active crowdsale\\n\\n   * - Success: Crowdsale ended\\n\\n   * - Finalized: The finalize function has been called and successfully executed\\n\\n   */\\n\\n  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\\n\\n\\n\\n\\n\\n  // A new investment was made\\n\\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\\n\\n\\n\\n  // The rules about what kind of investments we accept were changed\\n\\n  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\\n\\n\\n\\n  // Address early participation whitelist status changed\\n\\n  event Whitelisted(address addr, bool status);\\n\\n\\n\\n  // Crowdsale's finalize function has been called\\n\\n  event Finalized();\\n\\n\\n\\n  /*\\n\\n   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   *\\n\\n   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\\n\\n   */\\n\\n  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\\n\\n    setMultisig(team_multisig);\\n\\n\\n\\n    // Don't mess the dates\\n\\n    require(start != 0 && end != 0);\\n\\n    require(now < start && start < end);\\n\\n    startsAt = start;\\n\\n    endsAt = end;\\n\\n    configured = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Default fallback behaviour is to call buy.\\n\\n   * Ideally, no contract calls this crowdsale without supporting ERC20.\\n\\n   * However, some sort of refunding function may be desired to cover such situations.\\n\\n   */\\n\\n  function() payable public {\\n\\n    buy();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Make an investment.\\n\\n   *\\n\\n   * The crowdsale must be running for one to invest.\\n\\n   * We must have not pressed the emergency brake.\\n\\n   *\\n\\n   * @param receiver The Ethereum address who receives the tokens\\n\\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\\n\\n   *\\n\\n   */\\n\\n  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\\n\\n    // Determine if it's a good time to accept investment from this participant\\n\\n    if (getState() == State.PreFunding) {\\n\\n      // Are we whitelisted for early deposit\\n\\n      require(earlyParticipantWhitelist[msg.sender]);\\n\\n    }\\n\\n\\n\\n    uint weiAmount;\\n\\n    uint tokenAmount;\\n\\n    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\\n\\n    // Sanity check against bad implementation.\\n\\n    assert(weiAmount <= msg.value);\\n\\n    \\n\\n    // Dust transaction if no tokens can be given\\n\\n    require(tokenAmount != 0);\\n\\n\\n\\n    if (investedAmountOf[receiver] == 0) {\\n\\n      // A new investor\\n\\n      investorCount++;\\n\\n    }\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\\n\\n\\n\\n    // Pocket the money\\n\\n    multisigWallet.transfer(weiAmount);\\n\\n\\n\\n    // Return excess of money\\n\\n    returnExcedent(msg.value.sub(weiAmount), msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Preallocate tokens for the early investors.\\n\\n   *\\n\\n   * Preallocated tokens have been sold before the actual crowdsale opens.\\n\\n   * This function mints the tokens and moves the crowdsale needle.\\n\\n   *\\n\\n   * No money is exchanged, as the crowdsale team already have received the payment.\\n\\n   *\\n\\n   * @param receiver Account that receives the tokens.\\n\\n   * @param fullTokens tokens as full tokens - decimal places are added internally.\\n\\n   * @param weiPrice Price of a single indivisible token in wei.\\n\\n   *\\n\\n   */\\n\\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\\n\\n    require(receiver != address(0));\\n\\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\\n\\n    require(tokenAmount != 0);\\n\\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Private function to update accounting in the crowdsale.\\n\\n   */\\n\\n  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\\n\\n    // Update investor\\n\\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\\n\\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\\n\\n\\n\\n    // Update totals\\n\\n    weiRaised = weiRaised.add(weiAmount);\\n\\n    tokensSold = tokensSold.add(tokenAmount);\\n\\n\\n\\n    assignTokens(receiver, tokenAmount);\\n\\n    // Tell us that the investment was completed successfully\\n\\n    Invested(receiver, weiAmount, tokenAmount, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\\n\\n    bytes32 hash = sha256(receiver);\\n\\n    require(ecrecover(hash, v, r, s) == signerAddress);\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Buys tokens on behalf of an address.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the receiver address.\\n\\n   */\\n\\n  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\\n\\n    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\\n\\n    investInternal(receiver, 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\\n\\n    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithCustomerId(uint128 customerId) public payable {\\n\\n    buyOnBehalfWithCustomerId(msg.sender, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * The basic entry point to participate in the crowdsale process.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the sender address.\\n\\n   */\\n\\n  function buy() public payable {\\n\\n    buyOnBehalf(msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    finalized = true;\\n\\n    Finalized();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy do we need to have server-side customer ids for the investments.\\n\\n   *\\n\\n   */\\n\\n  function setRequireCustomerId(bool value) public onlyOwner {\\n\\n    requireCustomerId = value;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy if all investors must be cleared on the server side first.\\n\\n   *\\n\\n   * This is e.g. for the accredited investor clearing.\\n\\n   *\\n\\n   */\\n\\n  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\\n\\n    requiredSignedAddress = value;\\n\\n    signerAddress = signer;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow addresses to do early participation.\\n\\n   */\\n\\n  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\\n\\n    earlyParticipantWhitelist[addr] = status;\\n\\n    Whitelisted(addr, status);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal setter for the multisig wallet\\n\\n   */\\n\\n  function setMultisig(address addr) internal {\\n\\n    require(addr != 0);\\n\\n    multisigWallet = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Crowdfund state machine management.\\n\\n   *\\n\\n   * This function has the timed transition builtin.\\n\\n   * So there is no chance of the variable being stale.\\n\\n   */\\n\\n  function getState() public view returns (State) {\\n\\n    if (finalized) return State.Finalized;\\n\\n    else if (!configured) return State.PendingConfiguration;\\n\\n    else if (now < startsAt) return State.PreFunding;\\n\\n    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\\n\\n    else return State.Success;\\n\\n  }\\n\\n\\n\\n  /** Internal functions that exist to provide inversion of control should they be overriden */\\n\\n\\n\\n  /** Interface for the concrete instance to interact with the token contract in a customizable way */\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal;\\n\\n\\n\\n  /**\\n\\n   *  Determine if the goal was already reached in the current crowdsale\\n\\n   */\\n\\n  function isCrowdsaleFull() internal view returns (bool full);\\n\\n\\n\\n  /**\\n\\n   * Returns any excess wei received\\n\\n   * \\n\\n   * This function can be overriden to provide a different refunding method.\\n\\n   */\\n\\n  function returnExcedent(uint excedent, address receiver) internal {\\n\\n    if (excedent > 0) {\\n\\n      receiver.transfer(excedent);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /** \\n\\n   *  Calculate the amount of tokens that corresponds to the received amount.\\n\\n   *  The wei amount is returned too in case not all of it can be invested.\\n\\n   *\\n\\n   *  Note: When there's an excedent due to rounding error, it should be returned to allow refunding.\\n\\n   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\\n\\n   *  The workaround is good enough for most use cases, hence the simplified function signature.\\n\\n   *  @return weiAllowed The amount of wei accepted in this transaction.\\n\\n   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\\n\\n   */\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\\n\\n\\n\\n  //\\n\\n  // Modifiers\\n\\n  //\\n\\n\\n\\n  modifier inState(State state) {\\n\\n    require(getState() == state);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier unsignedBuyAllowed() {\\n\\n    require(!requiredSignedAddress);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\\n\\n  modifier notFinished() {\\n\\n    State current_state = getState();\\n\\n    require(current_state == State.PreFunding || current_state == State.Funding);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier validCustomerId(uint128 customerId) {\\n\\n    require(customerId != 0);  // UUIDv4 sanity check\\n\\n    _;\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Simple deployment information store inside contract storage.\\n\\ncontract DeploymentInfo {\\n\\n  uint private deployed_on;\\n\\n\\n\\n  function DeploymentInfo() public {\\n\\n    deployed_on = block.number;\\n\\n  }\\n\\n\\n\\n\\n\\n  function getDeploymentBlock() public view returns (uint) {\\n\\n    return deployed_on;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\\n\\n *\\n\\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\\n\\n *\\n\\n * Heavily modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n\\n\\n/// @dev Tranche based pricing.\\n\\n///      Implementing \\\"first price\\\" tranches, meaning, that if a buyer's order is\\n\\n///      covering more than one tranche, the price of the lowest tranche will apply\\n\\n///      to the whole order.\\n\\ncontract TokenTranchePricing {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /**\\n\\n   * Define pricing schedule using tranches.\\n\\n   */\\n\\n  struct Tranche {\\n\\n      // Amount in tokens when this tranche becomes inactive\\n\\n      uint amount;\\n\\n      // Timestamp interval [start, end)\\n\\n      // Starting timestamp (included in the interval)\\n\\n      uint start;\\n\\n      // Ending timestamp (excluded from the interval)\\n\\n      uint end;\\n\\n      // How many tokens per wei you will get while this tranche is active\\n\\n      uint price;\\n\\n  }\\n\\n  // We define offsets and size for the deserialization of ordered tuples in raw arrays\\n\\n  uint private constant amount_offset = 0;\\n\\n  uint private constant start_offset = 1;\\n\\n  uint private constant end_offset = 2;\\n\\n  uint private constant price_offset = 3;\\n\\n  uint private constant tranche_size = 4;\\n\\n\\n\\n  Tranche[] public tranches;\\n\\n\\n\\n  function getTranchesLength() public view returns (uint) {\\n\\n    return tranches.length;\\n\\n  }\\n\\n  \\n\\n  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\\n\\n  //\\n\\n  /// @dev Construction, creating a list of tranches\\n\\n  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\\n\\n  //\\n\\n  function configurationTokenTranchePricing(uint[] init_tranches) internal {\\n\\n    // Need to have tuples, length check\\n\\n    require(init_tranches.length % tranche_size == 0);\\n\\n    // A tranche with amount zero can never be selected and is therefore useless.\\n\\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\\n\\n    require(init_tranches[amount_offset] > 0);\\n\\n\\n\\n    uint input_tranches_length = init_tranches.length.div(tranche_size);\\n\\n    Tranche memory last_tranche;\\n\\n    for (uint i = 0; i < input_tranches_length; i++) {\\n\\n      uint tranche_offset = i.mul(tranche_size);\\n\\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\\n\\n      uint start = init_tranches[tranche_offset.add(start_offset)];\\n\\n      uint end = init_tranches[tranche_offset.add(end_offset)];\\n\\n      uint price = init_tranches[tranche_offset.add(price_offset)];\\n\\n      // No invalid steps\\n\\n      require(start < end && now < end);\\n\\n      // Bail out when entering unnecessary tranches\\n\\n      // This is preferably checked before deploying contract into any blockchain.\\n\\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\\n\\n              (end > last_tranche.end && amount >= last_tranche.amount));\\n\\n\\n\\n      last_tranche = Tranche(amount, start, end, price);\\n\\n      tranches.push(last_tranche);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return Returns the struct representing the current tranche\\n\\n  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\\n\\n    for (uint i = 0; i < tranches.length; i++) {\\n\\n      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\\n\\n        return tranches[i];\\n\\n      }\\n\\n    }\\n\\n    // No tranche is currently active\\n\\n    revert();\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current price. May revert if there is no tranche currently active.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return The current price\\n\\n  function getCurrentPrice(uint tokensSold) internal view returns (uint result) {\\n\\n    return getCurrentTranche(tokensSold).price;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\\n\\ncontract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\\n\\n  uint public sellable_tokens;\\n\\n  uint public initial_tokens;\\n\\n  uint public milieurs_per_eth; \\n\\n\\n\\n  /*\\n\\n   * The constructor for the crowdsale was removed given it didn't receive any arguments nor had any body.\\n\\n   *\\n\\n   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\\n\\n   * \\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\\n\\n   */\\n\\n\\n\\n  function configurationCrowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply, uint8 token_decimals, uint max_tokens_to_sell) public onlyOwner {\\n\\n\\n\\n      \\n\\n      initial_tokens = multisig_supply;  \\n\\n      token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\\n\\n      // Necessary if assignTokens mints\\n\\n      token.setMintAgent(address(this), true);\\n\\n      // Necessary if finalize is overriden to release the tokens for public trading.\\n\\n      token.setReleaseAgent(address(this));\\n\\n      // Necessary for the execution of buy function and of the subsequent CrowdsaleToken's transfer function. \\n\\n      token.setTransferAgent(address(this), true);\\n\\n      // Crowdsale mints to himself the initial supply\\n\\n      token.mint(address(this), crowdsale_supply);\\n\\n\\n\\n      sellable_tokens = max_tokens_to_sell;\\n\\n\\n\\n      // Configuration functionality for GenericCrowdsale.\\n\\n      configurationGenericCrowdsale(team_multisig, start, end);\\n\\n\\n\\n      // Configuration functionality for TokenTranchePricing.\\n\\n      configurationTokenTranchePricing(init_tranches);\\n\\n  }\\n\\n\\n\\n  //token assignation\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal {\\n\\n    token.transfer(receiver, tokenAmount);\\n\\n  }\\n\\n\\n\\n  //token amount calculation\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\\n\\n    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\\n\\n    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\\n\\n    weiAllowed = maxWeiAllowed.min256(weiAmount);\\n\\n\\n\\n    require(token.balanceOf(receiver).add(weiAllowed) >= 100);\\n\\n    \\n\\n    if (weiAmount < maxWeiAllowed) {\\n\\n      //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\\n\\n      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\\n\\n    }\\n\\n    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\\n\\n    else {\\n\\n      tokenAmount = sellable_tokens.sub(tokensSold);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  //TODO: implement to control funding state criterion\\n\\n  function isCrowdsaleFull() internal view returns (bool full) {\\n\\n    return tokensSold >= sellable_tokens;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    //Tokens sold + bounties represent 75% of the total, the other 25% goes ti the multisig to the partners and to regulate market \\n\\n    uint sold = tokensSold.add(  initial_tokens);\\n\\n    uint toShare = sold.mul(25).div(75).mul(10**uint(token.decimals()));\\n\\n    token.setMintAgent(address(this), true);\\n\\n    token.mint(multisigWallet, toShare);\\n\\n    token.setMintAgent(address(this), false);\\n\\n    token.releaseTokenTransfer();\\n\\n    token.burn(token.balanceOf(address(this)));\\n\\n    super.finalize();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * This function decides who handles lost tokens.\\n\\n   * Do note that this function is NOT meant to be used in a token refund mecahnism.\\n\\n   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address) {\\n\\n    return owner;\\n\\n\\n\\n  }\\n\\n\\n\\n  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\\n\\n  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\\n\\n      require(startingTime > now && startingTime < endsAt);\\n\\n      startsAt = startingTime;\\n\\n  }\\n\\n\\n\\n  function setEndingTime(uint endingTime) public onlyOwner notFinished {\\n\\n       require(endingTime > now && endingTime > startsAt);\\n\\n       endsAt = endingTime;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n  function updateEursPerEth (uint milieurs_amount) public onlyOwner {\\n\\n    require(milieurs_amount >= 100);\\n\\n    milieurs_per_eth = milieurs_amount;\\n\\n  }\\n\\n}\",\"keccak256\":\"0x77a4b14b5eff26dba56f060a11f4a2e7550d057d390e14aef70e0988fe82e7db\"}},\"version\":1}"
      },
      "TokenTranchePricing": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6060604052341561000f57600080fd5b6101168061001e6000396000f30060606040526004361060485763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166326c259628114604d578063f8a5a8dd14608b575b600080fd5b3415605757600080fd5b606060043560ad565b6040518085815260200184815260200183815260200182815260200194505050505060405180910390f35b3415609557600080fd5b609b60e4565b60405190815260200160405180910390f35b600080548290811060ba57fe5b60009182526020909120600490910201805460018201546002830154600390930154919350919084565b600054905600a165627a7a72305820480a0ff93e82c5d06e0573da48ff72974b40c59acb623f52733c128be5f675f60029",
            "opcodes": "PUSH1 0x60 PUSH1 0x40 MSTORE CALLVALUE ISZERO PUSH2 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x116 DUP1 PUSH2 0x1E PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x60 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH1 0x48 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x26C25962 DUP2 EQ PUSH1 0x4D JUMPI DUP1 PUSH4 0xF8A5A8DD EQ PUSH1 0x8B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE ISZERO PUSH1 0x57 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x60 PUSH1 0x4 CALLDATALOAD PUSH1 0xAD JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 DUP6 DUP2 MSTORE PUSH1 0x20 ADD DUP5 DUP2 MSTORE PUSH1 0x20 ADD DUP4 DUP2 MSTORE PUSH1 0x20 ADD DUP3 DUP2 MSTORE PUSH1 0x20 ADD SWAP5 POP POP POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE ISZERO PUSH1 0x95 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x9B PUSH1 0xE4 JUMP JUMPDEST PUSH1 0x40 MLOAD SWAP1 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST PUSH1 0x0 DUP1 SLOAD DUP3 SWAP1 DUP2 LT PUSH1 0xBA JUMPI INVALID JUMPDEST PUSH1 0x0 SWAP2 DUP3 MSTORE PUSH1 0x20 SWAP1 SWAP2 KECCAK256 PUSH1 0x4 SWAP1 SWAP2 MUL ADD DUP1 SLOAD PUSH1 0x1 DUP3 ADD SLOAD PUSH1 0x2 DUP4 ADD SLOAD PUSH1 0x3 SWAP1 SWAP4 ADD SLOAD SWAP2 SWAP4 POP SWAP2 SWAP1 DUP5 JUMP JUMPDEST PUSH1 0x0 SLOAD SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0x48 EXP 0xf 0xf9 RETURNDATACOPY DUP3 0xc5 0xd0 PUSH15 0x573DA48FF72974B40C59ACB623F52 PUSH20 0x3C128BE5F675F600290000000000000000000000 ",
            "sourceMap": "38779:3566:0:-;;;;;;;;;;;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.19+commit.c4cbbb05\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"tranches\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint256\"},{\"name\":\"end\",\"type\":\"uint256\"},{\"name\":\"price\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getTranchesLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"TokenTranchePricing\"},\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"pragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Envisioned in FirstBlood ICO contract.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control \\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\". \\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  /** \\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  function Ownable() internal {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner. \\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param newOwner The address to transfer ownership to. \\n\\n   */\\n\\n  function transferOwnership(address newOwner) onlyOwner public {\\n\\n    require(newOwner != address(0));\\n\\n    owner = newOwner;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract contract that allows children to implement an\\n\\n * emergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\\n\\n *\\n\\n */\\n\\ncontract Haltable is Ownable {\\n\\n  bool public halted;\\n\\n\\n\\n  event Halted(bool halted);\\n\\n\\n\\n  modifier stopInEmergency {\\n\\n    require(!halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier onlyInEmergency {\\n\\n    require(halted);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  // called by the owner on emergency, triggers stopped state\\n\\n  function halt() external onlyOwner {\\n\\n    halted = true;\\n\\n    Halted(true);\\n\\n  }\\n\\n\\n\\n  // called by the owner on end of emergency, returns to normal state\\n\\n  function unhalt() external onlyOwner onlyInEmergency {\\n\\n    halted = false;\\n\\n    Halted(false);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from  https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n/**\\n\\n * Math operations with safety checks\\n\\n */\\n\\nlibrary SafeMath {\\n\\n  function mul(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a * b;\\n\\n    assert(a == 0 || c / a == b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function div(uint a, uint b) internal pure returns (uint) {\\n\\n    // assert(b > 0); // Solidity automatically throws when dividing by 0\\n\\n    uint c = a / b;\\n\\n    // assert(a == b * c + a % b); // There is no case in which this doesn't hold\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function sub(uint a, uint b) internal pure returns (uint) {\\n\\n    assert(b <= a);\\n\\n    return a - b;\\n\\n  }\\n\\n\\n\\n  function add(uint a, uint b) internal pure returns (uint) {\\n\\n    uint c = a + b;\\n\\n    assert(c >= a);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  function max64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min64(uint64 a, uint64 b) internal pure returns (uint64) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n\\n\\n  function max256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a >= b ? a : b;\\n\\n  }\\n\\n\\n\\n  function min256(uint a, uint b) internal pure returns (uint) {\\n\\n    return a < b ? a : b;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/OpenZeppelin/zeppelin-solidity\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Interface for the standard token.\\n\\n * Based on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md\\n\\n */\\n\\ncontract EIP20Token {\\n\\n\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address who) public view returns (uint256);\\n\\n  function transfer(address to, uint256 value) public returns (bool success);\\n\\n  function transferFrom(address from, address to, uint256 value) public returns (bool success);\\n\\n  function approve(address spender, uint256 value) public returns (bool success);\\n\\n  function allowance(address owner, address spender) public view returns (uint256 remaining);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n  event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n\\n\\n  /**\\n\\n  ** Optional functions\\n\\n  *\\n\\n  function name() public view returns (string name);\\n\\n  function symbol() public view returns (string symbol);\\n\\n  function decimals() public view returns (uint8 decimals);\\n\\n  *\\n\\n  **/\\n\\n\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Interface for burning tokens\\n\\ncontract Burnable {\\n\\n  // @dev Destroys tokens for an account\\n\\n  // @param account Account whose tokens are destroyed\\n\\n  // @param value Amount of tokens to destroy\\n\\n  function burnTokens(address account, uint value) internal;\\n\\n  event Burned(address account, uint value);\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * Internal interface for the minting of tokens.\\n\\n */\\n\\ncontract Mintable {\\n\\n\\n\\n  /**\\n\\n   * @dev Mints tokens for an account\\n\\n   * This function should the Minted event.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal;\\n\\n\\n\\n  /** Token supply got increased and a new owner received these tokens */\\n\\n  event Minted(address receiver, uint amount);\\n\\n}\\n\\n\\n\\n/**\\n\\n * @title Standard token\\n\\n * @dev Basic implementation of the EIP20 standard token (also known as ERC20 token).\\n\\n */\\n\\ncontract StandardToken is EIP20Token, Burnable, Mintable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  uint private total_supply;\\n\\n  mapping(address => uint) private balances;\\n\\n  mapping(address => mapping (address => uint)) private allowed;\\n\\n\\n\\n\\n\\n  function totalSupply() public view returns (uint) {\\n\\n    return total_supply;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev transfer token for a specified address\\n\\n   * @param to The address to transfer to.\\n\\n   * @param value The amount to be transferred.\\n\\n   */\\n\\n  function transfer(address to, uint value) public returns (bool success) {\\n\\n    balances[msg.sender] = balances[msg.sender].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    Transfer(msg.sender, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Gets the balance of the specified address.\\n\\n   * @param account The address whose balance is to be queried.\\n\\n   * @return An uint representing the amount owned by the passed address.\\n\\n   */\\n\\n  function balanceOf(address account) public view returns (uint balance) {\\n\\n    return balances[account];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param from address The address which you want to send tokens from\\n\\n   * @param to address The address which you want to transfer to\\n\\n   * @param value uint the amout of tokens to be transfered\\n\\n   */\\n\\n  function transferFrom(address from, address to, uint value) public returns (bool success) {\\n\\n    uint allowance = allowed[from][msg.sender];\\n\\n\\n\\n    // Check is not needed because sub(allowance, value) will already throw if this condition is not met\\n\\n    // require(value <= allowance);\\n\\n    // SafeMath uses assert instead of require though, beware when using an analysis tool\\n\\n\\n\\n    balances[from] = balances[from].sub(value);\\n\\n    balances[to] = balances[to].add(value);\\n\\n    allowed[from][msg.sender] = allowance.sub(value);\\n\\n    Transfer(from, to, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * @param spender The address which will spend the funds.\\n\\n   * @param value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address spender, uint value) public returns (bool success) {\\n\\n\\n\\n    // To change the approve amount you first have to reduce the addresses'\\n\\n    //  allowance to zero by calling `approve(spender, 0)` if it is not\\n\\n    //  already 0 to mitigate the race condition described here:\\n\\n    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n    require (value == 0 || allowed[msg.sender][spender] == 0);\\n\\n\\n\\n    allowed[msg.sender][spender] = value;\\n\\n    Approval(msg.sender, spender, value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens than an owner allowed to a spender.\\n\\n   * @param account address The address which owns the funds.\\n\\n   * @param spender address The address which will spend the funds.\\n\\n   * @return A uint specifing the amount of tokens still avaible for the spender.\\n\\n   */\\n\\n  function allowance(address account, address spender) public view returns (uint remaining) {\\n\\n    return allowed[account][spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic increment of approved spending\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   *\\n\\n   */\\n\\n  function addApproval(address spender, uint addedValue) public returns (bool success) {\\n\\n      uint oldValue = allowed[msg.sender][spender];\\n\\n      allowed[msg.sender][spender] = oldValue.add(addedValue);\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Atomic decrement of approved spending.\\n\\n   *\\n\\n   * Works around https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   */\\n\\n  function subApproval(address spender, uint subtractedValue) public returns (bool success) {\\n\\n\\n\\n      uint oldVal = allowed[msg.sender][spender];\\n\\n\\n\\n      if (subtractedValue > oldVal) {\\n\\n          allowed[msg.sender][spender] = 0;\\n\\n      } else {\\n\\n          allowed[msg.sender][spender] = oldVal.sub(subtractedValue);\\n\\n      }\\n\\n      Approval(msg.sender, spender, allowed[msg.sender][spender]);\\n\\n      return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal function for destroying tokens. Useful for upgrades.\\n\\n   */\\n\\n  function burnTokens(address account, uint value) internal {\\n\\n    balances[account] = balances[account].sub(value);\\n\\n    total_supply = total_supply.sub(value);\\n\\n    Transfer(account, 0, value);\\n\\n    Burned(account, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Provides an internal minting function.\\n\\n   */\\n\\n  function mintInternal(address receiver, uint amount) internal {\\n\\n    total_supply = total_supply.add(amount);\\n\\n    balances[receiver] = balances[receiver].add(amount);\\n\\n    Minted(receiver, amount);\\n\\n\\n\\n    // Beware: Address zero may be used for special transactions in a future fork.\\n\\n    // This will make the mint transaction appear in EtherScan.io\\n\\n    // We can remove this after there is a standardized minting event\\n\\n    Transfer(0, receiver, amount);\\n\\n  }\\n\\n  \\n\\n}\\n\\n\\n\\n/**\\n\\n * Define interface for releasing the token transfer after a successful crowdsale.\\n\\n */\\n\\ncontract ReleasableToken is StandardToken, Ownable {\\n\\n\\n\\n  /* The finalizer contract that allows lifting the transfer limits on this token */\\n\\n  address public releaseAgent;\\n\\n\\n\\n  /** A crowdsale contract can release us to the wild if ICO success. If false we are are in transfer lock up period.*/\\n\\n  bool public released = false;\\n\\n\\n\\n  /** Map of agents that are allowed to transfer tokens regardless of the lock down period. These are crowdsale contracts and possible the team multisig itself. */\\n\\n  mapping (address => bool) public transferAgents;\\n\\n\\n\\n  /**\\n\\n   * Set the contract that can call release and make the token transferable.\\n\\n   *\\n\\n   * Since the owner of this contract is (or should be) the crowdsale,\\n\\n   * it can only be called by a corresponding exposed API in the crowdsale contract in case of input error.\\n\\n   */\\n\\n  function setReleaseAgent(address addr) onlyOwner inReleaseState(false) public {\\n\\n    // We don't do interface check here as we might want to have a normal wallet address to act as a release agent.\\n\\n    releaseAgent = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a particular address (e.g. a crowdsale contract) to transfer tokens despite the lock up period.\\n\\n   */\\n\\n  function setTransferAgent(address addr, bool state) onlyOwner inReleaseState(false) public {\\n\\n    transferAgents[addr] = state;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * One way function to release the tokens into the wild.\\n\\n   *\\n\\n   * Can be called only from the release agent that should typically be the finalize agent ICO contract.\\n\\n   * In the scope of the crowdsale, it is only called if the crowdsale has been a success (first milestone reached).\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    released = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Limit token transfer until the crowdsale is over.\\n\\n   */\\n\\n  modifier canTransfer(address sender) {\\n\\n    require(released || transferAgents[sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only before or after the tokens have been released */\\n\\n  modifier inReleaseState(bool releaseState) {\\n\\n    require(releaseState == released);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** The function can be called only by a whitelisted release agent. */\\n\\n  modifier onlyReleaseAgent() {\\n\\n    require(msg.sender == releaseAgent);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** We restrict transfer by overriding it */\\n\\n  function transfer(address to, uint value) public canTransfer(msg.sender) returns (bool success) {\\n\\n    // Call StandardToken.transfer()\\n\\n   return super.transfer(to, value);\\n\\n  }\\n\\n\\n\\n  /** We restrict transferFrom by overriding it */\\n\\n  function transferFrom(address from, address to, uint value) public canTransfer(from) returns (bool success) {\\n\\n    // Call StandardToken.transferForm()\\n\\n    return super.transferFrom(from, to, value);\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * First envisioned by Golem and Lunyr projects.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Inspired by Lunyr.\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n */\\n\\n\\n\\n/**\\n\\n * Upgrade agent transfers tokens to a new contract.\\n\\n * Upgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\\n\\n *\\n\\n * The Upgrade agent is the interface used to implement a token\\n\\n * migration in the case of an emergency.\\n\\n * The function upgradeFrom has to implement the part of the creation\\n\\n * of new tokens on behalf of the user doing the upgrade.\\n\\n *\\n\\n * The new token can implement this interface directly, or use.\\n\\n */\\n\\ncontract UpgradeAgent {\\n\\n\\n\\n  /** This value should be the same as the original token's total supply */\\n\\n  uint public originalSupply;\\n\\n\\n\\n  /** Interface to ensure the contract is correctly configured */\\n\\n  function isUpgradeAgent() public pure returns (bool) {\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  Upgrade an account\\n\\n\\n\\n  When the token contract is in the upgrade status the each user will\\n\\n  have to call `upgrade(value)` function from UpgradeableToken.\\n\\n\\n\\n  The upgrade function adjust the balance of the user and the supply\\n\\n  of the previous token and then call `upgradeFrom(value)`.\\n\\n\\n\\n  The UpgradeAgent is the responsible to create the tokens for the user\\n\\n  in the new contract.\\n\\n\\n\\n  * @param from Account to upgrade.\\n\\n  * @param value Tokens to upgrade.\\n\\n\\n\\n  */\\n\\n  function upgradeFrom(address from, uint value) public;\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n/**\\n\\n * A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\\n\\n *\\n\\n */\\n\\ncontract UpgradeableToken is EIP20Token, Burnable {\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /** Contract / person who can set the upgrade path. This can be the same as team multisig wallet, as what it is with its default value. */\\n\\n  address public upgradeMaster;\\n\\n\\n\\n  /** The next contract where the tokens will be migrated. */\\n\\n  UpgradeAgent public upgradeAgent;\\n\\n\\n\\n  /** How many tokens we have upgraded by now. */\\n\\n  uint public totalUpgraded = 0;\\n\\n\\n\\n  /**\\n\\n   * Upgrade states.\\n\\n   *\\n\\n   * - NotAllowed: The child contract has not reached a condition where the upgrade can bgun\\n\\n   * - WaitingForAgent: Token allows upgrade, but we don't have a new agent yet\\n\\n   * - ReadyToUpgrade: The agent is set, but not a single token has been upgraded yet. This allows changing the upgrade agent while there is time.\\n\\n   * - Upgrading: Upgrade agent is set and the balance holders can upgrade their tokens\\n\\n   *\\n\\n   */\\n\\n  enum UpgradeState {Unknown, NotAllowed, WaitingForAgent, ReadyToUpgrade, Upgrading}\\n\\n\\n\\n  /**\\n\\n   * Somebody has upgraded some of his tokens.\\n\\n   */\\n\\n  event Upgrade(address indexed from, address to, uint value);\\n\\n\\n\\n  /**\\n\\n   * New upgrade agent available.\\n\\n   */\\n\\n  event UpgradeAgentSet(address agent);\\n\\n\\n\\n  /**\\n\\n   * Do not allow construction without upgrade master set.\\n\\n   */\\n\\n  function UpgradeableToken(address master) internal {\\n\\n    setUpgradeMaster(master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow the token holder to upgrade some of their tokens to a new contract.\\n\\n   */\\n\\n  function upgrade(uint value) public {\\n\\n    UpgradeState state = getUpgradeState();\\n\\n    // Ensure it's not called in a bad state\\n\\n    require(state == UpgradeState.ReadyToUpgrade || state == UpgradeState.Upgrading);\\n\\n\\n\\n    // Validate input value.\\n\\n    require(value != 0);\\n\\n\\n\\n    // Upgrade agent reissues the tokens\\n\\n    upgradeAgent.upgradeFrom(msg.sender, value);\\n\\n    \\n\\n    // Take tokens out from circulation\\n\\n    burnTokens(msg.sender, value);\\n\\n    totalUpgraded = totalUpgraded.add(value);\\n\\n\\n\\n    Upgrade(msg.sender, upgradeAgent, value);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set an upgrade agent that handles the upgrade process\\n\\n   */\\n\\n  function setUpgradeAgent(address agent) onlyMaster external {\\n\\n    // Check whether the token is in a state that we could think of upgrading\\n\\n    require(canUpgrade());\\n\\n\\n\\n    require(agent != 0x0);\\n\\n    // Upgrade has already begun for an agent\\n\\n    require(getUpgradeState() != UpgradeState.Upgrading);\\n\\n\\n\\n    upgradeAgent = UpgradeAgent(agent);\\n\\n\\n\\n    // Bad interface\\n\\n    require(upgradeAgent.isUpgradeAgent());\\n\\n    // Make sure that token supplies match in source and target\\n\\n    require(upgradeAgent.originalSupply() == totalSupply());\\n\\n\\n\\n    UpgradeAgentSet(upgradeAgent);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Get the state of the token upgrade.\\n\\n   */\\n\\n  function getUpgradeState() public view returns(UpgradeState) {\\n\\n    if (!canUpgrade()) return UpgradeState.NotAllowed;\\n\\n    else if (address(upgradeAgent) == 0x00) return UpgradeState.WaitingForAgent;\\n\\n    else if (totalUpgraded == 0) return UpgradeState.ReadyToUpgrade;\\n\\n    else return UpgradeState.Upgrading;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Change the upgrade master.\\n\\n   *\\n\\n   * This allows us to set a new owner for the upgrade mechanism.\\n\\n   */\\n\\n  function changeUpgradeMaster(address new_master) onlyMaster public {\\n\\n    setUpgradeMaster(new_master);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal upgrade master setter.\\n\\n   */\\n\\n  function setUpgradeMaster(address new_master) private {\\n\\n    require(new_master != 0x0);\\n\\n    upgradeMaster = new_master;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Child contract can override to provide the condition in which the upgrade can begin.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n     return true;\\n\\n  }\\n\\n\\n\\n\\n\\n  modifier onlyMaster() {\\n\\n    require(msg.sender == upgradeMaster);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Authored by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n// This contract aims to provide an inheritable way to recover tokens from a contract not meant to hold tokens\\n\\n// To use this contract, have your token-ignoring contract inherit this one and implement getLostAndFoundMaster to decide who can move lost tokens.\\n\\n// Of course, this contract imposes support costs upon whoever is the lost and found master.\\n\\ncontract LostAndFoundToken {\\n\\n  /**\\n\\n   * @return Address of the account that handles movements.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address);\\n\\n\\n\\n  /**\\n\\n   * @param agent Address that will be able to move tokens with transferFrom\\n\\n   * @param tokens Amount of tokens approved for transfer\\n\\n   * @param token_contract Contract of the token\\n\\n   */\\n\\n  function enableLostAndFound(address agent, uint tokens, EIP20Token token_contract) public {\\n\\n    require(msg.sender == getLostAndFoundMaster());\\n\\n    // We use approve instead of transfer to minimize the possibility of the lost and found master\\n\\n    //  getting them stuck in another address by accident.\\n\\n    token_contract.approve(agent, tokens);\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n/**\\n\\n * Originally from https://github.com/TokenMarketNet/ico\\n\\n * Modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\n\\n\\n/**\\n\\n * A public interface to increase the supply of a token.\\n\\n *\\n\\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\\n\\n * Only mint agents, usually contracts whitelisted by the owner, can mint new tokens.\\n\\n *\\n\\n */\\n\\ncontract MintableToken is Mintable, Ownable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n  /** List of agents that are allowed to create new tokens */\\n\\n  mapping (address => bool) public mintAgents;\\n\\n\\n\\n  event MintingAgentChanged(address addr, bool state);\\n\\n\\n\\n\\n\\n  function MintableToken(uint initialSupply, address multisig, bool mintable) internal {\\n\\n    require(multisig != address(0));\\n\\n    // Cannot create a token without supply and no minting\\n\\n    require(mintable || initialSupply != 0);\\n\\n    // Create initially all balance on the team multisig\\n\\n    if (initialSupply > 0)\\n\\n      mintInternal(multisig, initialSupply);\\n\\n    // No more new supply allowed after the token creation\\n\\n    mintingFinished = !mintable;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Create new tokens and allocate them to an address.\\n\\n   *\\n\\n   * Only callable by a mint agent (e.g. crowdsale contract).\\n\\n   */\\n\\n  function mint(address receiver, uint amount) onlyMintAgent canMint public {\\n\\n    mintInternal(receiver, amount);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Owner can allow a crowdsale contract to mint new tokens.\\n\\n   */\\n\\n  function setMintAgent(address addr, bool state) onlyOwner canMint public {\\n\\n    mintAgents[addr] = state;\\n\\n    MintingAgentChanged(addr, state);\\n\\n  }\\n\\n\\n\\n  modifier onlyMintAgent() {\\n\\n    // Only mint agents are allowed to mint new tokens\\n\\n    require(mintAgents[msg.sender]);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Make sure we are not done yet. */\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * A crowdsale token.\\n\\n *\\n\\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\\n\\n *\\n\\n * - The token transfer() is disabled until the crowdsale is over\\n\\n * - The token contract gives an opt-in upgrade path to a new contract\\n\\n * - The same token can be part of several crowdsales through the approve() mechanism\\n\\n * - The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\\n\\n * - ERC20 tokens transferred to this contract can be recovered by a lost and found master\\n\\n *\\n\\n */\\n\\ncontract CrowdsaleToken is ReleasableToken, MintableToken, UpgradeableToken, LostAndFoundToken {\\n\\n\\n\\n  string public name = \\\"TokenHome\\\";\\n\\n\\n\\n  string public symbol = \\\"TH\\\";\\n\\n\\n\\n  uint8 public decimals;\\n\\n\\n\\n  address public lost_and_found_master;\\n\\n\\n\\n  /**\\n\\n   * Construct the token.\\n\\n   *\\n\\n   * This token must be created through a team multisig wallet, so that it is owned by that wallet.\\n\\n   *\\n\\n   * @param initial_supply How many tokens we start with.\\n\\n   * @param token_decimals Number of decimal places.\\n\\n   * @param team_multisig Address of the multisig that receives the initial supply and is set as the upgrade master.\\n\\n   * @param token_retriever Address of the account that handles ERC20 tokens that were accidentally sent to this contract.\\n\\n   */\\n\\n  function CrowdsaleToken(uint initial_supply, uint8 token_decimals, address team_multisig, address token_retriever) public\\n\\n  UpgradeableToken(team_multisig) MintableToken(initial_supply, team_multisig, true) {\\n\\n    require(token_retriever != address(0));\\n\\n    decimals = token_decimals;\\n\\n    lost_and_found_master = token_retriever;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * When token is released to be transferable, prohibit new token creation.\\n\\n   */\\n\\n  function releaseTokenTransfer() public onlyReleaseAgent {\\n\\n    mintingFinished = true;\\n\\n    super.releaseTokenTransfer();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow upgrade agent functionality to kick in only if the crowdsale was a success.\\n\\n   */\\n\\n  function canUpgrade() public view returns(bool) {\\n\\n    return released && super.canUpgrade();\\n\\n  }\\n\\n\\n\\n  function burn(uint value) public {\\n\\n    burnTokens(msg.sender, value);\\n\\n  }\\n\\n\\n\\n  function getLostAndFoundMaster() internal view returns(address) {\\n\\n    return lost_and_found_master;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * Abstract base contract for token sales.\\n\\n *\\n\\n * Handles\\n\\n * - start and end dates\\n\\n * - accepting investments\\n\\n * - various statistics during the crowdfund\\n\\n * - different investment policies (require server side customer id, allow only whitelisted addresses)\\n\\n *\\n\\n */\\n\\ncontract GenericCrowdsale is Haltable {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /* The token we are selling */\\n\\n  CrowdsaleToken public token;\\n\\n\\n\\n  /* ether will be transferred to this address */\\n\\n  address public multisigWallet;\\n\\n\\n\\n  /* the starting timestamp of the crowdsale */\\n\\n  uint public startsAt;\\n\\n\\n\\n  /* the ending timestamp of the crowdsale */\\n\\n  uint public endsAt;\\n\\n\\n\\n  /* the number of tokens already sold through this contract*/\\n\\n  uint public tokensSold = 0;\\n\\n\\n\\n  /* How many wei of funding we have raised */\\n\\n  uint public weiRaised = 0;\\n\\n\\n\\n  /* How many distinct addresses have invested */\\n\\n  uint public investorCount = 0;\\n\\n\\n\\n  /* Has this crowdsale been finalized */\\n\\n  bool public finalized = false;\\n\\n\\n\\n  /* Do we need to have a unique contributor id for each customer */\\n\\n  bool public requireCustomerId = false;\\n\\n\\n\\n  /* Has this crowdsale been configured */\\n\\n  bool public configured = false;\\n\\n\\n\\n  /**\\n\\n   * Do we verify that contributor has been cleared on the server side (accredited investors only).\\n\\n   * This method was first used in the FirstBlood crowdsale to ensure all contributors had accepted terms of sale (on the web).\\n\\n   */\\n\\n  bool public requiredSignedAddress = false;\\n\\n\\n\\n  /** Server side address that signed allowed contributors (Ethereum addresses) that can participate the crowdsale */\\n\\n  address public signerAddress;\\n\\n\\n\\n  /** How many ETH each address has invested in this crowdsale */\\n\\n  mapping (address => uint) public investedAmountOf;\\n\\n\\n\\n  /** How many tokens this crowdsale has credited for each investor address */\\n\\n  mapping (address => uint) public tokenAmountOf;\\n\\n\\n\\n  /** Addresses that are allowed to invest even before ICO officially opens. For testing, for ICO partners, etc. */\\n\\n  mapping (address => bool) public earlyParticipantWhitelist;\\n\\n\\n\\n  /** State machine\\n\\n   *\\n\\n   * - PendingConfiguration: Crowdsale not yet configured\\n\\n   * - Prefunding: We have not reached the starting timestamp yet\\n\\n   * - Funding: Active crowdsale\\n\\n   * - Success: Crowdsale ended\\n\\n   * - Finalized: The finalize function has been called and successfully executed\\n\\n   */\\n\\n  enum State{Unknown, PendingConfiguration, PreFunding, Funding, Success, Finalized}\\n\\n\\n\\n\\n\\n  // A new investment was made\\n\\n  event Invested(address investor, uint weiAmount, uint tokenAmount, uint128 customerId);\\n\\n\\n\\n  // The rules about what kind of investments we accept were changed\\n\\n  event InvestmentPolicyChanged(bool requireCId, bool requireSignedAddress, address signer);\\n\\n\\n\\n  // Address early participation whitelist status changed\\n\\n  event Whitelisted(address addr, bool status);\\n\\n\\n\\n  // Crowdsale's finalize function has been called\\n\\n  event Finalized();\\n\\n\\n\\n  /*\\n\\n   * The configuration from the constructor was moved to the configurationGenericCrowdsale function.\\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   *\\n\\n   * configurationGenericCrowdsale can only be called when in State.PendingConfiguration because of the inState modifier.\\n\\n   */\\n\\n  function configurationGenericCrowdsale(address team_multisig, uint start, uint end) internal inState(State.PendingConfiguration) {\\n\\n    setMultisig(team_multisig);\\n\\n\\n\\n    // Don't mess the dates\\n\\n    require(start != 0 && end != 0);\\n\\n    require(now < start && start < end);\\n\\n    startsAt = start;\\n\\n    endsAt = end;\\n\\n    configured = true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Default fallback behaviour is to call buy.\\n\\n   * Ideally, no contract calls this crowdsale without supporting ERC20.\\n\\n   * However, some sort of refunding function may be desired to cover such situations.\\n\\n   */\\n\\n  function() payable public {\\n\\n    buy();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Make an investment.\\n\\n   *\\n\\n   * The crowdsale must be running for one to invest.\\n\\n   * We must have not pressed the emergency brake.\\n\\n   *\\n\\n   * @param receiver The Ethereum address who receives the tokens\\n\\n   * @param customerId (optional) UUID v4 to track the successful payments on the server side\\n\\n   *\\n\\n   */\\n\\n  function investInternal(address receiver, uint128 customerId) stopInEmergency notFinished private {\\n\\n    // Determine if it's a good time to accept investment from this participant\\n\\n    if (getState() == State.PreFunding) {\\n\\n      // Are we whitelisted for early deposit\\n\\n      require(earlyParticipantWhitelist[msg.sender]);\\n\\n    }\\n\\n\\n\\n    uint weiAmount;\\n\\n    uint tokenAmount;\\n\\n    (weiAmount, tokenAmount) = calculateTokenAmount(msg.value, receiver);\\n\\n    // Sanity check against bad implementation.\\n\\n    assert(weiAmount <= msg.value);\\n\\n    \\n\\n    // Dust transaction if no tokens can be given\\n\\n    require(tokenAmount != 0);\\n\\n\\n\\n    if (investedAmountOf[receiver] == 0) {\\n\\n      // A new investor\\n\\n      investorCount++;\\n\\n    }\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver, customerId);\\n\\n\\n\\n    // Pocket the money\\n\\n    multisigWallet.transfer(weiAmount);\\n\\n\\n\\n    // Return excess of money\\n\\n    returnExcedent(msg.value.sub(weiAmount), msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Preallocate tokens for the early investors.\\n\\n   *\\n\\n   * Preallocated tokens have been sold before the actual crowdsale opens.\\n\\n   * This function mints the tokens and moves the crowdsale needle.\\n\\n   *\\n\\n   * No money is exchanged, as the crowdsale team already have received the payment.\\n\\n   *\\n\\n   * @param receiver Account that receives the tokens.\\n\\n   * @param fullTokens tokens as full tokens - decimal places are added internally.\\n\\n   * @param weiPrice Price of a single indivisible token in wei.\\n\\n   *\\n\\n   */\\n\\n  function preallocate(address receiver, uint fullTokens, uint weiPrice) public onlyOwner notFinished {\\n\\n    require(receiver != address(0));\\n\\n    uint tokenAmount = fullTokens.mul(10**uint(token.decimals()));\\n\\n    require(tokenAmount != 0);\\n\\n    uint weiAmount = weiPrice.mul(tokenAmount); // This can also be 0, in which case we give out tokens for free\\n\\n    updateInvestorFunds(tokenAmount, weiAmount, receiver , 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Private function to update accounting in the crowdsale.\\n\\n   */\\n\\n  function updateInvestorFunds(uint tokenAmount, uint weiAmount, address receiver, uint128 customerId) private {\\n\\n    // Update investor\\n\\n    investedAmountOf[receiver] = investedAmountOf[receiver].add(weiAmount);\\n\\n    tokenAmountOf[receiver] = tokenAmountOf[receiver].add(tokenAmount);\\n\\n\\n\\n    // Update totals\\n\\n    weiRaised = weiRaised.add(weiAmount);\\n\\n    tokensSold = tokensSold.add(tokenAmount);\\n\\n\\n\\n    assignTokens(receiver, tokenAmount);\\n\\n    // Tell us that the investment was completed successfully\\n\\n    Invested(receiver, weiAmount, tokenAmount, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithSignedAddress(address receiver, uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable validCustomerId(customerId) {\\n\\n    bytes32 hash = sha256(receiver);\\n\\n    require(ecrecover(hash, v, r, s) == signerAddress);\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the receiver.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyOnBehalfWithCustomerId(address receiver, uint128 customerId) public payable validCustomerId(customerId) unsignedBuyAllowed {\\n\\n    investInternal(receiver, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Buys tokens on behalf of an address.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the receiver address.\\n\\n   */\\n\\n  function buyOnBehalf(address receiver) public payable unsignedBuyAllowed {\\n\\n    require(!requireCustomerId); // Crowdsale needs to track participants for thank you email\\n\\n    investInternal(receiver, 0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer and verifies he is allowed to invest.\\n\\n   *\\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithSignedAddress(uint128 customerId, uint8 v, bytes32 r, bytes32 s) public payable {\\n\\n    buyOnBehalfWithSignedAddress(msg.sender, customerId, v, r, s);\\n\\n  }\\n\\n\\n\\n\\n\\n  /**\\n\\n   * Investing function that recognizes the payer.\\n\\n   * \\n\\n   * @param customerId UUIDv4 that identifies this contributor\\n\\n   */\\n\\n  function buyWithCustomerId(uint128 customerId) public payable {\\n\\n    buyOnBehalfWithCustomerId(msg.sender, customerId);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * The basic entry point to participate in the crowdsale process.\\n\\n   *\\n\\n   * Pay for funding, get invested tokens back in the sender address.\\n\\n   */\\n\\n  function buy() public payable {\\n\\n    buyOnBehalf(msg.sender);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    finalized = true;\\n\\n    Finalized();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy do we need to have server-side customer ids for the investments.\\n\\n   *\\n\\n   */\\n\\n  function setRequireCustomerId(bool value) public onlyOwner {\\n\\n    requireCustomerId = value;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Set policy if all investors must be cleared on the server side first.\\n\\n   *\\n\\n   * This is e.g. for the accredited investor clearing.\\n\\n   *\\n\\n   */\\n\\n  function setRequireSignedAddress(bool value, address signer) public onlyOwner {\\n\\n    requiredSignedAddress = value;\\n\\n    signerAddress = signer;\\n\\n    InvestmentPolicyChanged(requireCustomerId, requiredSignedAddress, signerAddress);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Allow addresses to do early participation.\\n\\n   */\\n\\n  function setEarlyParticipantWhitelist(address addr, bool status) public onlyOwner notFinished stopInEmergency {\\n\\n    earlyParticipantWhitelist[addr] = status;\\n\\n    Whitelisted(addr, status);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Internal setter for the multisig wallet\\n\\n   */\\n\\n  function setMultisig(address addr) internal {\\n\\n    require(addr != 0);\\n\\n    multisigWallet = addr;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Crowdfund state machine management.\\n\\n   *\\n\\n   * This function has the timed transition builtin.\\n\\n   * So there is no chance of the variable being stale.\\n\\n   */\\n\\n  function getState() public view returns (State) {\\n\\n    if (finalized) return State.Finalized;\\n\\n    else if (!configured) return State.PendingConfiguration;\\n\\n    else if (now < startsAt) return State.PreFunding;\\n\\n    else if (now <= endsAt && !isCrowdsaleFull()) return State.Funding;\\n\\n    else return State.Success;\\n\\n  }\\n\\n\\n\\n  /** Internal functions that exist to provide inversion of control should they be overriden */\\n\\n\\n\\n  /** Interface for the concrete instance to interact with the token contract in a customizable way */\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal;\\n\\n\\n\\n  /**\\n\\n   *  Determine if the goal was already reached in the current crowdsale\\n\\n   */\\n\\n  function isCrowdsaleFull() internal view returns (bool full);\\n\\n\\n\\n  /**\\n\\n   * Returns any excess wei received\\n\\n   * \\n\\n   * This function can be overriden to provide a different refunding method.\\n\\n   */\\n\\n  function returnExcedent(uint excedent, address receiver) internal {\\n\\n    if (excedent > 0) {\\n\\n      receiver.transfer(excedent);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /** \\n\\n   *  Calculate the amount of tokens that corresponds to the received amount.\\n\\n   *  The wei amount is returned too in case not all of it can be invested.\\n\\n   *\\n\\n   *  Note: When there's an excedent due to rounding error, it should be returned to allow refunding.\\n\\n   *  This is worked around in the current design using an appropriate amount of decimals in the FractionalERC20 standard.\\n\\n   *  The workaround is good enough for most use cases, hence the simplified function signature.\\n\\n   *  @return weiAllowed The amount of wei accepted in this transaction.\\n\\n   *  @return tokenAmount The tokens that are assigned to the receiver in this transaction.\\n\\n   */\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount);\\n\\n\\n\\n  //\\n\\n  // Modifiers\\n\\n  //\\n\\n\\n\\n  modifier inState(State state) {\\n\\n    require(getState() == state);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier unsignedBuyAllowed() {\\n\\n    require(!requiredSignedAddress);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /** Modifier allowing execution only if the crowdsale is currently running.  */\\n\\n  modifier notFinished() {\\n\\n    State current_state = getState();\\n\\n    require(current_state == State.PreFunding || current_state == State.Funding);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier validCustomerId(uint128 customerId) {\\n\\n    require(customerId != 0);  // UUIDv4 sanity check\\n\\n    _;\\n\\n  }\\n\\n}\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n// Simple deployment information store inside contract storage.\\n\\ncontract DeploymentInfo {\\n\\n  uint private deployed_on;\\n\\n\\n\\n  function DeploymentInfo() public {\\n\\n    deployed_on = block.number;\\n\\n  }\\n\\n\\n\\n\\n\\n  function getDeploymentBlock() public view returns (uint) {\\n\\n    return deployed_on;\\n\\n  }\\n\\n}\\n\\n\\n\\n/**\\n\\n * This smart contract code is Copyright 2017 TokenMarket Ltd. For more information see https://tokenmarket.net\\n\\n *\\n\\n * Licensed under the Apache License, version 2.0: https://github.com/TokenMarketNet/ico/blob/master/LICENSE.txt\\n\\n *\\n\\n * Heavily modified by https://www.coinfabrik.com/\\n\\n */\\n\\n\\n\\npragma solidity ^0.4.19;\\n\\n\\n\\n\\n\\n/// @dev Tranche based pricing.\\n\\n///      Implementing \\\"first price\\\" tranches, meaning, that if a buyer's order is\\n\\n///      covering more than one tranche, the price of the lowest tranche will apply\\n\\n///      to the whole order.\\n\\ncontract TokenTranchePricing {\\n\\n\\n\\n  using SafeMath for uint;\\n\\n\\n\\n  /**\\n\\n   * Define pricing schedule using tranches.\\n\\n   */\\n\\n  struct Tranche {\\n\\n      // Amount in tokens when this tranche becomes inactive\\n\\n      uint amount;\\n\\n      // Timestamp interval [start, end)\\n\\n      // Starting timestamp (included in the interval)\\n\\n      uint start;\\n\\n      // Ending timestamp (excluded from the interval)\\n\\n      uint end;\\n\\n      // How many tokens per wei you will get while this tranche is active\\n\\n      uint price;\\n\\n  }\\n\\n  // We define offsets and size for the deserialization of ordered tuples in raw arrays\\n\\n  uint private constant amount_offset = 0;\\n\\n  uint private constant start_offset = 1;\\n\\n  uint private constant end_offset = 2;\\n\\n  uint private constant price_offset = 3;\\n\\n  uint private constant tranche_size = 4;\\n\\n\\n\\n  Tranche[] public tranches;\\n\\n\\n\\n  function getTranchesLength() public view returns (uint) {\\n\\n    return tranches.length;\\n\\n  }\\n\\n  \\n\\n  // The configuration from the constructor was moved to the configurationTokenTranchePricing function.\\n\\n  //\\n\\n  /// @dev Construction, creating a list of tranches\\n\\n  /* @param init_tranches Raw array of ordered tuples: (start amount, start timestamp, end timestamp, price) */\\n\\n  //\\n\\n  function configurationTokenTranchePricing(uint[] init_tranches) internal {\\n\\n    // Need to have tuples, length check\\n\\n    require(init_tranches.length % tranche_size == 0);\\n\\n    // A tranche with amount zero can never be selected and is therefore useless.\\n\\n    // This check and the one inside the loop ensure no tranche can have an amount equal to zero.\\n\\n    require(init_tranches[amount_offset] > 0);\\n\\n\\n\\n    uint input_tranches_length = init_tranches.length.div(tranche_size);\\n\\n    Tranche memory last_tranche;\\n\\n    for (uint i = 0; i < input_tranches_length; i++) {\\n\\n      uint tranche_offset = i.mul(tranche_size);\\n\\n      uint amount = init_tranches[tranche_offset.add(amount_offset)];\\n\\n      uint start = init_tranches[tranche_offset.add(start_offset)];\\n\\n      uint end = init_tranches[tranche_offset.add(end_offset)];\\n\\n      uint price = init_tranches[tranche_offset.add(price_offset)];\\n\\n      // No invalid steps\\n\\n      require(start < end && now < end);\\n\\n      // Bail out when entering unnecessary tranches\\n\\n      // This is preferably checked before deploying contract into any blockchain.\\n\\n      require(i == 0 || (end >= last_tranche.end && amount > last_tranche.amount) ||\\n\\n              (end > last_tranche.end && amount >= last_tranche.amount));\\n\\n\\n\\n      last_tranche = Tranche(amount, start, end, price);\\n\\n      tranches.push(last_tranche);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current tranche or bail out if there is no tranche defined for the current timestamp.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return Returns the struct representing the current tranche\\n\\n  function getCurrentTranche(uint tokensSold) private view returns (Tranche storage) {\\n\\n    for (uint i = 0; i < tranches.length; i++) {\\n\\n      if (tranches[i].start <= now && now < tranches[i].end && tokensSold < tranches[i].amount) {\\n\\n        return tranches[i];\\n\\n      }\\n\\n    }\\n\\n    // No tranche is currently active\\n\\n    revert();\\n\\n  }\\n\\n\\n\\n  /// @dev Get the current price. May revert if there is no tranche currently active.\\n\\n  /// @param tokensSold total amount of tokens sold, for calculating the current tranche\\n\\n  /// @return The current price\\n\\n  function getCurrentPrice(uint tokensSold) internal view returns (uint result) {\\n\\n    return getCurrentTranche(tokensSold).price;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n// This contract has the sole objective of providing a sane concrete instance of the Crowdsale contract.\\n\\ncontract Crowdsale is GenericCrowdsale, LostAndFoundToken, DeploymentInfo, TokenTranchePricing {\\n\\n  uint public sellable_tokens;\\n\\n  uint public initial_tokens;\\n\\n  uint public milieurs_per_eth; \\n\\n\\n\\n  /*\\n\\n   * The constructor for the crowdsale was removed given it didn't receive any arguments nor had any body.\\n\\n   *\\n\\n   * The configuration from the constructor was moved to the configurationCrowdsale function which creates the token contract and also calls the configuration functions from GenericCrowdsale and TokenTranchePricing.\\n\\n   * \\n\\n   *\\n\\n   * @param team_multisig Address of the multisignature wallet of the team that will receive all the funds contributed in the crowdsale.\\n\\n   * @param start Timestamp where the crowdsale will be officially started. It should be greater than the timestamp in which the contract is deployed.\\n\\n   * @param end Timestamp where the crowdsale finishes. No tokens can be sold through this contract after this timestamp.\\n\\n   * @param token_retriever Address that will handle tokens accidentally sent to the token contract. See the LostAndFoundToken and CrowdsaleToken contracts for further details.\\n\\n   */\\n\\n\\n\\n  function configurationCrowdsale(address team_multisig, uint start, uint end, address token_retriever, uint[] init_tranches, uint multisig_supply, uint crowdsale_supply, uint8 token_decimals, uint max_tokens_to_sell) public onlyOwner {\\n\\n\\n\\n      \\n\\n      initial_tokens = multisig_supply;  \\n\\n      token = new CrowdsaleToken(multisig_supply, token_decimals, team_multisig, token_retriever);\\n\\n      // Necessary if assignTokens mints\\n\\n      token.setMintAgent(address(this), true);\\n\\n      // Necessary if finalize is overriden to release the tokens for public trading.\\n\\n      token.setReleaseAgent(address(this));\\n\\n      // Necessary for the execution of buy function and of the subsequent CrowdsaleToken's transfer function. \\n\\n      token.setTransferAgent(address(this), true);\\n\\n      // Crowdsale mints to himself the initial supply\\n\\n      token.mint(address(this), crowdsale_supply);\\n\\n\\n\\n      sellable_tokens = max_tokens_to_sell;\\n\\n\\n\\n      // Configuration functionality for GenericCrowdsale.\\n\\n      configurationGenericCrowdsale(team_multisig, start, end);\\n\\n\\n\\n      // Configuration functionality for TokenTranchePricing.\\n\\n      configurationTokenTranchePricing(init_tranches);\\n\\n  }\\n\\n\\n\\n  //token assignation\\n\\n  function assignTokens(address receiver, uint tokenAmount) internal {\\n\\n    token.transfer(receiver, tokenAmount);\\n\\n  }\\n\\n\\n\\n  //token amount calculation\\n\\n  function calculateTokenAmount(uint weiAmount, address receiver) internal view returns (uint weiAllowed, uint tokenAmount) {\\n\\n    uint tokensPerEth = getCurrentPrice(tokensSold).mul(milieurs_per_eth).div(1000);\\n\\n    uint maxWeiAllowed = sellable_tokens.sub(tokensSold).mul(1 ether).div(tokensPerEth);\\n\\n    weiAllowed = maxWeiAllowed.min256(weiAmount);\\n\\n\\n\\n    require(token.balanceOf(receiver).add(weiAllowed) >= 100);\\n\\n    \\n\\n    if (weiAmount < maxWeiAllowed) {\\n\\n      //Divided by 1000 because eth eth_price_in_eurs is multiplied by 1000\\n\\n      tokenAmount = tokensPerEth.mul(weiAmount).div(1 ether);\\n\\n    }\\n\\n    // With this case we let the crowdsale end even when there are rounding errors due to the tokens to wei ratio\\n\\n    else {\\n\\n      tokenAmount = sellable_tokens.sub(tokensSold);\\n\\n    }\\n\\n  }\\n\\n\\n\\n  //TODO: implement to control funding state criterion\\n\\n  function isCrowdsaleFull() internal view returns (bool full) {\\n\\n    return tokensSold >= sellable_tokens;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * Finalize a successful crowdsale.\\n\\n   *\\n\\n   * The owner can trigger post-crowdsale actions, like releasing the tokens.\\n\\n   * Note that by default tokens are not in a released state.\\n\\n   */\\n\\n  function finalize() public inState(State.Success) onlyOwner stopInEmergency {\\n\\n    //Tokens sold + bounties represent 75% of the total, the other 25% goes ti the multisig to the partners and to regulate market \\n\\n    uint sold = tokensSold.add(  initial_tokens);\\n\\n    uint toShare = sold.mul(25).div(75).mul(10**uint(token.decimals()));\\n\\n    token.setMintAgent(address(this), true);\\n\\n    token.mint(multisigWallet, toShare);\\n\\n    token.setMintAgent(address(this), false);\\n\\n    token.releaseTokenTransfer();\\n\\n    token.burn(token.balanceOf(address(this)));\\n\\n    super.finalize();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * This function decides who handles lost tokens.\\n\\n   * Do note that this function is NOT meant to be used in a token refund mecahnism.\\n\\n   * Its sole purpose is determining who can move around ERC20 tokens accidentally sent to this contract.\\n\\n   */\\n\\n  function getLostAndFoundMaster() internal view returns (address) {\\n\\n    return owner;\\n\\n\\n\\n  }\\n\\n\\n\\n  // These two setters are present only to correct timestamps if they are off from their target date by more than, say, a day\\n\\n  function setStartingTime(uint startingTime) public onlyOwner inState(State.PreFunding) {\\n\\n      require(startingTime > now && startingTime < endsAt);\\n\\n      startsAt = startingTime;\\n\\n  }\\n\\n\\n\\n  function setEndingTime(uint endingTime) public onlyOwner notFinished {\\n\\n       require(endingTime > now && endingTime > startsAt);\\n\\n       endsAt = endingTime;\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n  function updateEursPerEth (uint milieurs_amount) public onlyOwner {\\n\\n    require(milieurs_amount >= 100);\\n\\n    milieurs_per_eth = milieurs_amount;\\n\\n  }\\n\\n}\",\"keccak256\":\"0x77a4b14b5eff26dba56f060a11f4a2e7550d057d390e14aef70e0988fe82e7db\"}},\"version\":1}"
      },
      "UpgradeAgent": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "UpgradeableToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      }
    }
  },
  "errors": [
    {
      "component": "general",
      "formattedMessage": "reentrancy.sol:1247:3: Warning: Function state mutability can be restricted to pure\n  function canUpgrade() public view returns(bool) {\n  ^\nSpanning multiple lines.\n",
      "message": "Function state mutability can be restricted to pure",
      "severity": "warning",
      "type": "Warning"
    }
  ],
  "sources": {
    "reentrancy.sol": {
      "ast": {
        "absolutePath": "reentrancy.sol",
        "exportedSymbols": {
          "Burnable": [
            351
          ],
          "Crowdsale": [
            2727
          ],
          "CrowdsaleToken": [
            1396
          ],
          "DeploymentInfo": [
            2113
          ],
          "EIP20Token": [
            336
          ],
          "GenericCrowdsale": [
            2092
          ],
          "Haltable": [
            103
          ],
          "LostAndFoundToken": [
            1172
          ],
          "Mintable": [
            366
          ],
          "MintableToken": [
            1294
          ],
          "Ownable": [
            47
          ],
          "ReleasableToken": [
            889
          ],
          "SafeMath": [
            265
          ],
          "StandardToken": [
            752
          ],
          "TokenTranchePricing": [
            2360
          ],
          "UpgradeAgent": [
            909
          ],
          "UpgradeableToken": [
            1140
          ]
        },
        "id": 2728,
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "0:24:0"
          },
          {
            "id": 2,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "84:24:0"
          },
          {
            "id": 3,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "226:24:0"
          },
          {
            "id": 4,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "411:24:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": "@title Ownable\n@dev The Ownable contract has an owner address, and provides basic authorization control \nfunctions, this simplifies the implementation of \"user permissions\". ",
            "fullyImplemented": true,
            "id": 47,
            "linearizedBaseContracts": [
              47
            ],
            "name": "Ownable",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 6,
                "name": "owner",
                "nodeType": "VariableDeclaration",
                "scope": 47,
                "src": "784:20:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 5,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "784:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 14,
                  "nodeType": "Block",
                  "src": "962:31:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 12,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 9,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6,
                          "src": "969:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 10,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2739,
                            "src": "977:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 11,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "977:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "969:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 13,
                      "nodeType": "ExpressionStatement",
                      "src": "969:18:0"
                    }
                  ]
                },
                "id": 15,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "Ownable",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 7,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "950:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 8,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "962:0:0"
                },
                "scope": 47,
                "src": "934:59:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 25,
                  "nodeType": "Block",
                  "src": "1102:49:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 21,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 18,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2739,
                                "src": "1117:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 19,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "1117:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 20,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 6,
                              "src": "1131:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "1117:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 17,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "1109:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 22,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1109:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 23,
                      "nodeType": "ExpressionStatement",
                      "src": "1109:28:0"
                    },
                    {
                      "id": 24,
                      "nodeType": "PlaceholderStatement",
                      "src": "1144:1:0"
                    }
                  ]
                },
                "id": 26,
                "name": "onlyOwner",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 16,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1099:2:0"
                },
                "src": "1081:70:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 45,
                  "nodeType": "Block",
                  "src": "1383:67:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 38,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 34,
                              "name": "newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 28,
                              "src": "1398:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 36,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "1418:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 35,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "1410:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 37,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1410:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "1398:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 33,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "1390:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 39,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1390:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 40,
                      "nodeType": "ExpressionStatement",
                      "src": "1390:31:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 43,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 41,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 6,
                          "src": "1428:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 42,
                          "name": "newOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 28,
                          "src": "1436:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1428:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 44,
                      "nodeType": "ExpressionStatement",
                      "src": "1428:16:0"
                    }
                  ]
                },
                "id": 46,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 31,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 30,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "1366:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "1366:9:0"
                  }
                ],
                "name": "transferOwnership",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 29,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 28,
                      "name": "newOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 46,
                      "src": "1348:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 27,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1348:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "1347:18:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 32,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1383:0:0"
                },
                "scope": 47,
                "src": "1321:129:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 2728,
            "src": "762:693:0"
          },
          {
            "baseContracts": [
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 48,
                  "name": "Ownable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 47,
                  "src": "1643:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Ownable_$47",
                    "typeString": "contract Ownable"
                  }
                },
                "id": 49,
                "nodeType": "InheritanceSpecifier",
                "src": "1643:7:0"
              }
            ],
            "contractDependencies": [
              47
            ],
            "contractKind": "contract",
            "documentation": "Abstract contract that allows children to implement an\nemergency stop mechanism. Differs from Pausable by causing a throw when in halt mode.\n\n ",
            "fullyImplemented": true,
            "id": 103,
            "linearizedBaseContracts": [
              103,
              47
            ],
            "name": "Haltable",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 51,
                "name": "halted",
                "nodeType": "VariableDeclaration",
                "scope": 103,
                "src": "1656:18:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 50,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "1656:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "anonymous": false,
                "id": 55,
                "name": "Halted",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 54,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 53,
                      "indexed": false,
                      "name": "halted",
                      "nodeType": "VariableDeclaration",
                      "scope": 55,
                      "src": "1694:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 52,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "1694:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "1693:13:0"
                },
                "src": "1681:26:0"
              },
              {
                "body": {
                  "id": 63,
                  "nodeType": "Block",
                  "src": "1738:37:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 59,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "1753:7:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 58,
                              "name": "halted",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 51,
                              "src": "1754:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 57,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "1745:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 60,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1745:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 61,
                      "nodeType": "ExpressionStatement",
                      "src": "1745:16:0"
                    },
                    {
                      "id": 62,
                      "nodeType": "PlaceholderStatement",
                      "src": "1768:1:0"
                    }
                  ]
                },
                "id": 64,
                "name": "stopInEmergency",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 56,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1738:0:0"
                },
                "src": "1713:62:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 71,
                  "nodeType": "Block",
                  "src": "1806:36:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 67,
                            "name": "halted",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 51,
                            "src": "1821:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 66,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "1813:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 68,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1813:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 69,
                      "nodeType": "ExpressionStatement",
                      "src": "1813:15:0"
                    },
                    {
                      "id": 70,
                      "nodeType": "PlaceholderStatement",
                      "src": "1835:1:0"
                    }
                  ]
                },
                "id": 72,
                "name": "onlyInEmergency",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 65,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1806:0:0"
                },
                "src": "1781:61:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 85,
                  "nodeType": "Block",
                  "src": "1946:45:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 79,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 77,
                          "name": "halted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 51,
                          "src": "1953:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 78,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1962:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "1953:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 80,
                      "nodeType": "ExpressionStatement",
                      "src": "1953:13:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 82,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "1980:4:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 81,
                          "name": "Halted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55,
                          "src": "1973:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_bool_$returns$__$",
                            "typeString": "function (bool)"
                          }
                        },
                        "id": 83,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1973:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 84,
                      "nodeType": "ExpressionStatement",
                      "src": "1973:12:0"
                    }
                  ]
                },
                "id": 86,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 75,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 74,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "1936:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "1936:9:0"
                  }
                ],
                "name": "halt",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 73,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1924:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 76,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1946:0:0"
                },
                "scope": 103,
                "src": "1911:80:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 101,
                  "nodeType": "Block",
                  "src": "2121:47:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 95,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 93,
                          "name": "halted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 51,
                          "src": "2128:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 94,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "2137:5:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "2128:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 96,
                      "nodeType": "ExpressionStatement",
                      "src": "2128:14:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "66616c7365",
                            "id": 98,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "2156:5:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 97,
                          "name": "Halted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 55,
                          "src": "2149:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_bool_$returns$__$",
                            "typeString": "function (bool)"
                          }
                        },
                        "id": 99,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2149:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 100,
                      "nodeType": "ExpressionStatement",
                      "src": "2149:13:0"
                    }
                  ]
                },
                "id": 102,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 89,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 88,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "2095:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "2095:9:0"
                  },
                  {
                    "arguments": [],
                    "id": 91,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 90,
                      "name": "onlyInEmergency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 72,
                      "src": "2105:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "2105:15:0"
                  }
                ],
                "name": "unhalt",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 87,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2083:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 92,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2121:0:0"
                },
                "scope": 103,
                "src": "2068:100:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              }
            ],
            "scope": 2728,
            "src": "1622:549:0"
          },
          {
            "id": 104,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "2173:24:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "library",
            "documentation": "Math operations with safety checks",
            "fullyImplemented": true,
            "id": 265,
            "linearizedBaseContracts": [
              265
            ],
            "name": "SafeMath",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 133,
                  "nodeType": "Block",
                  "src": "2457:77:0",
                  "statements": [
                    {
                      "assignments": [
                        114
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 114,
                          "name": "c",
                          "nodeType": "VariableDeclaration",
                          "scope": 134,
                          "src": "2464:6:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 113,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "2464:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 118,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 117,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 115,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 106,
                          "src": "2473:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "*",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 116,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 108,
                          "src": "2477:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2473:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2464:14:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 128,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 122,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 120,
                                "name": "a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 106,
                                "src": "2492:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 121,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "2497:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "2492:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 127,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 125,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 123,
                                  "name": "c",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 114,
                                  "src": "2502:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "/",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 124,
                                  "name": "a",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 106,
                                  "src": "2506:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "2502:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 126,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 108,
                                "src": "2511:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "2502:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "2492:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 119,
                          "name": "assert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2730,
                          "src": "2485:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 129,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2485:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 130,
                      "nodeType": "ExpressionStatement",
                      "src": "2485:28:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 131,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 114,
                        "src": "2527:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 112,
                      "id": 132,
                      "nodeType": "Return",
                      "src": "2520:8:0"
                    }
                  ]
                },
                "id": 134,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "mul",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 109,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 106,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 134,
                      "src": "2412:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 105,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2412:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 108,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 134,
                      "src": "2420:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 107,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2420:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2411:16:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 112,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 111,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 134,
                      "src": "2451:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 110,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2451:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2450:6:0"
                },
                "scope": 265,
                "src": "2399:135:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 151,
                  "nodeType": "Block",
                  "src": "2598:200:0",
                  "statements": [
                    {
                      "assignments": [
                        144
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 144,
                          "name": "c",
                          "nodeType": "VariableDeclaration",
                          "scope": 152,
                          "src": "2680:6:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 143,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "2680:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 148,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 147,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 145,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 136,
                          "src": "2689:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 146,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 138,
                          "src": "2693:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2689:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2680:14:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 149,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 144,
                        "src": "2791:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 142,
                      "id": 150,
                      "nodeType": "Return",
                      "src": "2784:8:0"
                    }
                  ]
                },
                "id": 152,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "div",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 139,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 136,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 152,
                      "src": "2553:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 135,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2553:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 138,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 152,
                      "src": "2561:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 137,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2561:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2552:16:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 142,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 141,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 152,
                      "src": "2592:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 140,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2592:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2591:6:0"
                },
                "scope": 265,
                "src": "2540:258:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 171,
                  "nodeType": "Block",
                  "src": "2862:46:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 164,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 162,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 156,
                              "src": "2876:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 163,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 154,
                              "src": "2881:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "2876:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 161,
                          "name": "assert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2730,
                          "src": "2869:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 165,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2869:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 166,
                      "nodeType": "ExpressionStatement",
                      "src": "2869:14:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 169,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 167,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 154,
                          "src": "2897:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 168,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 156,
                          "src": "2901:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2897:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 160,
                      "id": 170,
                      "nodeType": "Return",
                      "src": "2890:12:0"
                    }
                  ]
                },
                "id": 172,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "sub",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 157,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 154,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 172,
                      "src": "2817:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 153,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2817:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 156,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 172,
                      "src": "2825:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 155,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2825:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2816:16:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 160,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 159,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 172,
                      "src": "2856:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 158,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2856:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2855:6:0"
                },
                "scope": 265,
                "src": "2804:104:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 195,
                  "nodeType": "Block",
                  "src": "2972:63:0",
                  "statements": [
                    {
                      "assignments": [
                        182
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 182,
                          "name": "c",
                          "nodeType": "VariableDeclaration",
                          "scope": 196,
                          "src": "2979:6:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 181,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "2979:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 186,
                      "initialValue": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 185,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 183,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 174,
                          "src": "2988:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "+",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 184,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 176,
                          "src": "2992:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "2988:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2979:14:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 190,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 188,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 182,
                              "src": "3007:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 189,
                              "name": "a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 174,
                              "src": "3012:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3007:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 187,
                          "name": "assert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2730,
                          "src": "3000:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 191,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3000:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 192,
                      "nodeType": "ExpressionStatement",
                      "src": "3000:14:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 193,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 182,
                        "src": "3028:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 180,
                      "id": 194,
                      "nodeType": "Return",
                      "src": "3021:8:0"
                    }
                  ]
                },
                "id": 196,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "add",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 177,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 174,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 196,
                      "src": "2927:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 173,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2927:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 176,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 196,
                      "src": "2935:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 175,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2935:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2926:16:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 180,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 179,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 196,
                      "src": "2966:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 178,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "2966:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2965:6:0"
                },
                "scope": 265,
                "src": "2914:121:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 212,
                  "nodeType": "Block",
                  "src": "3107:34:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 207,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 205,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 198,
                            "src": "3121:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 206,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 200,
                            "src": "3126:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "3121:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseExpression": {
                          "argumentTypes": null,
                          "id": 209,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 200,
                          "src": "3134:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "id": 210,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "Conditional",
                        "src": "3121:14:0",
                        "trueExpression": {
                          "argumentTypes": null,
                          "id": 208,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 198,
                          "src": "3130:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "functionReturnParameters": 204,
                      "id": 211,
                      "nodeType": "Return",
                      "src": "3114:21:0"
                    }
                  ]
                },
                "id": 213,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "max64",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 201,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 198,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 213,
                      "src": "3056:8:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 197,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3056:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 200,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 213,
                      "src": "3066:8:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 199,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3066:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3055:20:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 204,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 203,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 213,
                      "src": "3099:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 202,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3099:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3098:8:0"
                },
                "scope": 265,
                "src": "3041:100:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 229,
                  "nodeType": "Block",
                  "src": "3213:33:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          },
                          "id": 224,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 222,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 215,
                            "src": "3227:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 223,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 217,
                            "src": "3231:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint64",
                              "typeString": "uint64"
                            }
                          },
                          "src": "3227:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseExpression": {
                          "argumentTypes": null,
                          "id": 226,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 217,
                          "src": "3239:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "id": 227,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "Conditional",
                        "src": "3227:13:0",
                        "trueExpression": {
                          "argumentTypes": null,
                          "id": 225,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 215,
                          "src": "3235:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint64",
                            "typeString": "uint64"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "functionReturnParameters": 221,
                      "id": 228,
                      "nodeType": "Return",
                      "src": "3220:20:0"
                    }
                  ]
                },
                "id": 230,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "min64",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 218,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 215,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 230,
                      "src": "3162:8:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 214,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3162:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 217,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 230,
                      "src": "3172:8:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 216,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3172:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3161:20:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 221,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 220,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 230,
                      "src": "3205:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint64",
                        "typeString": "uint64"
                      },
                      "typeName": {
                        "id": 219,
                        "name": "uint64",
                        "nodeType": "ElementaryTypeName",
                        "src": "3205:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint64",
                          "typeString": "uint64"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3204:8:0"
                },
                "scope": 265,
                "src": "3147:99:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 246,
                  "nodeType": "Block",
                  "src": "3313:34:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 241,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 239,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 232,
                            "src": "3327:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": ">=",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 240,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 234,
                            "src": "3332:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3327:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseExpression": {
                          "argumentTypes": null,
                          "id": 243,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 234,
                          "src": "3340:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 244,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "Conditional",
                        "src": "3327:14:0",
                        "trueExpression": {
                          "argumentTypes": null,
                          "id": 242,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 232,
                          "src": "3336:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 238,
                      "id": 245,
                      "nodeType": "Return",
                      "src": "3320:21:0"
                    }
                  ]
                },
                "id": 247,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "max256",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 235,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 232,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 247,
                      "src": "3268:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 231,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "3268:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 234,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 247,
                      "src": "3276:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 233,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "3276:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3267:16:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 238,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 237,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 247,
                      "src": "3307:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 236,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "3307:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3306:6:0"
                },
                "scope": 265,
                "src": "3252:95:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 263,
                  "nodeType": "Block",
                  "src": "3414:33:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 258,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 256,
                            "name": "a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 249,
                            "src": "3428:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "<",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 257,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 251,
                            "src": "3432:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3428:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseExpression": {
                          "argumentTypes": null,
                          "id": 260,
                          "name": "b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 251,
                          "src": "3440:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 261,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "Conditional",
                        "src": "3428:13:0",
                        "trueExpression": {
                          "argumentTypes": null,
                          "id": 259,
                          "name": "a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 249,
                          "src": "3436:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 255,
                      "id": 262,
                      "nodeType": "Return",
                      "src": "3421:20:0"
                    }
                  ]
                },
                "id": 264,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "min256",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 252,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 249,
                      "name": "a",
                      "nodeType": "VariableDeclaration",
                      "scope": 264,
                      "src": "3369:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 248,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "3369:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 251,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 264,
                      "src": "3377:6:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 250,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "3377:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3368:16:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 255,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 254,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 264,
                      "src": "3408:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 253,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "3408:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3407:6:0"
                },
                "scope": 265,
                "src": "3353:94:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 2728,
            "src": "2377:1073:0"
          },
          {
            "id": 266,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "3454:24:0"
          },
          {
            "id": 267,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "3596:24:0"
          },
          {
            "id": 268,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "3738:24:0"
          },
          {
            "id": 269,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "3892:24:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": "Interface for the standard token.\nBased on https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md",
            "fullyImplemented": false,
            "id": 336,
            "linearizedBaseContracts": [
              336
            ],
            "name": "EIP20Token",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": null,
                "id": 274,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "totalSupply",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 270,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "4103:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 273,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 272,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 274,
                      "src": "4127:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 271,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4127:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4126:9:0"
                },
                "scope": 336,
                "src": "4083:53:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "id": 281,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "balanceOf",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 277,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 276,
                      "name": "who",
                      "nodeType": "VariableDeclaration",
                      "scope": 281,
                      "src": "4159:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 275,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4159:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4158:13:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 280,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 279,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 281,
                      "src": "4193:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 278,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4193:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4192:9:0"
                },
                "scope": 336,
                "src": "4140:62:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "id": 290,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 286,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 283,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 290,
                      "src": "4224:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 282,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4224:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 285,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 290,
                      "src": "4236:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 284,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4236:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4223:27:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 289,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 288,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 290,
                      "src": "4267:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 287,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4267:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4266:14:0"
                },
                "scope": 336,
                "src": "4206:75:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "id": 301,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transferFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 297,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 292,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 301,
                      "src": "4307:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 291,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4307:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 294,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 301,
                      "src": "4321:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 293,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4321:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 296,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 301,
                      "src": "4333:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 295,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4333:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4306:41:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 300,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 299,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 301,
                      "src": "4364:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 298,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4364:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4363:14:0"
                },
                "scope": 336,
                "src": "4285:93:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "id": 310,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "approve",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 306,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 303,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 310,
                      "src": "4399:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 302,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4399:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 305,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 310,
                      "src": "4416:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 304,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4416:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4398:32:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 309,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 308,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 310,
                      "src": "4447:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 307,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4447:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4446:14:0"
                },
                "scope": 336,
                "src": "4382:79:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "id": 319,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "allowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 315,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 312,
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 319,
                      "src": "4484:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 311,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4484:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 314,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 319,
                      "src": "4499:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 313,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4499:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4483:32:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 318,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 317,
                      "name": "remaining",
                      "nodeType": "VariableDeclaration",
                      "scope": 319,
                      "src": "4537:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 316,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4537:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4536:19:0"
                },
                "scope": 336,
                "src": "4465:91:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "anonymous": false,
                "id": 327,
                "name": "Transfer",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 326,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 321,
                      "indexed": true,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 327,
                      "src": "4575:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 320,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4575:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 323,
                      "indexed": true,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 327,
                      "src": "4597:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 322,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4597:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 325,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 327,
                      "src": "4617:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 324,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4617:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4574:57:0"
                },
                "src": "4560:72:0"
              },
              {
                "anonymous": false,
                "id": 335,
                "name": "Approval",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 334,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 329,
                      "indexed": true,
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 335,
                      "src": "4651:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 328,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4651:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 331,
                      "indexed": true,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 335,
                      "src": "4674:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 330,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4674:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 333,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 335,
                      "src": "4699:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 332,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4699:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4650:63:0"
                },
                "src": "4636:78:0"
              }
            ],
            "scope": 2728,
            "src": "4056:887:0"
          },
          {
            "id": 337,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "4945:24:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": false,
            "id": 351,
            "linearizedBaseContracts": [
              351
            ],
            "name": "Burnable",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": null,
                "id": 344,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "burnTokens",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 342,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 339,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 344,
                      "src": "5194:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 338,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5194:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 341,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 344,
                      "src": "5211:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 340,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "5211:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5193:29:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 343,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "5231:0:0"
                },
                "scope": 351,
                "src": "5174:58:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "anonymous": false,
                "id": 350,
                "name": "Burned",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 349,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 346,
                      "indexed": false,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 350,
                      "src": "5249:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 345,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5249:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 348,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 350,
                      "src": "5266:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 347,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "5266:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5248:29:0"
                },
                "src": "5236:42:0"
              }
            ],
            "scope": 2728,
            "src": "5006:275:0"
          },
          {
            "id": 352,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "5283:24:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": "Internal interface for the minting of tokens.",
            "fullyImplemented": false,
            "id": 366,
            "linearizedBaseContracts": [
              366
            ],
            "name": "Mintable",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": null,
                "id": 359,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "mintInternal",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 357,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 354,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 359,
                      "src": "5574:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 353,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5574:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 356,
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 359,
                      "src": "5592:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 355,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "5592:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5573:31:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 358,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "5613:0:0"
                },
                "scope": 366,
                "src": "5552:62:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "anonymous": false,
                "id": 365,
                "name": "Minted",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 364,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 361,
                      "indexed": false,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 365,
                      "src": "5708:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 360,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5708:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 363,
                      "indexed": false,
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 365,
                      "src": "5726:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 362,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "5726:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5707:31:0"
                },
                "src": "5695:44:0"
              }
            ],
            "scope": 2728,
            "src": "5429:313:0"
          },
          {
            "baseContracts": [
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 367,
                  "name": "EIP20Token",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 336,
                  "src": "5895:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_EIP20Token_$336",
                    "typeString": "contract EIP20Token"
                  }
                },
                "id": 368,
                "nodeType": "InheritanceSpecifier",
                "src": "5895:10:0"
              },
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 369,
                  "name": "Burnable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 351,
                  "src": "5907:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Burnable_$351",
                    "typeString": "contract Burnable"
                  }
                },
                "id": 370,
                "nodeType": "InheritanceSpecifier",
                "src": "5907:8:0"
              },
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 371,
                  "name": "Mintable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 366,
                  "src": "5917:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Mintable_$366",
                    "typeString": "contract Mintable"
                  }
                },
                "id": 372,
                "nodeType": "InheritanceSpecifier",
                "src": "5917:8:0"
              }
            ],
            "contractDependencies": [
              366,
              336,
              351
            ],
            "contractKind": "contract",
            "documentation": "@title Standard token\n@dev Basic implementation of the EIP20 standard token (also known as ERC20 token).",
            "fullyImplemented": true,
            "id": 752,
            "linearizedBaseContracts": [
              752,
              366,
              351,
              336
            ],
            "name": "StandardToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 375,
                "libraryName": {
                  "contractScope": null,
                  "id": 373,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 265,
                  "src": "5937:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$265",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "5931:24:0",
                "typeName": {
                  "id": 374,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "5950:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "constant": false,
                "id": 377,
                "name": "total_supply",
                "nodeType": "VariableDeclaration",
                "scope": 752,
                "src": "5961:25:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 376,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "5961:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 381,
                "name": "balances",
                "nodeType": "VariableDeclaration",
                "scope": 752,
                "src": "5991:41:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 380,
                  "keyType": {
                    "id": 378,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5999:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "5991:24:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 379,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "6010:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 387,
                "name": "allowed",
                "nodeType": "VariableDeclaration",
                "scope": 752,
                "src": "6037:61:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                  "typeString": "mapping(address => mapping(address => uint256))"
                },
                "typeName": {
                  "id": 386,
                  "keyType": {
                    "id": 382,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "6045:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "6037:45:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "valueType": {
                    "id": 385,
                    "keyType": {
                      "id": 383,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "6065:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "6056:25:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 384,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "6076:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 394,
                  "nodeType": "Block",
                  "src": "6157:32:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 392,
                        "name": "total_supply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 377,
                        "src": "6171:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 391,
                      "id": 393,
                      "nodeType": "Return",
                      "src": "6164:19:0"
                    }
                  ]
                },
                "id": 395,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "totalSupply",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 388,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "6127:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 391,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 390,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 395,
                      "src": "6151:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 389,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "6151:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6150:6:0"
                },
                "scope": 752,
                "src": "6107:82:0",
                "stateMutability": "view",
                "superFunction": 274,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 437,
                  "nodeType": "Block",
                  "src": "6424:168:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 415,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 404,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "6431:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 407,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 405,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "6440:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 406,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "6440:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "6431:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 413,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 399,
                              "src": "6479:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 408,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 381,
                                "src": "6454:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 411,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 409,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2739,
                                  "src": "6463:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 410,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "6463:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6454:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 412,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 172,
                            "src": "6454:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 414,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6454:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6431:54:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 416,
                      "nodeType": "ExpressionStatement",
                      "src": "6431:54:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 426,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 417,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "6492:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 419,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 418,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 397,
                            "src": "6501:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "6492:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 424,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 399,
                              "src": "6524:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 420,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 381,
                                "src": "6507:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 422,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 421,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 397,
                                "src": "6516:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6507:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 423,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 196,
                            "src": "6507:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 425,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6507:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6492:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 427,
                      "nodeType": "ExpressionStatement",
                      "src": "6492:38:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 429,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "6546:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 430,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "6546:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 431,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 397,
                            "src": "6558:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 432,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 399,
                            "src": "6562:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 428,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 327,
                          "src": "6537:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 433,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6537:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 434,
                      "nodeType": "ExpressionStatement",
                      "src": "6537:31:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 435,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6582:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 403,
                      "id": 436,
                      "nodeType": "Return",
                      "src": "6575:11:0"
                    }
                  ]
                },
                "id": 438,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 400,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 397,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 438,
                      "src": "6370:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 396,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6370:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 399,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 438,
                      "src": "6382:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 398,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "6382:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6369:24:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 403,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 402,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 438,
                      "src": "6410:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 401,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "6410:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6409:14:0"
                },
                "scope": 752,
                "src": "6352:240:0",
                "stateMutability": "nonpayable",
                "superFunction": 290,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 449,
                  "nodeType": "Block",
                  "src": "6877:37:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 445,
                          "name": "balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 381,
                          "src": "6891:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 447,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 446,
                          "name": "account",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 440,
                          "src": "6900:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "6891:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 444,
                      "id": 448,
                      "nodeType": "Return",
                      "src": "6884:24:0"
                    }
                  ]
                },
                "id": 450,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "balanceOf",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 441,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 440,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 450,
                      "src": "6825:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 439,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6825:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6824:17:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 444,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 443,
                      "name": "balance",
                      "nodeType": "VariableDeclaration",
                      "scope": 450,
                      "src": "6863:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 442,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "6863:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6862:14:0"
                },
                "scope": 752,
                "src": "6806:108:0",
                "stateMutability": "view",
                "superFunction": 281,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 512,
                  "nodeType": "Block",
                  "src": "7279:492:0",
                  "statements": [
                    {
                      "assignments": [
                        462
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 462,
                          "name": "allowance",
                          "nodeType": "VariableDeclaration",
                          "scope": 513,
                          "src": "7286:14:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 461,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "7286:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 469,
                      "initialValue": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 463,
                            "name": "allowed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 387,
                            "src": "7303:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                              "typeString": "mapping(address => mapping(address => uint256))"
                            }
                          },
                          "id": 465,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 464,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 452,
                            "src": "7311:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7303:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 468,
                        "indexExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 466,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2739,
                            "src": "7317:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 467,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "7317:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7303:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "7286:42:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 479,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 470,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "7573:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 472,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 471,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 452,
                            "src": "7582:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "7573:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 477,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 456,
                              "src": "7609:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 473,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 381,
                                "src": "7590:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 475,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 474,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 452,
                                "src": "7599:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7590:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 476,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 172,
                            "src": "7590:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 478,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7590:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7573:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 480,
                      "nodeType": "ExpressionStatement",
                      "src": "7573:42:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 490,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 481,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "7622:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 483,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 482,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 454,
                            "src": "7631:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "7622:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 488,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 456,
                              "src": "7654:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 484,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 381,
                                "src": "7637:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 486,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 485,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 454,
                                "src": "7646:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "7637:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 487,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 196,
                            "src": "7637:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 489,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7637:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7622:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 491,
                      "nodeType": "ExpressionStatement",
                      "src": "7622:38:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 502,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 492,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 387,
                              "src": "7667:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 496,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 493,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 452,
                              "src": "7675:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7667:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 497,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 494,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "7681:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 495,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "7681:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "7667:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 500,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 456,
                              "src": "7709:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 498,
                              "name": "allowance",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 462,
                              "src": "7695:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 499,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 172,
                            "src": "7695:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 501,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "7695:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7667:48:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 503,
                      "nodeType": "ExpressionStatement",
                      "src": "7667:48:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 505,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 452,
                            "src": "7731:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 506,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 454,
                            "src": "7737:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 507,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 456,
                            "src": "7741:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 504,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 327,
                          "src": "7722:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 508,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7722:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 509,
                      "nodeType": "ExpressionStatement",
                      "src": "7722:25:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 510,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7761:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 460,
                      "id": 511,
                      "nodeType": "Return",
                      "src": "7754:11:0"
                    }
                  ]
                },
                "id": 513,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transferFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 457,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 452,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 513,
                      "src": "7211:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 451,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7211:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 454,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 513,
                      "src": "7225:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 453,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7225:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 456,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 513,
                      "src": "7237:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 455,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "7237:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7210:38:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 460,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 459,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 513,
                      "src": "7265:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 458,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "7265:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7264:14:0"
                },
                "scope": 752,
                "src": "7189:582:0",
                "stateMutability": "nonpayable",
                "superFunction": 301,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 555,
                  "nodeType": "Block",
                  "src": "8083:469:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 534,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 525,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 523,
                                "name": "value",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 517,
                                "src": "8392:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 524,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8401:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "8392:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 533,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 526,
                                    "name": "allowed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 387,
                                    "src": "8406:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(address => uint256))"
                                    }
                                  },
                                  "id": 529,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 527,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2739,
                                      "src": "8414:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 528,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "8414:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "8406:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 531,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 530,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 515,
                                  "src": "8426:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "8406:28:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 532,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "8438:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "8406:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "8392:47:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 522,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "8383:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 535,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8383:57:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 536,
                      "nodeType": "ExpressionStatement",
                      "src": "8383:57:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 544,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 537,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 387,
                              "src": "8449:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 541,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 538,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2739,
                                "src": "8457:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 539,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "8457:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8449:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 542,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 540,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 515,
                            "src": "8469:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "8449:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 543,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 517,
                          "src": "8480:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8449:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 545,
                      "nodeType": "ExpressionStatement",
                      "src": "8449:36:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 547,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "8501:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 548,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "8501:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 549,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 515,
                            "src": "8513:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 550,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 517,
                            "src": "8522:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 546,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 335,
                          "src": "8492:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 551,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8492:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 552,
                      "nodeType": "ExpressionStatement",
                      "src": "8492:36:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 553,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8542:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 521,
                      "id": 554,
                      "nodeType": "Return",
                      "src": "8535:11:0"
                    }
                  ]
                },
                "id": 556,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "approve",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 518,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 515,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 556,
                      "src": "8024:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 514,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "8024:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 517,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 556,
                      "src": "8041:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 516,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "8041:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8023:29:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 521,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 520,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 556,
                      "src": "8069:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 519,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "8069:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8068:14:0"
                },
                "scope": 752,
                "src": "8007:545:0",
                "stateMutability": "nonpayable",
                "superFunction": 310,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 571,
                  "nodeType": "Block",
                  "src": "8963:45:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 565,
                            "name": "allowed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 387,
                            "src": "8977:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                              "typeString": "mapping(address => mapping(address => uint256))"
                            }
                          },
                          "id": 567,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 566,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 558,
                            "src": "8985:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "8977:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 569,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 568,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 560,
                          "src": "8994:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "8977:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 564,
                      "id": 570,
                      "nodeType": "Return",
                      "src": "8970:32:0"
                    }
                  ]
                },
                "id": 572,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "allowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 561,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 558,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 572,
                      "src": "8892:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 557,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "8892:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 560,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 572,
                      "src": "8909:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 559,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "8909:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8891:34:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 564,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 563,
                      "name": "remaining",
                      "nodeType": "VariableDeclaration",
                      "scope": 572,
                      "src": "8947:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 562,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "8947:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8946:16:0"
                },
                "scope": 752,
                "src": "8873:135:0",
                "stateMutability": "view",
                "superFunction": 319,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 616,
                  "nodeType": "Block",
                  "src": "9254:211:0",
                  "statements": [
                    {
                      "assignments": [
                        582
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 582,
                          "name": "oldValue",
                          "nodeType": "VariableDeclaration",
                          "scope": 617,
                          "src": "9263:13:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 581,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "9263:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 589,
                      "initialValue": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 583,
                            "name": "allowed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 387,
                            "src": "9279:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                              "typeString": "mapping(address => mapping(address => uint256))"
                            }
                          },
                          "id": 586,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 584,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "9287:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 585,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "9287:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9279:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 588,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 587,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 574,
                          "src": "9299:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "9279:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "9263:44:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 600,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 590,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 387,
                              "src": "9316:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 594,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 591,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2739,
                                "src": "9324:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 592,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "9324:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9316:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 595,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 593,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 574,
                            "src": "9336:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "9316:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 598,
                              "name": "addedValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 576,
                              "src": "9360:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 596,
                              "name": "oldValue",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 582,
                              "src": "9347:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 597,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 196,
                            "src": "9347:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 599,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "9347:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9316:55:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 601,
                      "nodeType": "ExpressionStatement",
                      "src": "9316:55:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 603,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "9389:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 604,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "9389:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 605,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 574,
                            "src": "9401:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 606,
                                "name": "allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 387,
                                "src": "9410:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 609,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 607,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2739,
                                  "src": "9418:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 608,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "9418:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9410:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 611,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 610,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 574,
                              "src": "9430:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9410:28:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 602,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 335,
                          "src": "9380:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 612,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9380:59:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 613,
                      "nodeType": "ExpressionStatement",
                      "src": "9380:59:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 614,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9455:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 580,
                      "id": 615,
                      "nodeType": "Return",
                      "src": "9448:11:0"
                    }
                  ]
                },
                "id": 617,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "addApproval",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 577,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 574,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 617,
                      "src": "9190:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 573,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9190:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 576,
                      "name": "addedValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 617,
                      "src": "9207:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 575,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "9207:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "9189:34:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 580,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 579,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 617,
                      "src": "9240:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 578,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "9240:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "9239:14:0"
                },
                "scope": 752,
                "src": "9169:296:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 676,
                  "nodeType": "Block",
                  "src": "9711:329:0",
                  "statements": [
                    {
                      "assignments": [
                        627
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 627,
                          "name": "oldVal",
                          "nodeType": "VariableDeclaration",
                          "scope": 677,
                          "src": "9722:11:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 626,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "9722:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 634,
                      "initialValue": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 628,
                            "name": "allowed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 387,
                            "src": "9736:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                              "typeString": "mapping(address => mapping(address => uint256))"
                            }
                          },
                          "id": 631,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 629,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "9744:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 630,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "9744:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9736:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 633,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 632,
                          "name": "spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 619,
                          "src": "9756:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "9736:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "9722:42:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 637,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 635,
                          "name": "subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 621,
                          "src": "9779:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 636,
                          "name": "oldVal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 627,
                          "src": "9797:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9779:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 660,
                        "nodeType": "Block",
                        "src": "9866:81:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 658,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 648,
                                    "name": "allowed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 387,
                                    "src": "9879:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(address => uint256))"
                                    }
                                  },
                                  "id": 652,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 649,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2739,
                                      "src": "9887:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 650,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "9887:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "9879:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 653,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 651,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 619,
                                  "src": "9899:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "9879:28:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 656,
                                    "name": "subtractedValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 621,
                                    "src": "9921:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 654,
                                    "name": "oldVal",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 627,
                                    "src": "9910:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 655,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sub",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 172,
                                  "src": "9910:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 657,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9910:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "9879:58:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 659,
                            "nodeType": "ExpressionStatement",
                            "src": "9879:58:0"
                          }
                        ]
                      },
                      "id": 661,
                      "nodeType": "IfStatement",
                      "src": "9775:172:0",
                      "trueBody": {
                        "id": 647,
                        "nodeType": "Block",
                        "src": "9805:55:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 645,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 638,
                                    "name": "allowed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 387,
                                    "src": "9818:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(address => uint256))"
                                    }
                                  },
                                  "id": 642,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 639,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2739,
                                      "src": "9826:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 640,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "9826:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "9818:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 643,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 641,
                                  "name": "spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 619,
                                  "src": "9838:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "9818:28:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 644,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9849:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "9818:32:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 646,
                            "nodeType": "ExpressionStatement",
                            "src": "9818:32:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 663,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "9964:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 664,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "9964:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 665,
                            "name": "spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 619,
                            "src": "9976:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 666,
                                "name": "allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 387,
                                "src": "9985:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 669,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 667,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2739,
                                  "src": "9993:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 668,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "9993:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9985:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 671,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 670,
                              "name": "spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 619,
                              "src": "10005:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9985:28:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 662,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 335,
                          "src": "9955:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 672,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9955:59:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 673,
                      "nodeType": "ExpressionStatement",
                      "src": "9955:59:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 674,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "10030:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 625,
                      "id": 675,
                      "nodeType": "Return",
                      "src": "10023:11:0"
                    }
                  ]
                },
                "id": 677,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "subApproval",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 622,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 619,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 677,
                      "src": "9642:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 618,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9642:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 621,
                      "name": "subtractedValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 677,
                      "src": "9659:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 620,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "9659:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "9641:39:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 625,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 624,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 677,
                      "src": "9697:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 623,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "9697:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "9696:14:0"
                },
                "scope": 752,
                "src": "9621:419:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 713,
                  "nodeType": "Block",
                  "src": "10203:169:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 693,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 684,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "10210:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 686,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 685,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 679,
                            "src": "10219:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "10210:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 691,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 681,
                              "src": "10252:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 687,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 381,
                                "src": "10230:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 689,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 688,
                                "name": "account",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 679,
                                "src": "10239:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10230:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 690,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 172,
                            "src": "10230:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 692,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10230:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10210:48:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 694,
                      "nodeType": "ExpressionStatement",
                      "src": "10210:48:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 700,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 695,
                          "name": "total_supply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 377,
                          "src": "10265:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 698,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 681,
                              "src": "10297:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 696,
                              "name": "total_supply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 377,
                              "src": "10280:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 697,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 172,
                            "src": "10280:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 699,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10280:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10265:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 701,
                      "nodeType": "ExpressionStatement",
                      "src": "10265:38:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 703,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 679,
                            "src": "10319:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 704,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10328:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          {
                            "argumentTypes": null,
                            "id": 705,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 681,
                            "src": "10331:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 702,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 327,
                          "src": "10310:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10310:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 707,
                      "nodeType": "ExpressionStatement",
                      "src": "10310:27:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 709,
                            "name": "account",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 679,
                            "src": "10351:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 710,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 681,
                            "src": "10360:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 708,
                          "name": "Burned",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 350,
                          "src": "10344:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 711,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10344:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 712,
                      "nodeType": "ExpressionStatement",
                      "src": "10344:22:0"
                    }
                  ]
                },
                "id": 714,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "burnTokens",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 682,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 679,
                      "name": "account",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "10165:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 678,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10165:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 681,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "10182:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 680,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "10182:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "10164:29:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 683,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10203:0:0"
                },
                "scope": 752,
                "src": "10145:227:0",
                "stateMutability": "nonpayable",
                "superFunction": 344,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 750,
                  "nodeType": "Block",
                  "src": "10504:401:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 726,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 721,
                          "name": "total_supply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 377,
                          "src": "10511:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 724,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 718,
                              "src": "10543:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 722,
                              "name": "total_supply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 377,
                              "src": "10526:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 723,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 196,
                            "src": "10526:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 725,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10526:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10511:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 727,
                      "nodeType": "ExpressionStatement",
                      "src": "10511:39:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 737,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 728,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 381,
                            "src": "10557:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 730,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 729,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 716,
                            "src": "10566:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "10557:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 735,
                              "name": "amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 718,
                              "src": "10601:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 731,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 381,
                                "src": "10578:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 733,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 732,
                                "name": "receiver",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 716,
                                "src": "10587:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "10578:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 734,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 196,
                            "src": "10578:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 736,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "10578:30:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10557:51:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 738,
                      "nodeType": "ExpressionStatement",
                      "src": "10557:51:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 740,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 716,
                            "src": "10622:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 741,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 718,
                            "src": "10632:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 739,
                          "name": "Minted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 365,
                          "src": "10615:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 742,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10615:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 743,
                      "nodeType": "ExpressionStatement",
                      "src": "10615:24:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 745,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "10879:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          },
                          {
                            "argumentTypes": null,
                            "id": 746,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 716,
                            "src": "10882:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 747,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 718,
                            "src": "10892:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 744,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 327,
                          "src": "10870:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 748,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10870:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 749,
                      "nodeType": "ExpressionStatement",
                      "src": "10870:29:0"
                    }
                  ]
                },
                "id": 751,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "mintInternal",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 719,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 716,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 751,
                      "src": "10464:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 715,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10464:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 718,
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 751,
                      "src": "10482:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 717,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "10482:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "10463:31:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 720,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10504:0:0"
                },
                "scope": 752,
                "src": "10442:463:0",
                "stateMutability": "nonpayable",
                "superFunction": 359,
                "visibility": "internal"
              }
            ],
            "scope": 2728,
            "src": "5869:5043:0"
          },
          {
            "baseContracts": [
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 753,
                  "name": "StandardToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 752,
                  "src": "11038:13:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_StandardToken_$752",
                    "typeString": "contract StandardToken"
                  }
                },
                "id": 754,
                "nodeType": "InheritanceSpecifier",
                "src": "11038:13:0"
              },
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 755,
                  "name": "Ownable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 47,
                  "src": "11053:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Ownable_$47",
                    "typeString": "contract Ownable"
                  }
                },
                "id": 756,
                "nodeType": "InheritanceSpecifier",
                "src": "11053:7:0"
              }
            ],
            "contractDependencies": [
              366,
              336,
              351,
              47,
              752
            ],
            "contractKind": "contract",
            "documentation": "Define interface for releasing the token transfer after a successful crowdsale.",
            "fullyImplemented": true,
            "id": 889,
            "linearizedBaseContracts": [
              889,
              47,
              752,
              366,
              351,
              336
            ],
            "name": "ReleasableToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 758,
                "name": "releaseAgent",
                "nodeType": "VariableDeclaration",
                "scope": 889,
                "src": "11154:27:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 757,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "11154:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 761,
                "name": "released",
                "nodeType": "VariableDeclaration",
                "scope": 889,
                "src": "11309:28:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 759,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "11309:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "66616c7365",
                  "id": 760,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "bool",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "11332:5:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "value": "false"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 765,
                "name": "transferAgents",
                "nodeType": "VariableDeclaration",
                "scope": 889,
                "src": "11509:47:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                  "typeString": "mapping(address => bool)"
                },
                "typeName": {
                  "id": 764,
                  "keyType": {
                    "id": 762,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "11518:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "11509:25:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "valueType": {
                    "id": 763,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "11529:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 779,
                  "nodeType": "Block",
                  "src": "11920:149:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 777,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 775,
                          "name": "releaseAgent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 758,
                          "src": "12044:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 776,
                          "name": "addr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 767,
                          "src": "12059:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "12044:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 778,
                      "nodeType": "ExpressionStatement",
                      "src": "12044:19:0"
                    }
                  ]
                },
                "id": 780,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 770,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 769,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "11881:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "11881:9:0"
                  },
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "66616c7365",
                        "id": 772,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11906:5:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "id": 773,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 771,
                      "name": "inReleaseState",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 835,
                      "src": "11891:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$_t_bool_$",
                        "typeString": "modifier (bool)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "11891:21:0"
                  }
                ],
                "name": "setReleaseAgent",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 768,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 767,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 780,
                      "src": "11867:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 766,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "11867:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "11866:14:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 774,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "11920:0:0"
                },
                "scope": 889,
                "src": "11842:227:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 798,
                  "nodeType": "Block",
                  "src": "12298:41:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 796,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 792,
                            "name": "transferAgents",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 765,
                            "src": "12305:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 794,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 793,
                            "name": "addr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 782,
                            "src": "12320:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "12305:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 795,
                          "name": "state",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 784,
                          "src": "12328:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "12305:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 797,
                      "nodeType": "ExpressionStatement",
                      "src": "12305:28:0"
                    }
                  ]
                },
                "id": 799,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 787,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 786,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "12259:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "12259:9:0"
                  },
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "hexValue": "66616c7365",
                        "id": 789,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "12284:5:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "false"
                      }
                    ],
                    "id": 790,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 788,
                      "name": "inReleaseState",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 835,
                      "src": "12269:14:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$_t_bool_$",
                        "typeString": "modifier (bool)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "12269:21:0"
                  }
                ],
                "name": "setTransferAgent",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 785,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 782,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 799,
                      "src": "12233:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 781,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12233:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 784,
                      "name": "state",
                      "nodeType": "VariableDeclaration",
                      "scope": 799,
                      "src": "12247:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 783,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "12247:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "12232:26:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 791,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12298:0:0"
                },
                "scope": 889,
                "src": "12207:132:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 808,
                  "nodeType": "Block",
                  "src": "12705:28:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 806,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 804,
                          "name": "released",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 761,
                          "src": "12712:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 805,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "12723:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "12712:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 807,
                      "nodeType": "ExpressionStatement",
                      "src": "12712:15:0"
                    }
                  ]
                },
                "id": 809,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 802,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 801,
                      "name": "onlyReleaseAgent",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 846,
                      "src": "12688:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "12688:16:0"
                  }
                ],
                "name": "releaseTokenTransfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 800,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12678:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 803,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12705:0:0"
                },
                "scope": 889,
                "src": "12649:84:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 822,
                  "nodeType": "Block",
                  "src": "12846:64:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 818,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 814,
                              "name": "released",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 761,
                              "src": "12861:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 815,
                                "name": "transferAgents",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 765,
                                "src": "12873:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                  "typeString": "mapping(address => bool)"
                                }
                              },
                              "id": 817,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 816,
                                "name": "sender",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 811,
                                "src": "12888:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "12873:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "12861:34:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 813,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "12853:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 819,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12853:43:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 820,
                      "nodeType": "ExpressionStatement",
                      "src": "12853:43:0"
                    },
                    {
                      "id": 821,
                      "nodeType": "PlaceholderStatement",
                      "src": "12903:1:0"
                    }
                  ]
                },
                "id": 823,
                "name": "canTransfer",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 812,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 811,
                      "name": "sender",
                      "nodeType": "VariableDeclaration",
                      "scope": 823,
                      "src": "12830:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 810,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12830:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "12829:16:0"
                },
                "src": "12809:101:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 834,
                  "nodeType": "Block",
                  "src": "13047:54:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 830,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 828,
                              "name": "releaseState",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 825,
                              "src": "13062:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 829,
                              "name": "released",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 761,
                              "src": "13078:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "13062:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 827,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "13054:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 831,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13054:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 832,
                      "nodeType": "ExpressionStatement",
                      "src": "13054:33:0"
                    },
                    {
                      "id": 833,
                      "nodeType": "PlaceholderStatement",
                      "src": "13094:1:0"
                    }
                  ]
                },
                "id": 835,
                "name": "inReleaseState",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 826,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 825,
                      "name": "releaseState",
                      "nodeType": "VariableDeclaration",
                      "scope": 835,
                      "src": "13028:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 824,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "13028:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13027:19:0"
                },
                "src": "13004:97:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 845,
                  "nodeType": "Block",
                  "src": "13209:56:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 841,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 838,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2739,
                                "src": "13224:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 839,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "13224:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 840,
                              "name": "releaseAgent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 758,
                              "src": "13238:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "13224:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 837,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "13216:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 842,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13216:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 843,
                      "nodeType": "ExpressionStatement",
                      "src": "13216:35:0"
                    },
                    {
                      "id": 844,
                      "nodeType": "PlaceholderStatement",
                      "src": "13258:1:0"
                    }
                  ]
                },
                "id": 846,
                "name": "onlyReleaseAgent",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 836,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "13206:2:0"
                },
                "src": "13181:84:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 865,
                  "nodeType": "Block",
                  "src": "13415:82:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 861,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 848,
                            "src": "13481:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 862,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 850,
                            "src": "13485:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 859,
                            "name": "super",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2765,
                            "src": "13466:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_super$_ReleasableToken_$889",
                              "typeString": "contract super ReleasableToken"
                            }
                          },
                          "id": 860,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 438,
                          "src": "13466:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) returns (bool)"
                          }
                        },
                        "id": 863,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13466:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 858,
                      "id": 864,
                      "nodeType": "Return",
                      "src": "13459:32:0"
                    }
                  ]
                },
                "id": 866,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 853,
                          "name": "msg",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2739,
                          "src": "13380:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_message",
                            "typeString": "msg"
                          }
                        },
                        "id": 854,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "sender",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "13380:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "id": 855,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 852,
                      "name": "canTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 823,
                      "src": "13368:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$_t_address_$",
                        "typeString": "modifier (address)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "13368:23:0"
                  }
                ],
                "name": "transfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 851,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 848,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 866,
                      "src": "13337:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 847,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "13337:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 850,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 866,
                      "src": "13349:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 849,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "13349:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13336:24:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 858,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 857,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 866,
                      "src": "13401:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 856,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "13401:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13400:14:0"
                },
                "scope": 889,
                "src": "13319:178:0",
                "stateMutability": "nonpayable",
                "superFunction": 438,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 887,
                  "nodeType": "Block",
                  "src": "13663:97:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 882,
                            "name": "from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 868,
                            "src": "13738:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 883,
                            "name": "to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 870,
                            "src": "13744:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 884,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 872,
                            "src": "13748:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 880,
                            "name": "super",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2765,
                            "src": "13719:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_super$_ReleasableToken_$889",
                              "typeString": "contract super ReleasableToken"
                            }
                          },
                          "id": 881,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 513,
                          "src": "13719:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) returns (bool)"
                          }
                        },
                        "id": 885,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13719:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 879,
                      "id": 886,
                      "nodeType": "Return",
                      "src": "13712:42:0"
                    }
                  ]
                },
                "id": 888,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 875,
                        "name": "from",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 868,
                        "src": "13634:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "id": 876,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 874,
                      "name": "canTransfer",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 823,
                      "src": "13622:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$_t_address_$",
                        "typeString": "modifier (address)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "13622:17:0"
                  }
                ],
                "name": "transferFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 873,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 868,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 888,
                      "src": "13577:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 867,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "13577:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 870,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 888,
                      "src": "13591:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 869,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "13591:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 872,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 888,
                      "src": "13603:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 871,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "13603:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13576:38:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 879,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 878,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 888,
                      "src": "13649:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 877,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "13649:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13648:14:0"
                },
                "scope": 889,
                "src": "13555:205:0",
                "stateMutability": "nonpayable",
                "superFunction": 513,
                "visibility": "public"
              }
            ],
            "scope": 2728,
            "src": "11010:2755:0"
          },
          {
            "id": 890,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "13773:24:0"
          },
          {
            "id": 891,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "13965:24:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": "Upgrade agent transfers tokens to a new contract.\nUpgrade agent itself can be the token contract, or just a middle man contract doing the heavy lifting.\n\n * The Upgrade agent is the interface used to implement a token\nmigration in the case of an emergency.\nThe function upgradeFrom has to implement the part of the creation\nof new tokens on behalf of the user doing the upgrade.\n\n * The new token can implement this interface directly, or use.",
            "fullyImplemented": false,
            "id": 909,
            "linearizedBaseContracts": [
              909
            ],
            "name": "UpgradeAgent",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 893,
                "name": "originalSupply",
                "nodeType": "VariableDeclaration",
                "scope": 909,
                "src": "14674:26:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 892,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "14674:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 900,
                  "nodeType": "Block",
                  "src": "14827:24:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 898,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "14841:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 897,
                      "id": 899,
                      "nodeType": "Return",
                      "src": "14834:11:0"
                    }
                  ]
                },
                "id": 901,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "isUpgradeAgent",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 894,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "14797:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 897,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 896,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 901,
                      "src": "14821:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 895,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "14821:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "14820:6:0"
                },
                "scope": 909,
                "src": "14774:77:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "id": 908,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "upgradeFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 906,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 903,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 908,
                      "src": "15361:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 902,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "15361:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 905,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 908,
                      "src": "15375:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 904,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "15375:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15360:26:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 907,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "15393:0:0"
                },
                "scope": 909,
                "src": "15340:54:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 2728,
            "src": "14568:831:0"
          },
          {
            "baseContracts": [
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 910,
                  "name": "EIP20Token",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 336,
                  "src": "15555:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_EIP20Token_$336",
                    "typeString": "contract EIP20Token"
                  }
                },
                "id": 911,
                "nodeType": "InheritanceSpecifier",
                "src": "15555:10:0"
              },
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 912,
                  "name": "Burnable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 351,
                  "src": "15567:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Burnable_$351",
                    "typeString": "contract Burnable"
                  }
                },
                "id": 913,
                "nodeType": "InheritanceSpecifier",
                "src": "15567:8:0"
              }
            ],
            "contractDependencies": [
              336,
              351
            ],
            "contractKind": "contract",
            "documentation": "A token upgrade mechanism where users can opt-in amount of tokens to the next smart contract revision.\n\n ",
            "fullyImplemented": false,
            "id": 1140,
            "linearizedBaseContracts": [
              1140,
              351,
              336
            ],
            "name": "UpgradeableToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 916,
                "libraryName": {
                  "contractScope": null,
                  "id": 914,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 265,
                  "src": "15587:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$265",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "15581:24:0",
                "typeName": {
                  "id": 915,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "15600:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "constant": false,
                "id": 918,
                "name": "upgradeMaster",
                "nodeType": "VariableDeclaration",
                "scope": 1140,
                "src": "15753:28:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 917,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "15753:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 920,
                "name": "upgradeAgent",
                "nodeType": "VariableDeclaration",
                "scope": 1140,
                "src": "15851:32:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                  "typeString": "contract UpgradeAgent"
                },
                "typeName": {
                  "contractScope": null,
                  "id": 919,
                  "name": "UpgradeAgent",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 909,
                  "src": "15851:12:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                    "typeString": "contract UpgradeAgent"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 923,
                "name": "totalUpgraded",
                "nodeType": "VariableDeclaration",
                "scope": 1140,
                "src": "15941:29:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 921,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "15941:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "30",
                  "id": 922,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "15969:1:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                },
                "visibility": "public"
              },
              {
                "canonicalName": "UpgradeableToken.UpgradeState",
                "id": 929,
                "members": [
                  {
                    "id": 924,
                    "name": "Unknown",
                    "nodeType": "EnumValue",
                    "src": "16456:7:0"
                  },
                  {
                    "id": 925,
                    "name": "NotAllowed",
                    "nodeType": "EnumValue",
                    "src": "16465:10:0"
                  },
                  {
                    "id": 926,
                    "name": "WaitingForAgent",
                    "nodeType": "EnumValue",
                    "src": "16477:15:0"
                  },
                  {
                    "id": 927,
                    "name": "ReadyToUpgrade",
                    "nodeType": "EnumValue",
                    "src": "16494:14:0"
                  },
                  {
                    "id": 928,
                    "name": "Upgrading",
                    "nodeType": "EnumValue",
                    "src": "16510:9:0"
                  }
                ],
                "name": "UpgradeState",
                "nodeType": "EnumDefinition",
                "src": "16437:83:0"
              },
              {
                "anonymous": false,
                "id": 937,
                "name": "Upgrade",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 936,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 931,
                      "indexed": true,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 937,
                      "src": "16602:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 930,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "16602:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 933,
                      "indexed": false,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 937,
                      "src": "16624:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 932,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "16624:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 935,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 937,
                      "src": "16636:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 934,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "16636:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "16601:46:0"
                },
                "src": "16588:60:0"
              },
              {
                "anonymous": false,
                "id": 941,
                "name": "UpgradeAgentSet",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 940,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 939,
                      "indexed": false,
                      "name": "agent",
                      "nodeType": "VariableDeclaration",
                      "scope": 941,
                      "src": "16725:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 938,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "16725:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "16724:15:0"
                },
                "src": "16703:37:0"
              },
              {
                "body": {
                  "id": 950,
                  "nodeType": "Block",
                  "src": "16871:37:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 947,
                            "name": "master",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 943,
                            "src": "16895:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 946,
                          "name": "setUpgradeMaster",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1120,
                          "src": "16878:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 948,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16878:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 949,
                      "nodeType": "ExpressionStatement",
                      "src": "16878:24:0"
                    }
                  ]
                },
                "id": 951,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "UpgradeableToken",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 944,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 943,
                      "name": "master",
                      "nodeType": "VariableDeclaration",
                      "scope": 951,
                      "src": "16846:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 942,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "16846:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "16845:16:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 945,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "16871:0:0"
                },
                "scope": 1140,
                "src": "16820:88:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1007,
                  "nodeType": "Block",
                  "src": "17044:515:0",
                  "statements": [
                    {
                      "assignments": [
                        957
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 957,
                          "name": "state",
                          "nodeType": "VariableDeclaration",
                          "scope": 1008,
                          "src": "17051:18:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_UpgradeState_$929",
                            "typeString": "enum UpgradeableToken.UpgradeState"
                          },
                          "typeName": {
                            "contractScope": null,
                            "id": 956,
                            "name": "UpgradeState",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 929,
                            "src": "17051:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_UpgradeState_$929",
                              "typeString": "enum UpgradeableToken.UpgradeState"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 960,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 958,
                          "name": "getUpgradeState",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1092,
                          "src": "17072:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_enum$_UpgradeState_$929_$",
                            "typeString": "function () view returns (enum UpgradeableToken.UpgradeState)"
                          }
                        },
                        "id": 959,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17072:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_UpgradeState_$929",
                          "typeString": "enum UpgradeableToken.UpgradeState"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "17051:38:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 970,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_enum$_UpgradeState_$929",
                                "typeString": "enum UpgradeableToken.UpgradeState"
                              },
                              "id": 965,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 962,
                                "name": "state",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 957,
                                "src": "17150:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_UpgradeState_$929",
                                  "typeString": "enum UpgradeableToken.UpgradeState"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 963,
                                  "name": "UpgradeState",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 929,
                                  "src": "17159:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_UpgradeState_$929_$",
                                    "typeString": "type(enum UpgradeableToken.UpgradeState)"
                                  }
                                },
                                "id": 964,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "ReadyToUpgrade",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "17159:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_UpgradeState_$929",
                                  "typeString": "enum UpgradeableToken.UpgradeState"
                                }
                              },
                              "src": "17150:36:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_enum$_UpgradeState_$929",
                                "typeString": "enum UpgradeableToken.UpgradeState"
                              },
                              "id": 969,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 966,
                                "name": "state",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 957,
                                "src": "17190:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_UpgradeState_$929",
                                  "typeString": "enum UpgradeableToken.UpgradeState"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 967,
                                  "name": "UpgradeState",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 929,
                                  "src": "17199:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_UpgradeState_$929_$",
                                    "typeString": "type(enum UpgradeableToken.UpgradeState)"
                                  }
                                },
                                "id": 968,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "Upgrading",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "17199:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_UpgradeState_$929",
                                  "typeString": "enum UpgradeableToken.UpgradeState"
                                }
                              },
                              "src": "17190:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "17150:71:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 961,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "17142:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 971,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17142:80:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 972,
                      "nodeType": "ExpressionStatement",
                      "src": "17142:80:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 976,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 974,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 953,
                              "src": "17269:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 975,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "17278:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "17269:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 973,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "17261:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 977,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17261:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 978,
                      "nodeType": "ExpressionStatement",
                      "src": "17261:19:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 982,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "17356:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 983,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "17356:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 984,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 953,
                            "src": "17368:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 979,
                            "name": "upgradeAgent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 920,
                            "src": "17331:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                              "typeString": "contract UpgradeAgent"
                            }
                          },
                          "id": 981,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "upgradeFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 908,
                          "src": "17331:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256) external"
                          }
                        },
                        "id": 985,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17331:43:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 986,
                      "nodeType": "ExpressionStatement",
                      "src": "17331:43:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 988,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "17439:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 989,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "17439:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 990,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 953,
                            "src": "17451:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 987,
                          "name": "burnTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 344,
                          "src": "17428:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 991,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17428:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 992,
                      "nodeType": "ExpressionStatement",
                      "src": "17428:29:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 998,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 993,
                          "name": "totalUpgraded",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 923,
                          "src": "17464:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 996,
                              "name": "value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 953,
                              "src": "17498:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 994,
                              "name": "totalUpgraded",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 923,
                              "src": "17480:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 995,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 196,
                            "src": "17480:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 997,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17480:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "17464:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 999,
                      "nodeType": "ExpressionStatement",
                      "src": "17464:40:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1001,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "17521:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1002,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "17521:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1003,
                            "name": "upgradeAgent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 920,
                            "src": "17533:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                              "typeString": "contract UpgradeAgent"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1004,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 953,
                            "src": "17547:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                              "typeString": "contract UpgradeAgent"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1000,
                          "name": "Upgrade",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 937,
                          "src": "17513:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 1005,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17513:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1006,
                      "nodeType": "ExpressionStatement",
                      "src": "17513:40:0"
                    }
                  ]
                },
                "id": 1008,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "upgrade",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 954,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 953,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 1008,
                      "src": "17025:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 952,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "17025:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "17024:12:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 955,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "17044:0:0"
                },
                "scope": 1140,
                "src": "17008:551:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1059,
                  "nodeType": "Block",
                  "src": "17699:526:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "id": 1016,
                              "name": "canUpgrade",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1128,
                              "src": "17793:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                                "typeString": "function () view returns (bool)"
                              }
                            },
                            "id": 1017,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "17793:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1015,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "17785:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1018,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17785:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1019,
                      "nodeType": "ExpressionStatement",
                      "src": "17785:21:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1023,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1021,
                              "name": "agent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1010,
                              "src": "17823:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "307830",
                              "id": 1022,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "17832:3:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0x0"
                            },
                            "src": "17823:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1020,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "17815:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1024,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17815:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1025,
                      "nodeType": "ExpressionStatement",
                      "src": "17815:21:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_enum$_UpgradeState_$929",
                              "typeString": "enum UpgradeableToken.UpgradeState"
                            },
                            "id": 1031,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1027,
                                "name": "getUpgradeState",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1092,
                                "src": "17898:15:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_enum$_UpgradeState_$929_$",
                                  "typeString": "function () view returns (enum UpgradeableToken.UpgradeState)"
                                }
                              },
                              "id": 1028,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "17898:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_UpgradeState_$929",
                                "typeString": "enum UpgradeableToken.UpgradeState"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1029,
                                "name": "UpgradeState",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 929,
                                "src": "17919:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_UpgradeState_$929_$",
                                  "typeString": "type(enum UpgradeableToken.UpgradeState)"
                                }
                              },
                              "id": 1030,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "Upgrading",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "17919:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_UpgradeState_$929",
                                "typeString": "enum UpgradeableToken.UpgradeState"
                              }
                            },
                            "src": "17898:43:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1026,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "17890:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1032,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17890:52:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1033,
                      "nodeType": "ExpressionStatement",
                      "src": "17890:52:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1038,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1034,
                          "name": "upgradeAgent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 920,
                          "src": "17951:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                            "typeString": "contract UpgradeAgent"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1036,
                              "name": "agent",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1010,
                              "src": "17979:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1035,
                            "name": "UpgradeAgent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 909,
                            "src": "17966:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_contract$_UpgradeAgent_$909_$",
                              "typeString": "type(contract UpgradeAgent)"
                            }
                          },
                          "id": 1037,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "17966:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                            "typeString": "contract UpgradeAgent"
                          }
                        },
                        "src": "17951:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                          "typeString": "contract UpgradeAgent"
                        }
                      },
                      "id": 1039,
                      "nodeType": "ExpressionStatement",
                      "src": "17951:34:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "argumentTypes": null,
                                "id": 1041,
                                "name": "upgradeAgent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 920,
                                "src": "18024:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                                  "typeString": "contract UpgradeAgent"
                                }
                              },
                              "id": 1042,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "isUpgradeAgent",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 901,
                              "src": "18024:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_pure$__$returns$_t_bool_$",
                                "typeString": "function () pure external returns (bool)"
                              }
                            },
                            "id": 1043,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "18024:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1040,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "18016:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1044,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "18016:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1045,
                      "nodeType": "ExpressionStatement",
                      "src": "18016:38:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1052,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1047,
                                  "name": "upgradeAgent",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 920,
                                  "src": "18134:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                                    "typeString": "contract UpgradeAgent"
                                  }
                                },
                                "id": 1048,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "originalSupply",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 893,
                                "src": "18134:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_external_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view external returns (uint256)"
                                }
                              },
                              "id": 1049,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18134:29:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1050,
                                "name": "totalSupply",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 274,
                                "src": "18167:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_uint256_$",
                                  "typeString": "function () view returns (uint256)"
                                }
                              },
                              "id": 1051,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "18167:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "18134:46:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1046,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "18126:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1053,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "18126:55:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1054,
                      "nodeType": "ExpressionStatement",
                      "src": "18126:55:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1056,
                            "name": "upgradeAgent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 920,
                            "src": "18206:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                              "typeString": "contract UpgradeAgent"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                              "typeString": "contract UpgradeAgent"
                            }
                          ],
                          "id": 1055,
                          "name": "UpgradeAgentSet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 941,
                          "src": "18190:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1057,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "18190:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1058,
                      "nodeType": "ExpressionStatement",
                      "src": "18190:29:0"
                    }
                  ]
                },
                "id": 1060,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1013,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1012,
                      "name": "onlyMaster",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1139,
                      "src": "17679:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "17679:10:0"
                  }
                ],
                "name": "setUpgradeAgent",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1011,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1010,
                      "name": "agent",
                      "nodeType": "VariableDeclaration",
                      "scope": 1060,
                      "src": "17664:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1009,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "17664:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "17663:15:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1014,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "17699:0:0"
                },
                "scope": 1140,
                "src": "17639:586:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "external"
              },
              {
                "body": {
                  "id": 1091,
                  "nodeType": "Block",
                  "src": "18348:255:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "id": 1067,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "UnaryOperation",
                        "operator": "!",
                        "prefix": true,
                        "src": "18359:13:0",
                        "subExpression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1065,
                            "name": "canUpgrade",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1128,
                            "src": "18360:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                              "typeString": "function () view returns (bool)"
                            }
                          },
                          "id": 1066,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "18360:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "condition": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "id": 1075,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1072,
                                "name": "upgradeAgent",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 920,
                                "src": "18428:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                                  "typeString": "contract UpgradeAgent"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_UpgradeAgent_$909",
                                  "typeString": "contract UpgradeAgent"
                                }
                              ],
                              "id": 1071,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "18420:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 1073,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "18420:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "30783030",
                            "id": 1074,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "18445:4:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0x00"
                          },
                          "src": "18420:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1081,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1079,
                              "name": "totalUpgraded",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 923,
                              "src": "18502:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1080,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "18519:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "18502:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1085,
                                "name": "UpgradeState",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 929,
                                "src": "18575:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_UpgradeState_$929_$",
                                  "typeString": "type(enum UpgradeableToken.UpgradeState)"
                                }
                              },
                              "id": 1086,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "Upgrading",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "18575:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_UpgradeState_$929",
                                "typeString": "enum UpgradeableToken.UpgradeState"
                              }
                            },
                            "functionReturnParameters": 1064,
                            "id": 1087,
                            "nodeType": "Return",
                            "src": "18568:29:0"
                          },
                          "id": 1088,
                          "nodeType": "IfStatement",
                          "src": "18498:99:0",
                          "trueBody": {
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1082,
                                "name": "UpgradeState",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 929,
                                "src": "18529:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_UpgradeState_$929_$",
                                  "typeString": "type(enum UpgradeableToken.UpgradeState)"
                                }
                              },
                              "id": 1083,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "ReadyToUpgrade",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "18529:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_UpgradeState_$929",
                                "typeString": "enum UpgradeableToken.UpgradeState"
                              }
                            },
                            "functionReturnParameters": 1064,
                            "id": 1084,
                            "nodeType": "Return",
                            "src": "18522:34:0"
                          }
                        },
                        "id": 1089,
                        "nodeType": "IfStatement",
                        "src": "18416:181:0",
                        "trueBody": {
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1076,
                              "name": "UpgradeState",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 929,
                              "src": "18458:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_UpgradeState_$929_$",
                                "typeString": "type(enum UpgradeableToken.UpgradeState)"
                              }
                            },
                            "id": 1077,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "WaitingForAgent",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "18458:28:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_UpgradeState_$929",
                              "typeString": "enum UpgradeableToken.UpgradeState"
                            }
                          },
                          "functionReturnParameters": 1064,
                          "id": 1078,
                          "nodeType": "Return",
                          "src": "18451:35:0"
                        }
                      },
                      "id": 1090,
                      "nodeType": "IfStatement",
                      "src": "18355:242:0",
                      "trueBody": {
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 1068,
                            "name": "UpgradeState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 929,
                            "src": "18381:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_UpgradeState_$929_$",
                              "typeString": "type(enum UpgradeableToken.UpgradeState)"
                            }
                          },
                          "id": 1069,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "NotAllowed",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "18381:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_UpgradeState_$929",
                            "typeString": "enum UpgradeableToken.UpgradeState"
                          }
                        },
                        "functionReturnParameters": 1064,
                        "id": 1070,
                        "nodeType": "Return",
                        "src": "18374:30:0"
                      }
                    }
                  ]
                },
                "id": 1092,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "getUpgradeState",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1061,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18311:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1064,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1063,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1092,
                      "src": "18334:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_UpgradeState_$929",
                        "typeString": "enum UpgradeableToken.UpgradeState"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 1062,
                        "name": "UpgradeState",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 929,
                        "src": "18334:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_UpgradeState_$929",
                          "typeString": "enum UpgradeableToken.UpgradeState"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "18333:14:0"
                },
                "scope": 1140,
                "src": "18287:316:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1103,
                  "nodeType": "Block",
                  "src": "18796:41:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1100,
                            "name": "new_master",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1094,
                            "src": "18820:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1099,
                          "name": "setUpgradeMaster",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1120,
                          "src": "18803:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1101,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "18803:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1102,
                      "nodeType": "ExpressionStatement",
                      "src": "18803:28:0"
                    }
                  ]
                },
                "id": 1104,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1097,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1096,
                      "name": "onlyMaster",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1139,
                      "src": "18778:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "18778:10:0"
                  }
                ],
                "name": "changeUpgradeMaster",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1095,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1094,
                      "name": "new_master",
                      "nodeType": "VariableDeclaration",
                      "scope": 1104,
                      "src": "18758:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1093,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "18758:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "18757:20:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1098,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18796:0:0"
                },
                "scope": 1140,
                "src": "18729:108:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1119,
                  "nodeType": "Block",
                  "src": "18949:72:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1112,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1110,
                              "name": "new_master",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1106,
                              "src": "18964:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "307830",
                              "id": 1111,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "18978:3:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0x0"
                            },
                            "src": "18964:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1109,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "18956:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1113,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "18956:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1114,
                      "nodeType": "ExpressionStatement",
                      "src": "18956:26:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1117,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1115,
                          "name": "upgradeMaster",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 918,
                          "src": "18989:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1116,
                          "name": "new_master",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1106,
                          "src": "19005:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "18989:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1118,
                      "nodeType": "ExpressionStatement",
                      "src": "18989:26:0"
                    }
                  ]
                },
                "id": 1120,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "setUpgradeMaster",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1107,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1106,
                      "name": "new_master",
                      "nodeType": "VariableDeclaration",
                      "scope": 1120,
                      "src": "18921:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1105,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "18921:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "18920:20:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1108,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "18949:0:0"
                },
                "scope": 1140,
                "src": "18895:126:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 1127,
                  "nodeType": "Block",
                  "src": "19180:25:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 1125,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "19195:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 1124,
                      "id": 1126,
                      "nodeType": "Return",
                      "src": "19188:11:0"
                    }
                  ]
                },
                "id": 1128,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "canUpgrade",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1121,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "19151:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1124,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1123,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1128,
                      "src": "19174:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1122,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "19174:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "19173:6:0"
                },
                "scope": 1140,
                "src": "19132:73:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1138,
                  "nodeType": "Block",
                  "src": "19235:57:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1134,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1131,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2739,
                                "src": "19250:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1132,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "19250:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1133,
                              "name": "upgradeMaster",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 918,
                              "src": "19264:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "19250:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1130,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "19242:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "19242:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1136,
                      "nodeType": "ExpressionStatement",
                      "src": "19242:36:0"
                    },
                    {
                      "id": 1137,
                      "nodeType": "PlaceholderStatement",
                      "src": "19285:1:0"
                    }
                  ]
                },
                "id": 1139,
                "name": "onlyMaster",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 1129,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "19232:2:0"
                },
                "src": "19213:79:0",
                "visibility": "internal"
              }
            ],
            "scope": 2728,
            "src": "15526:3769:0"
          },
          {
            "id": 1141,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "19299:24:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": "Authored by https://www.coinfabrik.com/",
            "fullyImplemented": false,
            "id": 1172,
            "linearizedBaseContracts": [
              1172
            ],
            "name": "LostAndFoundToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": null,
                "id": 1146,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "getLostAndFoundMaster",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1142,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "19877:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1145,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1144,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1146,
                      "src": "19903:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1143,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "19903:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "19902:9:0"
                },
                "scope": 1172,
                "src": "19847:65:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1170,
                  "nodeType": "Block",
                  "src": "20209:263:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1160,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1156,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2739,
                                "src": "20224:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1157,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "20224:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 1158,
                                "name": "getLostAndFoundMaster",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1146,
                                "src": "20238:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_address_$",
                                  "typeString": "function () view returns (address)"
                                }
                              },
                              "id": 1159,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "20238:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "20224:37:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1155,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "20216:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1161,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "20216:46:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1162,
                      "nodeType": "ExpressionStatement",
                      "src": "20216:46:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1166,
                            "name": "agent",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1148,
                            "src": "20452:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1167,
                            "name": "tokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1150,
                            "src": "20459:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1163,
                            "name": "token_contract",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1152,
                            "src": "20429:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_EIP20Token_$336",
                              "typeString": "contract EIP20Token"
                            }
                          },
                          "id": 1165,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "approve",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 310,
                          "src": "20429:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 1168,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "20429:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1169,
                      "nodeType": "ExpressionStatement",
                      "src": "20429:37:0"
                    }
                  ]
                },
                "id": 1171,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "enableLostAndFound",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1153,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1148,
                      "name": "agent",
                      "nodeType": "VariableDeclaration",
                      "scope": 1171,
                      "src": "20147:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1147,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "20147:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1150,
                      "name": "tokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 1171,
                      "src": "20162:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1149,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "20162:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1152,
                      "name": "token_contract",
                      "nodeType": "VariableDeclaration",
                      "scope": 1171,
                      "src": "20175:25:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_EIP20Token_$336",
                        "typeString": "contract EIP20Token"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 1151,
                        "name": "EIP20Token",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 336,
                        "src": "20175:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_EIP20Token_$336",
                          "typeString": "contract EIP20Token"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "20146:55:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1154,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "20209:0:0"
                },
                "scope": 1172,
                "src": "20119:353:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 2728,
            "src": "19740:735:0"
          },
          {
            "id": 1173,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "20477:24:0"
          },
          {
            "baseContracts": [
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 1174,
                  "name": "Mintable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 366,
                  "src": "20903:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Mintable_$366",
                    "typeString": "contract Mintable"
                  }
                },
                "id": 1175,
                "nodeType": "InheritanceSpecifier",
                "src": "20903:8:0"
              },
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 1176,
                  "name": "Ownable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 47,
                  "src": "20913:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Ownable_$47",
                    "typeString": "contract Ownable"
                  }
                },
                "id": 1177,
                "nodeType": "InheritanceSpecifier",
                "src": "20913:7:0"
              }
            ],
            "contractDependencies": [
              366,
              47
            ],
            "contractKind": "contract",
            "documentation": "A public interface to increase the supply of a token.\n\n * This allows uncapped crowdsale by dynamically increasing the supply when money pours in.\nOnly mint agents, usually contracts whitelisted by the owner, can mint new tokens.\n\n ",
            "fullyImplemented": false,
            "id": 1294,
            "linearizedBaseContracts": [
              1294,
              47,
              366
            ],
            "name": "MintableToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 1180,
                "libraryName": {
                  "contractScope": null,
                  "id": 1178,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 265,
                  "src": "20934:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$265",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "20928:24:0",
                "typeName": {
                  "id": 1179,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "20947:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "constant": false,
                "id": 1183,
                "name": "mintingFinished",
                "nodeType": "VariableDeclaration",
                "scope": 1294,
                "src": "20958:35:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 1181,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "20958:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "66616c7365",
                  "id": 1182,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "bool",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "20988:5:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "value": "false"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1187,
                "name": "mintAgents",
                "nodeType": "VariableDeclaration",
                "scope": 1294,
                "src": "21063:43:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                  "typeString": "mapping(address => bool)"
                },
                "typeName": {
                  "id": 1186,
                  "keyType": {
                    "id": 1184,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "21072:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "21063:25:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "valueType": {
                    "id": 1185,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "21083:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "anonymous": false,
                "id": 1193,
                "name": "MintingAgentChanged",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1192,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1189,
                      "indexed": false,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 1193,
                      "src": "21139:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1188,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "21139:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1191,
                      "indexed": false,
                      "name": "state",
                      "nodeType": "VariableDeclaration",
                      "scope": 1193,
                      "src": "21153:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1190,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "21153:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "21138:26:0"
                },
                "src": "21113:52:0"
              },
              {
                "body": {
                  "id": 1232,
                  "nodeType": "Block",
                  "src": "21258:376:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1207,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1203,
                              "name": "multisig",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1197,
                              "src": "21273:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1205,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "21293:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 1204,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "21285:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 1206,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "21285:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "21273:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1202,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "21265:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1208,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "21265:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1209,
                      "nodeType": "ExpressionStatement",
                      "src": "21265:31:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 1215,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1211,
                              "name": "mintable",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1199,
                              "src": "21371:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1214,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1212,
                                "name": "initialSupply",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1195,
                                "src": "21383:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1213,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "21400:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "21383:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "21371:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1210,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "21363:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1216,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "21363:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1217,
                      "nodeType": "ExpressionStatement",
                      "src": "21363:39:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1220,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1218,
                          "name": "initialSupply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1195,
                          "src": "21471:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1219,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "21487:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "21471:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 1226,
                      "nodeType": "IfStatement",
                      "src": "21467:67:0",
                      "trueBody": {
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1222,
                              "name": "multisig",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1197,
                              "src": "21510:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1223,
                              "name": "initialSupply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1195,
                              "src": "21520:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 1221,
                            "name": "mintInternal",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 359,
                            "src": "21497:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                              "typeString": "function (address,uint256)"
                            }
                          },
                          "id": 1224,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "21497:37:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$__$",
                            "typeString": "tuple()"
                          }
                        },
                        "id": 1225,
                        "nodeType": "ExpressionStatement",
                        "src": "21497:37:0"
                      }
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1230,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1227,
                          "name": "mintingFinished",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1183,
                          "src": "21601:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1229,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "21619:9:0",
                          "subExpression": {
                            "argumentTypes": null,
                            "id": 1228,
                            "name": "mintable",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1199,
                            "src": "21620:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "21601:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1231,
                      "nodeType": "ExpressionStatement",
                      "src": "21601:27:0"
                    }
                  ]
                },
                "id": 1233,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "MintableToken",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1200,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1195,
                      "name": "initialSupply",
                      "nodeType": "VariableDeclaration",
                      "scope": 1233,
                      "src": "21196:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1194,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "21196:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1197,
                      "name": "multisig",
                      "nodeType": "VariableDeclaration",
                      "scope": 1233,
                      "src": "21216:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1196,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "21216:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1199,
                      "name": "mintable",
                      "nodeType": "VariableDeclaration",
                      "scope": 1233,
                      "src": "21234:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1198,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "21234:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "21195:53:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1201,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "21258:0:0"
                },
                "scope": 1294,
                "src": "21173:461:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1249,
                  "nodeType": "Block",
                  "src": "21854:43:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1245,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1235,
                            "src": "21874:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1246,
                            "name": "amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1237,
                            "src": "21884:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1244,
                          "name": "mintInternal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 359,
                          "src": "21861:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 1247,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "21861:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1248,
                      "nodeType": "ExpressionStatement",
                      "src": "21861:30:0"
                    }
                  ]
                },
                "id": 1250,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1240,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1239,
                      "name": "onlyMintAgent",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1284,
                      "src": "21825:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "21825:13:0"
                  },
                  {
                    "arguments": [],
                    "id": 1242,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1241,
                      "name": "canMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1293,
                      "src": "21839:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "21839:7:0"
                  }
                ],
                "name": "mint",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1238,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1235,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 1250,
                      "src": "21794:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1234,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "21794:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1237,
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 1250,
                      "src": "21812:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1236,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "21812:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "21793:31:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1243,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "21854:0:0"
                },
                "scope": 1294,
                "src": "21780:117:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1272,
                  "nodeType": "Block",
                  "src": "22053:76:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1265,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 1261,
                            "name": "mintAgents",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1187,
                            "src": "22060:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 1263,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1262,
                            "name": "addr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1252,
                            "src": "22071:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "22060:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1264,
                          "name": "state",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1254,
                          "src": "22079:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "22060:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1266,
                      "nodeType": "ExpressionStatement",
                      "src": "22060:24:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1268,
                            "name": "addr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1252,
                            "src": "22111:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1269,
                            "name": "state",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1254,
                            "src": "22117:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1267,
                          "name": "MintingAgentChanged",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1193,
                          "src": "22091:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$",
                            "typeString": "function (address,bool)"
                          }
                        },
                        "id": 1270,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22091:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1271,
                      "nodeType": "ExpressionStatement",
                      "src": "22091:32:0"
                    }
                  ]
                },
                "id": 1273,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1257,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1256,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "22028:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "22028:9:0"
                  },
                  {
                    "arguments": [],
                    "id": 1259,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1258,
                      "name": "canMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1293,
                      "src": "22038:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "22038:7:0"
                  }
                ],
                "name": "setMintAgent",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1255,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1252,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 1273,
                      "src": "22002:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1251,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "22002:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1254,
                      "name": "state",
                      "nodeType": "VariableDeclaration",
                      "scope": 1273,
                      "src": "22016:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1253,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "22016:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "22001:26:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1260,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "22053:0:0"
                },
                "scope": 1294,
                "src": "21980:149:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1283,
                  "nodeType": "Block",
                  "src": "22160:108:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 1276,
                              "name": "mintAgents",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1187,
                              "src": "22231:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                "typeString": "mapping(address => bool)"
                              }
                            },
                            "id": 1279,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1277,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2739,
                                "src": "22242:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1278,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "22242:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "22231:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1275,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "22223:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1280,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22223:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1281,
                      "nodeType": "ExpressionStatement",
                      "src": "22223:31:0"
                    },
                    {
                      "id": 1282,
                      "nodeType": "PlaceholderStatement",
                      "src": "22261:1:0"
                    }
                  ]
                },
                "id": 1284,
                "name": "onlyMintAgent",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 1274,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "22157:2:0"
                },
                "src": "22135:133:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1292,
                  "nodeType": "Block",
                  "src": "22334:46:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1288,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "22349:16:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 1287,
                              "name": "mintingFinished",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1183,
                              "src": "22350:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1286,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "22341:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1289,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22341:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1290,
                      "nodeType": "ExpressionStatement",
                      "src": "22341:25:0"
                    },
                    {
                      "id": 1291,
                      "nodeType": "PlaceholderStatement",
                      "src": "22373:1:0"
                    }
                  ]
                },
                "id": 1293,
                "name": "canMint",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 1285,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "22331:2:0"
                },
                "src": "22315:65:0",
                "visibility": "internal"
              }
            ],
            "scope": 2728,
            "src": "20877:1506:0"
          },
          {
            "baseContracts": [
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 1295,
                  "name": "ReleasableToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 889,
                  "src": "23004:15:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ReleasableToken_$889",
                    "typeString": "contract ReleasableToken"
                  }
                },
                "id": 1296,
                "nodeType": "InheritanceSpecifier",
                "src": "23004:15:0"
              },
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 1297,
                  "name": "MintableToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1294,
                  "src": "23021:13:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_MintableToken_$1294",
                    "typeString": "contract MintableToken"
                  }
                },
                "id": 1298,
                "nodeType": "InheritanceSpecifier",
                "src": "23021:13:0"
              },
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 1299,
                  "name": "UpgradeableToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1140,
                  "src": "23036:16:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_UpgradeableToken_$1140",
                    "typeString": "contract UpgradeableToken"
                  }
                },
                "id": 1300,
                "nodeType": "InheritanceSpecifier",
                "src": "23036:16:0"
              },
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 1301,
                  "name": "LostAndFoundToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1172,
                  "src": "23054:17:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_LostAndFoundToken_$1172",
                    "typeString": "contract LostAndFoundToken"
                  }
                },
                "id": 1302,
                "nodeType": "InheritanceSpecifier",
                "src": "23054:17:0"
              }
            ],
            "contractDependencies": [
              366,
              336,
              351,
              47,
              752,
              889,
              1140,
              1172,
              1294
            ],
            "contractKind": "contract",
            "documentation": "A crowdsale token.\n\n * An ERC-20 token designed specifically for crowdsales with investor protection and further development path.\n\n * - The token transfer() is disabled until the crowdsale is over\n- The token contract gives an opt-in upgrade path to a new contract\n- The same token can be part of several crowdsales through the approve() mechanism\n- The token can be capped (supply set in the constructor) or uncapped (crowdsale contract can mint new tokens)\n- ERC20 tokens transferred to this contract can be recovered by a lost and found master\n\n ",
            "fullyImplemented": true,
            "id": 1396,
            "linearizedBaseContracts": [
              1396,
              1172,
              1140,
              1294,
              889,
              47,
              752,
              366,
              351,
              336
            ],
            "name": "CrowdsaleToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 1305,
                "name": "name",
                "nodeType": "VariableDeclaration",
                "scope": 1396,
                "src": "23079:32:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string storage ref"
                },
                "typeName": {
                  "id": 1303,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "23079:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string storage pointer"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "546f6b656e486f6d65",
                  "id": 1304,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "23100:11:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_a0bd1842a89eac6caaee5c13c332bf5fcfa57668e9cd917cee74482fc27f080a",
                    "typeString": "literal_string \"TokenHome\""
                  },
                  "value": "TokenHome"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1308,
                "name": "symbol",
                "nodeType": "VariableDeclaration",
                "scope": 1396,
                "src": "23118:27:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string storage ref"
                },
                "typeName": {
                  "id": 1306,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "23118:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string storage pointer"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "5448",
                  "id": 1307,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "23141:4:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_b2368ab405716be42157976768467611ab58ac3fa2015c62d155a1a2e16686aa",
                    "typeString": "literal_string \"TH\""
                  },
                  "value": "TH"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1310,
                "name": "decimals",
                "nodeType": "VariableDeclaration",
                "scope": 1396,
                "src": "23152:21:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                },
                "typeName": {
                  "id": 1309,
                  "name": "uint8",
                  "nodeType": "ElementaryTypeName",
                  "src": "23152:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1312,
                "name": "lost_and_found_master",
                "nodeType": "VariableDeclaration",
                "scope": 1396,
                "src": "23180:36:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1311,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "23180:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1347,
                  "nodeType": "Block",
                  "src": "23940:129:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1336,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1332,
                              "name": "token_retriever",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1320,
                              "src": "23955:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1334,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "23982:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 1333,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "23974:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 1335,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "23974:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "23955:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1331,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "23947:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1337,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "23947:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1338,
                      "nodeType": "ExpressionStatement",
                      "src": "23947:38:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1341,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1339,
                          "name": "decimals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1310,
                          "src": "23992:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1340,
                          "name": "token_decimals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1316,
                          "src": "24003:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "src": "23992:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "id": 1342,
                      "nodeType": "ExpressionStatement",
                      "src": "23992:25:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1345,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1343,
                          "name": "lost_and_found_master",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1312,
                          "src": "24024:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1344,
                          "name": "token_retriever",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1320,
                          "src": "24048:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "24024:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1346,
                      "nodeType": "ExpressionStatement",
                      "src": "24024:39:0"
                    }
                  ]
                },
                "id": 1348,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1323,
                        "name": "team_multisig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1318,
                        "src": "23874:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      }
                    ],
                    "id": 1324,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1322,
                      "name": "UpgradeableToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1140,
                      "src": "23857:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_UpgradeableToken_$1140_$",
                        "typeString": "type(contract UpgradeableToken)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "23857:31:0"
                  },
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1326,
                        "name": "initial_supply",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1314,
                        "src": "23903:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 1327,
                        "name": "team_multisig",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1318,
                        "src": "23919:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 1328,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "23934:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      }
                    ],
                    "id": 1329,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1325,
                      "name": "MintableToken",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 1294,
                      "src": "23889:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_MintableToken_$1294_$",
                        "typeString": "type(contract MintableToken)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "23889:50:0"
                  }
                ],
                "name": "CrowdsaleToken",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1321,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1314,
                      "name": "initial_supply",
                      "nodeType": "VariableDeclaration",
                      "scope": 1348,
                      "src": "23756:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1313,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "23756:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1316,
                      "name": "token_decimals",
                      "nodeType": "VariableDeclaration",
                      "scope": 1348,
                      "src": "23777:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 1315,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "23777:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1318,
                      "name": "team_multisig",
                      "nodeType": "VariableDeclaration",
                      "scope": 1348,
                      "src": "23799:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1317,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "23799:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1320,
                      "name": "token_retriever",
                      "nodeType": "VariableDeclaration",
                      "scope": 1348,
                      "src": "23822:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1319,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "23822:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "23755:91:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1330,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "23940:0:0"
                },
                "scope": 1396,
                "src": "23732:337:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1362,
                  "nodeType": "Block",
                  "src": "24223:70:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1355,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1353,
                          "name": "mintingFinished",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1183,
                          "src": "24230:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1354,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "24248:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "24230:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1356,
                      "nodeType": "ExpressionStatement",
                      "src": "24230:22:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1357,
                            "name": "super",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2775,
                            "src": "24259:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_super$_CrowdsaleToken_$1396",
                              "typeString": "contract super CrowdsaleToken"
                            }
                          },
                          "id": 1359,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "releaseTokenTransfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 809,
                          "src": "24259:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 1360,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "24259:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1361,
                      "nodeType": "ExpressionStatement",
                      "src": "24259:28:0"
                    }
                  ]
                },
                "id": 1363,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1351,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1350,
                      "name": "onlyReleaseAgent",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 846,
                      "src": "24206:16:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "24206:16:0"
                  }
                ],
                "name": "releaseTokenTransfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1349,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "24196:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1352,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "24223:0:0"
                },
                "scope": 1396,
                "src": "24167:126:0",
                "stateMutability": "nonpayable",
                "superFunction": 809,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1374,
                  "nodeType": "Block",
                  "src": "24449:50:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 1372,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 1368,
                          "name": "released",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 761,
                          "src": "24463:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1369,
                              "name": "super",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2775,
                              "src": "24475:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_super$_CrowdsaleToken_$1396",
                                "typeString": "contract super CrowdsaleToken"
                              }
                            },
                            "id": 1370,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "canUpgrade",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 1128,
                            "src": "24475:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                              "typeString": "function () view returns (bool)"
                            }
                          },
                          "id": 1371,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "24475:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "24463:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 1367,
                      "id": 1373,
                      "nodeType": "Return",
                      "src": "24456:37:0"
                    }
                  ]
                },
                "id": 1375,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "canUpgrade",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1364,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "24420:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1367,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1366,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1375,
                      "src": "24443:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1365,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "24443:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "24442:6:0"
                },
                "scope": 1396,
                "src": "24401:98:0",
                "stateMutability": "view",
                "superFunction": 1128,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1386,
                  "nodeType": "Block",
                  "src": "24538:42:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1381,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "24556:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1382,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "24556:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1383,
                            "name": "value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1377,
                            "src": "24568:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1380,
                          "name": "burnTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            714
                          ],
                          "referencedDeclaration": 714,
                          "src": "24545:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 1384,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "24545:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1385,
                      "nodeType": "ExpressionStatement",
                      "src": "24545:29:0"
                    }
                  ]
                },
                "id": 1387,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "burn",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1378,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1377,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 1387,
                      "src": "24519:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1376,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "24519:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "24518:12:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1379,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "24538:0:0"
                },
                "scope": 1396,
                "src": "24505:75:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1394,
                  "nodeType": "Block",
                  "src": "24650:41:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1392,
                        "name": "lost_and_found_master",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1312,
                        "src": "24664:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 1391,
                      "id": 1393,
                      "nodeType": "Return",
                      "src": "24657:28:0"
                    }
                  ]
                },
                "id": 1395,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "getLostAndFoundMaster",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1388,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "24616:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1391,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1390,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1395,
                      "src": "24641:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1389,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "24641:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "24640:9:0"
                },
                "scope": 1396,
                "src": "24586:105:0",
                "stateMutability": "view",
                "superFunction": 1146,
                "visibility": "internal"
              }
            ],
            "scope": 2728,
            "src": "22977:1717:0"
          },
          {
            "baseContracts": [
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 1397,
                  "name": "Haltable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 103,
                  "src": "25005:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Haltable_$103",
                    "typeString": "contract Haltable"
                  }
                },
                "id": 1398,
                "nodeType": "InheritanceSpecifier",
                "src": "25005:8:0"
              }
            ],
            "contractDependencies": [
              103,
              47
            ],
            "contractKind": "contract",
            "documentation": "Abstract base contract for token sales.\n\n * Handles\n- start and end dates\n- accepting investments\n- various statistics during the crowdfund\n- different investment policies (require server side customer id, allow only whitelisted addresses)\n\n ",
            "fullyImplemented": false,
            "id": 2092,
            "linearizedBaseContracts": [
              2092,
              103,
              47
            ],
            "name": "GenericCrowdsale",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 1401,
                "libraryName": {
                  "contractScope": null,
                  "id": 1399,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 265,
                  "src": "25027:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$265",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "25021:24:0",
                "typeName": {
                  "id": 1400,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "25040:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "constant": false,
                "id": 1403,
                "name": "token",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "25085:27:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                  "typeString": "contract CrowdsaleToken"
                },
                "typeName": {
                  "contractScope": null,
                  "id": 1402,
                  "name": "CrowdsaleToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1396,
                  "src": "25085:14:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                    "typeString": "contract CrowdsaleToken"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1405,
                "name": "multisigWallet",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "25170:29:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1404,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "25170:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1407,
                "name": "startsAt",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "25255:20:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1406,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "25255:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1409,
                "name": "endsAt",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "25329:18:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1408,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "25329:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1412,
                "name": "tokensSold",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "25418:26:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1410,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "25418:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "30",
                  "id": 1411,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "25443:1:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1415,
                "name": "weiRaised",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "25499:25:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1413,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "25499:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "30",
                  "id": 1414,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "25523:1:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1418,
                "name": "investorCount",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "25582:29:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 1416,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "25582:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "30",
                  "id": 1417,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "25610:1:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1421,
                "name": "finalized",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "25661:29:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 1419,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "25661:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "66616c7365",
                  "id": 1420,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "bool",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "25685:5:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "value": "false"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1424,
                "name": "requireCustomerId",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "25767:37:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 1422,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "25767:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "66616c7365",
                  "id": 1423,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "bool",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "25799:5:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "value": "false"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1427,
                "name": "configured",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "25855:30:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 1425,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "25855:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "66616c7365",
                  "id": 1426,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "bool",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "25880:5:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "value": "false"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1430,
                "name": "requiredSignedAddress",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "26136:41:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 1428,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "26136:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "66616c7365",
                  "id": 1429,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "bool",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "26172:5:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "value": "false"
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1432,
                "name": "signerAddress",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "26303:28:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 1431,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "26303:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1436,
                "name": "investedAmountOf",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "26405:49:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 1435,
                  "keyType": {
                    "id": 1433,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "26414:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "26405:25:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 1434,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "26425:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1440,
                "name": "tokenAmountOf",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "26541:46:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 1439,
                  "keyType": {
                    "id": 1437,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "26550:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "26541:25:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 1438,
                    "name": "uint",
                    "nodeType": "ElementaryTypeName",
                    "src": "26561:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 1444,
                "name": "earlyParticipantWhitelist",
                "nodeType": "VariableDeclaration",
                "scope": 2092,
                "src": "26711:58:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                  "typeString": "mapping(address => bool)"
                },
                "typeName": {
                  "id": 1443,
                  "keyType": {
                    "id": 1441,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "26720:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "26711:25:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                    "typeString": "mapping(address => bool)"
                  },
                  "valueType": {
                    "id": 1442,
                    "name": "bool",
                    "nodeType": "ElementaryTypeName",
                    "src": "26731:4:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_bool",
                      "typeString": "bool"
                    }
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "canonicalName": "GenericCrowdsale.State",
                "id": 1451,
                "members": [
                  {
                    "id": 1445,
                    "name": "Unknown",
                    "nodeType": "EnumValue",
                    "src": "27097:7:0"
                  },
                  {
                    "id": 1446,
                    "name": "PendingConfiguration",
                    "nodeType": "EnumValue",
                    "src": "27106:20:0"
                  },
                  {
                    "id": 1447,
                    "name": "PreFunding",
                    "nodeType": "EnumValue",
                    "src": "27128:10:0"
                  },
                  {
                    "id": 1448,
                    "name": "Funding",
                    "nodeType": "EnumValue",
                    "src": "27140:7:0"
                  },
                  {
                    "id": 1449,
                    "name": "Success",
                    "nodeType": "EnumValue",
                    "src": "27149:7:0"
                  },
                  {
                    "id": 1450,
                    "name": "Finalized",
                    "nodeType": "EnumValue",
                    "src": "27158:9:0"
                  }
                ],
                "name": "State",
                "nodeType": "EnumDefinition",
                "src": "27086:82:0"
              },
              {
                "anonymous": false,
                "id": 1461,
                "name": "Invested",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1460,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1453,
                      "indexed": false,
                      "name": "investor",
                      "nodeType": "VariableDeclaration",
                      "scope": 1461,
                      "src": "27223:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1452,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "27223:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1455,
                      "indexed": false,
                      "name": "weiAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 1461,
                      "src": "27241:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1454,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "27241:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1457,
                      "indexed": false,
                      "name": "tokenAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 1461,
                      "src": "27257:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1456,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "27257:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1459,
                      "indexed": false,
                      "name": "customerId",
                      "nodeType": "VariableDeclaration",
                      "scope": 1461,
                      "src": "27275:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 1458,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "27275:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "27222:72:0"
                },
                "src": "27208:87:0"
              },
              {
                "anonymous": false,
                "id": 1469,
                "name": "InvestmentPolicyChanged",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1468,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1463,
                      "indexed": false,
                      "name": "requireCId",
                      "nodeType": "VariableDeclaration",
                      "scope": 1469,
                      "src": "27401:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1462,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "27401:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1465,
                      "indexed": false,
                      "name": "requireSignedAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 1469,
                      "src": "27418:25:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1464,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "27418:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1467,
                      "indexed": false,
                      "name": "signer",
                      "nodeType": "VariableDeclaration",
                      "scope": 1469,
                      "src": "27445:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1466,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "27445:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "27400:60:0"
                },
                "src": "27371:90:0"
              },
              {
                "anonymous": false,
                "id": 1475,
                "name": "Whitelisted",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1474,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1471,
                      "indexed": false,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 1475,
                      "src": "27544:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1470,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "27544:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1473,
                      "indexed": false,
                      "name": "status",
                      "nodeType": "VariableDeclaration",
                      "scope": 1475,
                      "src": "27558:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1472,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "27558:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "27543:27:0"
                },
                "src": "27526:45:0"
              },
              {
                "anonymous": false,
                "id": 1477,
                "name": "Finalized",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 1476,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "27644:2:0"
                },
                "src": "27629:18:0"
              },
              {
                "body": {
                  "id": 1526,
                  "nodeType": "Block",
                  "src": "28445:216:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1491,
                            "name": "team_multisig",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1479,
                            "src": "28464:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1490,
                          "name": "setMultisig",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1956,
                          "src": "28452:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1492,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "28452:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1493,
                      "nodeType": "ExpressionStatement",
                      "src": "28452:26:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 1501,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1497,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1495,
                                "name": "start",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1481,
                                "src": "28524:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1496,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "28533:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "28524:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1500,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1498,
                                "name": "end",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1483,
                                "src": "28538:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "!=",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 1499,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "28545:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "28538:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "28524:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1494,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "28516:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1502,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "28516:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1503,
                      "nodeType": "ExpressionStatement",
                      "src": "28516:31:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 1511,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1507,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1505,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2741,
                                "src": "28562:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 1506,
                                "name": "start",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1481,
                                "src": "28568:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "28562:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 1510,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 1508,
                                "name": "start",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1481,
                                "src": "28577:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 1509,
                                "name": "end",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1483,
                                "src": "28585:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "28577:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "28562:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1504,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "28554:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1512,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "28554:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1513,
                      "nodeType": "ExpressionStatement",
                      "src": "28554:35:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1516,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1514,
                          "name": "startsAt",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1407,
                          "src": "28596:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1515,
                          "name": "start",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1481,
                          "src": "28607:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "28596:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1517,
                      "nodeType": "ExpressionStatement",
                      "src": "28596:16:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1520,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1518,
                          "name": "endsAt",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1409,
                          "src": "28619:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1519,
                          "name": "end",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1483,
                          "src": "28628:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "28619:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1521,
                      "nodeType": "ExpressionStatement",
                      "src": "28619:12:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1524,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1522,
                          "name": "configured",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1427,
                          "src": "28638:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1523,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "28651:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "28638:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1525,
                      "nodeType": "ExpressionStatement",
                      "src": "28638:17:0"
                    }
                  ]
                },
                "id": 1527,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1486,
                          "name": "State",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1451,
                          "src": "28417:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                            "typeString": "type(enum GenericCrowdsale.State)"
                          }
                        },
                        "id": 1487,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "PendingConfiguration",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "28417:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$1451",
                          "typeString": "enum GenericCrowdsale.State"
                        }
                      }
                    ],
                    "id": 1488,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1485,
                      "name": "inState",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2049,
                      "src": "28409:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$_t_enum$_State_$1451_$",
                        "typeString": "modifier (enum GenericCrowdsale.State)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "28409:35:0"
                  }
                ],
                "name": "configurationGenericCrowdsale",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1484,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1479,
                      "name": "team_multisig",
                      "nodeType": "VariableDeclaration",
                      "scope": 1527,
                      "src": "28355:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1478,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "28355:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1481,
                      "name": "start",
                      "nodeType": "VariableDeclaration",
                      "scope": 1527,
                      "src": "28378:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1480,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "28378:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1483,
                      "name": "end",
                      "nodeType": "VariableDeclaration",
                      "scope": 1527,
                      "src": "28390:8:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1482,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "28390:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "28354:45:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1489,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "28445:0:0"
                },
                "scope": 2092,
                "src": "28316:345:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1533,
                  "nodeType": "Block",
                  "src": "28918:18:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1530,
                          "name": "buy",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1854,
                          "src": "28925:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 1531,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "28925:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1532,
                      "nodeType": "ExpressionStatement",
                      "src": "28925:5:0"
                    }
                  ]
                },
                "id": 1534,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1528,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "28900:2:0"
                },
                "payable": true,
                "returnParameters": {
                  "id": 1529,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "28918:0:0"
                },
                "scope": 2092,
                "src": "28892:44:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1621,
                  "nodeType": "Block",
                  "src": "29367:869:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_enum$_State_$1451",
                          "typeString": "enum GenericCrowdsale.State"
                        },
                        "id": 1549,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "arguments": [],
                          "expression": {
                            "argumentTypes": [],
                            "id": 1545,
                            "name": "getState",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1994,
                            "src": "29459:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$__$returns$_t_enum$_State_$1451_$",
                              "typeString": "function () view returns (enum GenericCrowdsale.State)"
                            }
                          },
                          "id": 1546,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "29459:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$1451",
                            "typeString": "enum GenericCrowdsale.State"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 1547,
                            "name": "State",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1451,
                            "src": "29473:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                              "typeString": "type(enum GenericCrowdsale.State)"
                            }
                          },
                          "id": 1548,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "PreFunding",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "29473:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$1451",
                            "typeString": "enum GenericCrowdsale.State"
                          }
                        },
                        "src": "29459:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 1558,
                      "nodeType": "IfStatement",
                      "src": "29455:146:0",
                      "trueBody": {
                        "id": 1557,
                        "nodeType": "Block",
                        "src": "29491:110:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 1551,
                                    "name": "earlyParticipantWhitelist",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1444,
                                    "src": "29555:25:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                                      "typeString": "mapping(address => bool)"
                                    }
                                  },
                                  "id": 1554,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1552,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2739,
                                      "src": "29581:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 1553,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "29581:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "29555:37:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                ],
                                "id": 1550,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2742,
                                "src": "29547:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                                  "typeString": "function (bool) pure"
                                }
                              },
                              "id": 1555,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "29547:46:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 1556,
                            "nodeType": "ExpressionStatement",
                            "src": "29547:46:0"
                          }
                        ]
                      }
                    },
                    {
                      "assignments": [],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1560,
                          "name": "weiAmount",
                          "nodeType": "VariableDeclaration",
                          "scope": 1622,
                          "src": "29609:14:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1559,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "29609:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 1561,
                      "initialValue": null,
                      "nodeType": "VariableDeclarationStatement",
                      "src": "29609:14:0"
                    },
                    {
                      "assignments": [],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1563,
                          "name": "tokenAmount",
                          "nodeType": "VariableDeclaration",
                          "scope": 1622,
                          "src": "29630:16:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1562,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "29630:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 1564,
                      "initialValue": null,
                      "nodeType": "VariableDeclarationStatement",
                      "src": "29630:16:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1573,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "id": 1565,
                              "name": "weiAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1560,
                              "src": "29654:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1566,
                              "name": "tokenAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1563,
                              "src": "29665:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 1567,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "TupleExpression",
                          "src": "29653:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                            "typeString": "tuple(uint256,uint256)"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1569,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2739,
                                "src": "29701:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1570,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "29701:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 1571,
                              "name": "receiver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1536,
                              "src": "29712:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 1568,
                            "name": "calculateTokenAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2036,
                            "src": "29680:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$_t_address_$returns$_t_uint256_$_t_uint256_$",
                              "typeString": "function (uint256,address) view returns (uint256,uint256)"
                            }
                          },
                          "id": 1572,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "29680:41:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_tuple$_t_uint256_$_t_uint256_$",
                            "typeString": "tuple(uint256,uint256)"
                          }
                        },
                        "src": "29653:68:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1574,
                      "nodeType": "ExpressionStatement",
                      "src": "29653:68:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1579,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1576,
                              "name": "weiAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1560,
                              "src": "29784:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1577,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2739,
                                "src": "29797:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 1578,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "value",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "29797:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "29784:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1575,
                          "name": "assert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2730,
                          "src": "29777:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1580,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "29777:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1581,
                      "nodeType": "ExpressionStatement",
                      "src": "29777:30:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1585,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1583,
                              "name": "tokenAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1563,
                              "src": "29879:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1584,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "29894:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "29879:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1582,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "29871:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1586,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "29871:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1587,
                      "nodeType": "ExpressionStatement",
                      "src": "29871:25:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 1592,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 1588,
                            "name": "investedAmountOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1436,
                            "src": "29909:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1590,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1589,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1536,
                            "src": "29926:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "29909:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 1591,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "29939:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "29909:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 1597,
                      "nodeType": "IfStatement",
                      "src": "29905:94:0",
                      "trueBody": {
                        "id": 1596,
                        "nodeType": "Block",
                        "src": "29942:57:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 1594,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "UnaryOperation",
                              "operator": "++",
                              "prefix": false,
                              "src": "29976:15:0",
                              "subExpression": {
                                "argumentTypes": null,
                                "id": 1593,
                                "name": "investorCount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1418,
                                "src": "29976:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1595,
                            "nodeType": "ExpressionStatement",
                            "src": "29976:15:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1599,
                            "name": "tokenAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1563,
                            "src": "30025:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1600,
                            "name": "weiAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1560,
                            "src": "30038:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1601,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1536,
                            "src": "30049:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1602,
                            "name": "customerId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1538,
                            "src": "30059:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          ],
                          "id": 1598,
                          "name": "updateInvestorFunds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1737,
                          "src": "30005:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_uint128_$returns$__$",
                            "typeString": "function (uint256,uint256,address,uint128)"
                          }
                        },
                        "id": 1603,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30005:65:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1604,
                      "nodeType": "ExpressionStatement",
                      "src": "30005:65:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1608,
                            "name": "weiAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1560,
                            "src": "30128:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1605,
                            "name": "multisigWallet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1405,
                            "src": "30104:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "id": 1607,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "30104:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256)"
                          }
                        },
                        "id": 1609,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30104:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1610,
                      "nodeType": "ExpressionStatement",
                      "src": "30104:34:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 1615,
                                "name": "weiAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1560,
                                "src": "30207:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1612,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2739,
                                  "src": "30193:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 1613,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "value",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "30193:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 1614,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sub",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 172,
                              "src": "30193:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 1616,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "30193:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1617,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "30219:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1618,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "30219:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1611,
                          "name": "returnExcedent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2025,
                          "src": "30178:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_address_$returns$__$",
                            "typeString": "function (uint256,address)"
                          }
                        },
                        "id": 1619,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30178:52:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1620,
                      "nodeType": "ExpressionStatement",
                      "src": "30178:52:0"
                    }
                  ]
                },
                "id": 1622,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1541,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1540,
                      "name": "stopInEmergency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 64,
                      "src": "29331:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "29331:15:0"
                  },
                  {
                    "arguments": [],
                    "id": 1543,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1542,
                      "name": "notFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2079,
                      "src": "29347:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "29347:11:0"
                  }
                ],
                "name": "investInternal",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1539,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1536,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 1622,
                      "src": "29293:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1535,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "29293:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1538,
                      "name": "customerId",
                      "nodeType": "VariableDeclaration",
                      "scope": 1622,
                      "src": "29311:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 1537,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "29311:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "29292:38:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1544,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "29367:0:0"
                },
                "scope": 2092,
                "src": "29269:967:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 1676,
                  "nodeType": "Block",
                  "src": "30868:322:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1640,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1636,
                              "name": "receiver",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1624,
                              "src": "30883:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 1638,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "30903:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 1637,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "30895:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 1639,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "30895:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "30883:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1635,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "30875:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1641,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30875:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1642,
                      "nodeType": "ExpressionStatement",
                      "src": "30875:31:0"
                    },
                    {
                      "assignments": [
                        1644
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1644,
                          "name": "tokenAmount",
                          "nodeType": "VariableDeclaration",
                          "scope": 1677,
                          "src": "30913:16:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1643,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "30913:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 1655,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1653,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "hexValue": "3130",
                              "id": 1647,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "30947:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 1649,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1403,
                                      "src": "30956:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                                        "typeString": "contract CrowdsaleToken"
                                      }
                                    },
                                    "id": 1650,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "decimals",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1310,
                                    "src": "30956:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                      "typeString": "function () view external returns (uint8)"
                                    }
                                  },
                                  "id": 1651,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "30956:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                ],
                                "id": 1648,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "30951:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint256_$",
                                  "typeString": "type(uint256)"
                                },
                                "typeName": "uint"
                              },
                              "id": 1652,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "30951:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "30947:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1645,
                            "name": "fullTokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1626,
                            "src": "30932:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1646,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 134,
                          "src": "30932:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 1654,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30932:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "30913:61:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1659,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1657,
                              "name": "tokenAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1644,
                              "src": "30989:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1658,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "31004:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "30989:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1656,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "30981:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1660,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "30981:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1661,
                      "nodeType": "ExpressionStatement",
                      "src": "30981:25:0"
                    },
                    {
                      "assignments": [
                        1663
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1663,
                          "name": "weiAmount",
                          "nodeType": "VariableDeclaration",
                          "scope": 1677,
                          "src": "31013:14:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 1662,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "31013:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 1668,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1666,
                            "name": "tokenAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1644,
                            "src": "31043:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 1664,
                            "name": "weiPrice",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1628,
                            "src": "31030:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 1665,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 134,
                          "src": "31030:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 1667,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "31030:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "31013:42:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1670,
                            "name": "tokenAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1644,
                            "src": "31147:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1671,
                            "name": "weiAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1663,
                            "src": "31160:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1672,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1624,
                            "src": "31171:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 1673,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "31182:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 1669,
                          "name": "updateInvestorFunds",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1737,
                          "src": "31127:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_uint256_$_t_uint256_$_t_address_$_t_uint128_$returns$__$",
                            "typeString": "function (uint256,uint256,address,uint128)"
                          }
                        },
                        "id": 1674,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "31127:57:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1675,
                      "nodeType": "ExpressionStatement",
                      "src": "31127:57:0"
                    }
                  ]
                },
                "id": 1677,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1631,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1630,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "30846:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "30846:9:0"
                  },
                  {
                    "arguments": [],
                    "id": 1633,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1632,
                      "name": "notFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2079,
                      "src": "30856:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "30856:11:0"
                  }
                ],
                "name": "preallocate",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1629,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1624,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 1677,
                      "src": "30789:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1623,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "30789:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1626,
                      "name": "fullTokens",
                      "nodeType": "VariableDeclaration",
                      "scope": 1677,
                      "src": "30807:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1625,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "30807:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1628,
                      "name": "weiPrice",
                      "nodeType": "VariableDeclaration",
                      "scope": 1677,
                      "src": "30824:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1627,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "30824:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "30788:50:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1634,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "30868:0:0"
                },
                "scope": 2092,
                "src": "30768:422:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1736,
                  "nodeType": "Block",
                  "src": "31381:462:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1697,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 1688,
                            "name": "investedAmountOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1436,
                            "src": "31412:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1690,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1689,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1683,
                            "src": "31429:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "31412:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1695,
                              "name": "weiAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1681,
                              "src": "31472:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 1691,
                                "name": "investedAmountOf",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1436,
                                "src": "31441:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 1693,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 1692,
                                "name": "receiver",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1683,
                                "src": "31458:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "31441:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1694,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 196,
                            "src": "31441:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1696,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "31441:41:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "31412:70:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1698,
                      "nodeType": "ExpressionStatement",
                      "src": "31412:70:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1708,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 1699,
                            "name": "tokenAmountOf",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1440,
                            "src": "31489:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 1701,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1700,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1683,
                            "src": "31503:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "31489:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1706,
                              "name": "tokenAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1679,
                              "src": "31543:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 1702,
                                "name": "tokenAmountOf",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1440,
                                "src": "31515:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 1704,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 1703,
                                "name": "receiver",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1683,
                                "src": "31529:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "31515:23:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1705,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 196,
                            "src": "31515:27:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1707,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "31515:40:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "31489:66:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1709,
                      "nodeType": "ExpressionStatement",
                      "src": "31489:66:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1715,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1710,
                          "name": "weiRaised",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1415,
                          "src": "31586:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1713,
                              "name": "weiAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1681,
                              "src": "31612:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1711,
                              "name": "weiRaised",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1415,
                              "src": "31598:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1712,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 196,
                            "src": "31598:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1714,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "31598:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "31586:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1716,
                      "nodeType": "ExpressionStatement",
                      "src": "31586:36:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1722,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1717,
                          "name": "tokensSold",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1412,
                          "src": "31629:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 1720,
                              "name": "tokenAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1679,
                              "src": "31657:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 1718,
                              "name": "tokensSold",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1412,
                              "src": "31642:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 1719,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 196,
                            "src": "31642:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 1721,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "31642:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "31629:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 1723,
                      "nodeType": "ExpressionStatement",
                      "src": "31629:40:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1725,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1683,
                            "src": "31691:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1726,
                            "name": "tokenAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1679,
                            "src": "31701:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 1724,
                          "name": "assignTokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2001,
                          "src": "31678:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 1727,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "31678:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1728,
                      "nodeType": "ExpressionStatement",
                      "src": "31678:35:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1730,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1683,
                            "src": "31792:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1731,
                            "name": "weiAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1681,
                            "src": "31802:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1732,
                            "name": "tokenAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1679,
                            "src": "31813:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1733,
                            "name": "customerId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1685,
                            "src": "31826:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          ],
                          "id": 1729,
                          "name": "Invested",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1461,
                          "src": "31783:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$_t_uint256_$_t_uint128_$returns$__$",
                            "typeString": "function (address,uint256,uint256,uint128)"
                          }
                        },
                        "id": 1734,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "31783:54:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1735,
                      "nodeType": "ExpressionStatement",
                      "src": "31783:54:0"
                    }
                  ]
                },
                "id": 1737,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "updateInvestorFunds",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1686,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1679,
                      "name": "tokenAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 1737,
                      "src": "31301:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1678,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "31301:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1681,
                      "name": "weiAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 1737,
                      "src": "31319:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1680,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "31319:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1683,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 1737,
                      "src": "31335:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1682,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "31335:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1685,
                      "name": "customerId",
                      "nodeType": "VariableDeclaration",
                      "scope": 1737,
                      "src": "31353:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 1684,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "31353:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "31300:72:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1687,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "31381:0:0"
                },
                "scope": 2092,
                "src": "31272:571:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 1775,
                  "nodeType": "Block",
                  "src": "32175:144:0",
                  "statements": [
                    {
                      "assignments": [
                        1754
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 1754,
                          "name": "hash",
                          "nodeType": "VariableDeclaration",
                          "scope": 1776,
                          "src": "32182:12:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "typeName": {
                            "id": 1753,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "32182:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 1758,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1756,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1739,
                            "src": "32204:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1755,
                          "name": "sha256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2746,
                          "src": "32197:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_sha256_pure$__$returns$_t_bytes32_$",
                            "typeString": "function () pure returns (bytes32)"
                          }
                        },
                        "id": 1757,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "32197:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "32182:31:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1767,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 1761,
                                  "name": "hash",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1754,
                                  "src": "32238:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1762,
                                  "name": "v",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1743,
                                  "src": "32244:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1763,
                                  "name": "r",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1745,
                                  "src": "32247:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "id": 1764,
                                  "name": "s",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1747,
                                  "src": "32250:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                ],
                                "id": 1760,
                                "name": "ecrecover",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2732,
                                "src": "32228:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
                                  "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
                                }
                              },
                              "id": 1765,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "32228:24:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1766,
                              "name": "signerAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1432,
                              "src": "32256:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "32228:41:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1759,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "32220:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1768,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "32220:50:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1769,
                      "nodeType": "ExpressionStatement",
                      "src": "32220:50:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1771,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1739,
                            "src": "32292:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1772,
                            "name": "customerId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1741,
                            "src": "32302:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          ],
                          "id": 1770,
                          "name": "investInternal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1622,
                          "src": "32277:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint128_$returns$__$",
                            "typeString": "function (address,uint128)"
                          }
                        },
                        "id": 1773,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "32277:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1774,
                      "nodeType": "ExpressionStatement",
                      "src": "32277:36:0"
                    }
                  ]
                },
                "id": 1776,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1750,
                        "name": "customerId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1741,
                        "src": "32163:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      }
                    ],
                    "id": 1751,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1749,
                      "name": "validCustomerId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2091,
                      "src": "32147:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$_t_uint128_$",
                        "typeString": "modifier (uint128)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "32147:27:0"
                  }
                ],
                "name": "buyOnBehalfWithSignedAddress",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1748,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1739,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 1776,
                      "src": "32063:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1738,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "32063:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1741,
                      "name": "customerId",
                      "nodeType": "VariableDeclaration",
                      "scope": 1776,
                      "src": "32081:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 1740,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "32081:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1743,
                      "name": "v",
                      "nodeType": "VariableDeclaration",
                      "scope": 1776,
                      "src": "32101:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 1742,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "32101:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1745,
                      "name": "r",
                      "nodeType": "VariableDeclaration",
                      "scope": 1776,
                      "src": "32110:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1744,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "32110:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1747,
                      "name": "s",
                      "nodeType": "VariableDeclaration",
                      "scope": 1776,
                      "src": "32121:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1746,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "32121:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "32062:69:0"
                },
                "payable": true,
                "returnParameters": {
                  "id": 1752,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "32175:0:0"
                },
                "scope": 2092,
                "src": "32025:294:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1793,
                  "nodeType": "Block",
                  "src": "32600:49:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1789,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1778,
                            "src": "32622:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1790,
                            "name": "customerId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1780,
                            "src": "32632:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          ],
                          "id": 1788,
                          "name": "investInternal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1622,
                          "src": "32607:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint128_$returns$__$",
                            "typeString": "function (address,uint128)"
                          }
                        },
                        "id": 1791,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "32607:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1792,
                      "nodeType": "ExpressionStatement",
                      "src": "32607:36:0"
                    }
                  ]
                },
                "id": 1794,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 1783,
                        "name": "customerId",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1780,
                        "src": "32569:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      }
                    ],
                    "id": 1784,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1782,
                      "name": "validCustomerId",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2091,
                      "src": "32553:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$_t_uint128_$",
                        "typeString": "modifier (uint128)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "32553:27:0"
                  },
                  {
                    "arguments": [],
                    "id": 1786,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1785,
                      "name": "unsignedBuyAllowed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2058,
                      "src": "32581:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "32581:18:0"
                  }
                ],
                "name": "buyOnBehalfWithCustomerId",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1781,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1778,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 1794,
                      "src": "32500:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1777,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "32500:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1780,
                      "name": "customerId",
                      "nodeType": "VariableDeclaration",
                      "scope": 1794,
                      "src": "32518:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 1779,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "32518:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "32499:38:0"
                },
                "payable": true,
                "returnParameters": {
                  "id": 1787,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "32600:0:0"
                },
                "scope": 2092,
                "src": "32465:184:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1811,
                  "nodeType": "Block",
                  "src": "32864:135:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1803,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "32879:18:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 1802,
                              "name": "requireCustomerId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1424,
                              "src": "32880:17:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1801,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "32871:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1804,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "32871:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1805,
                      "nodeType": "ExpressionStatement",
                      "src": "32871:27:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1807,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1796,
                            "src": "32981:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 1808,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "32991:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "id": 1806,
                          "name": "investInternal",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1622,
                          "src": "32966:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint128_$returns$__$",
                            "typeString": "function (address,uint128)"
                          }
                        },
                        "id": 1809,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "32966:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1810,
                      "nodeType": "ExpressionStatement",
                      "src": "32966:27:0"
                    }
                  ]
                },
                "id": 1812,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1799,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1798,
                      "name": "unsignedBuyAllowed",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2058,
                      "src": "32845:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "32845:18:0"
                  }
                ],
                "name": "buyOnBehalf",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1797,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1796,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 1812,
                      "src": "32812:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1795,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "32812:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "32811:18:0"
                },
                "payable": true,
                "returnParameters": {
                  "id": 1800,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "32864:0:0"
                },
                "scope": 2092,
                "src": "32791:208:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1832,
                  "nodeType": "Block",
                  "src": "33274:74:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1824,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "33310:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1825,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "33310:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1826,
                            "name": "customerId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1814,
                            "src": "33322:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1827,
                            "name": "v",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1816,
                            "src": "33334:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1828,
                            "name": "r",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1818,
                            "src": "33337:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1829,
                            "name": "s",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1820,
                            "src": "33340:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            },
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 1823,
                          "name": "buyOnBehalfWithSignedAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1776,
                          "src": "33281:28:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint128_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$__$",
                            "typeString": "function (address,uint128,uint8,bytes32,bytes32)"
                          }
                        },
                        "id": 1830,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "33281:61:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1831,
                      "nodeType": "ExpressionStatement",
                      "src": "33281:61:0"
                    }
                  ]
                },
                "id": 1833,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "buyWithSignedAddress",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1821,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1814,
                      "name": "customerId",
                      "nodeType": "VariableDeclaration",
                      "scope": 1833,
                      "src": "33208:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 1813,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "33208:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1816,
                      "name": "v",
                      "nodeType": "VariableDeclaration",
                      "scope": 1833,
                      "src": "33228:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 1815,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "33228:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1818,
                      "name": "r",
                      "nodeType": "VariableDeclaration",
                      "scope": 1833,
                      "src": "33237:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1817,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "33237:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1820,
                      "name": "s",
                      "nodeType": "VariableDeclaration",
                      "scope": 1833,
                      "src": "33248:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 1819,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "33248:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "33207:51:0"
                },
                "payable": true,
                "returnParameters": {
                  "id": 1822,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "33274:0:0"
                },
                "scope": 2092,
                "src": "33178:170:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1844,
                  "nodeType": "Block",
                  "src": "33555:62:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1839,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "33588:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1840,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "33588:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1841,
                            "name": "customerId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1835,
                            "src": "33600:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            }
                          ],
                          "id": 1838,
                          "name": "buyOnBehalfWithCustomerId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1794,
                          "src": "33562:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint128_$returns$__$",
                            "typeString": "function (address,uint128)"
                          }
                        },
                        "id": 1842,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "33562:49:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1843,
                      "nodeType": "ExpressionStatement",
                      "src": "33562:49:0"
                    }
                  ]
                },
                "id": 1845,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "buyWithCustomerId",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1836,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1835,
                      "name": "customerId",
                      "nodeType": "VariableDeclaration",
                      "scope": 1845,
                      "src": "33520:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 1834,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "33520:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "33519:20:0"
                },
                "payable": true,
                "returnParameters": {
                  "id": 1837,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "33555:0:0"
                },
                "scope": 2092,
                "src": "33493:124:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1853,
                  "nodeType": "Block",
                  "src": "33813:36:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1849,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2739,
                              "src": "33832:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 1850,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "33832:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1848,
                          "name": "buyOnBehalf",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1812,
                          "src": "33820:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 1851,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "33820:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1852,
                      "nodeType": "ExpressionStatement",
                      "src": "33820:23:0"
                    }
                  ]
                },
                "id": 1854,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "buy",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1846,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "33795:2:0"
                },
                "payable": true,
                "returnParameters": {
                  "id": 1847,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "33813:0:0"
                },
                "scope": 2092,
                "src": "33783:66:0",
                "stateMutability": "payable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1872,
                  "nodeType": "Block",
                  "src": "34132:47:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1867,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1865,
                          "name": "finalized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1421,
                          "src": "34139:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 1866,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "34151:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "34139:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1868,
                      "nodeType": "ExpressionStatement",
                      "src": "34139:16:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 1869,
                          "name": "Finalized",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1477,
                          "src": "34162:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 1870,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "34162:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1871,
                      "nodeType": "ExpressionStatement",
                      "src": "34162:11:0"
                    }
                  ]
                },
                "id": 1873,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 1857,
                          "name": "State",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1451,
                          "src": "34091:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                            "typeString": "type(enum GenericCrowdsale.State)"
                          }
                        },
                        "id": 1858,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "Success",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "34091:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$1451",
                          "typeString": "enum GenericCrowdsale.State"
                        }
                      }
                    ],
                    "id": 1859,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1856,
                      "name": "inState",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2049,
                      "src": "34083:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$_t_enum$_State_$1451_$",
                        "typeString": "modifier (enum GenericCrowdsale.State)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "34083:22:0"
                  },
                  {
                    "arguments": [],
                    "id": 1861,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1860,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "34106:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "34106:9:0"
                  },
                  {
                    "arguments": [],
                    "id": 1863,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1862,
                      "name": "stopInEmergency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 64,
                      "src": "34116:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "34116:15:0"
                  }
                ],
                "name": "finalize",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1855,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "34073:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1864,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "34132:0:0"
                },
                "scope": 2092,
                "src": "34056:123:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1890,
                  "nodeType": "Block",
                  "src": "34346:125:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1882,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1880,
                          "name": "requireCustomerId",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1424,
                          "src": "34353:17:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1881,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1875,
                          "src": "34373:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "34353:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1883,
                      "nodeType": "ExpressionStatement",
                      "src": "34353:25:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1885,
                            "name": "requireCustomerId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1424,
                            "src": "34409:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1886,
                            "name": "requiredSignedAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1430,
                            "src": "34428:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1887,
                            "name": "signerAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1432,
                            "src": "34451:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1884,
                          "name": "InvestmentPolicyChanged",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1469,
                          "src": "34385:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_bool_$_t_bool_$_t_address_$returns$__$",
                            "typeString": "function (bool,bool,address)"
                          }
                        },
                        "id": 1888,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "34385:80:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1889,
                      "nodeType": "ExpressionStatement",
                      "src": "34385:80:0"
                    }
                  ]
                },
                "id": 1891,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1878,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1877,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "34336:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "34336:9:0"
                  }
                ],
                "name": "setRequireCustomerId",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1876,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1875,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 1891,
                      "src": "34317:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1874,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "34317:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "34316:12:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1879,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "34346:0:0"
                },
                "scope": 2092,
                "src": "34287:184:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1914,
                  "nodeType": "Block",
                  "src": "34714:158:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1902,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1900,
                          "name": "requiredSignedAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1430,
                          "src": "34721:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1901,
                          "name": "value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1893,
                          "src": "34745:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "34721:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1903,
                      "nodeType": "ExpressionStatement",
                      "src": "34721:29:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1906,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1904,
                          "name": "signerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1432,
                          "src": "34757:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1905,
                          "name": "signer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1895,
                          "src": "34773:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "34757:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1907,
                      "nodeType": "ExpressionStatement",
                      "src": "34757:22:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1909,
                            "name": "requireCustomerId",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1424,
                            "src": "34810:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1910,
                            "name": "requiredSignedAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1430,
                            "src": "34829:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1911,
                            "name": "signerAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1432,
                            "src": "34852:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 1908,
                          "name": "InvestmentPolicyChanged",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1469,
                          "src": "34786:23:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_bool_$_t_bool_$_t_address_$returns$__$",
                            "typeString": "function (bool,bool,address)"
                          }
                        },
                        "id": 1912,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "34786:80:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1913,
                      "nodeType": "ExpressionStatement",
                      "src": "34786:80:0"
                    }
                  ]
                },
                "id": 1915,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1898,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1897,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "34704:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "34704:9:0"
                  }
                ],
                "name": "setRequireSignedAddress",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1896,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1893,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 1915,
                      "src": "34669:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1892,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "34669:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1895,
                      "name": "signer",
                      "nodeType": "VariableDeclaration",
                      "scope": 1915,
                      "src": "34681:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1894,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "34681:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "34668:28:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1899,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "34714:0:0"
                },
                "scope": 2092,
                "src": "34636:236:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1939,
                  "nodeType": "Block",
                  "src": "35051:85:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1932,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 1928,
                            "name": "earlyParticipantWhitelist",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1444,
                            "src": "35058:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_bool_$",
                              "typeString": "mapping(address => bool)"
                            }
                          },
                          "id": 1930,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 1929,
                            "name": "addr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1917,
                            "src": "35084:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "35058:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1931,
                          "name": "status",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1919,
                          "src": "35092:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "35058:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 1933,
                      "nodeType": "ExpressionStatement",
                      "src": "35058:40:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 1935,
                            "name": "addr",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1917,
                            "src": "35117:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 1936,
                            "name": "status",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1919,
                            "src": "35123:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1934,
                          "name": "Whitelisted",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1475,
                          "src": "35105:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_bool_$returns$__$",
                            "typeString": "function (address,bool)"
                          }
                        },
                        "id": 1937,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "35105:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1938,
                      "nodeType": "ExpressionStatement",
                      "src": "35105:25:0"
                    }
                  ]
                },
                "id": 1940,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 1922,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1921,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "35013:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "35013:9:0"
                  },
                  {
                    "arguments": [],
                    "id": 1924,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1923,
                      "name": "notFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2079,
                      "src": "35023:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "35023:11:0"
                  },
                  {
                    "arguments": [],
                    "id": 1926,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 1925,
                      "name": "stopInEmergency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 64,
                      "src": "35035:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "35035:15:0"
                  }
                ],
                "name": "setEarlyParticipantWhitelist",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1920,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1917,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 1940,
                      "src": "34979:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1916,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "34979:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1919,
                      "name": "status",
                      "nodeType": "VariableDeclaration",
                      "scope": 1940,
                      "src": "34993:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 1918,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "34993:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "34978:27:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1927,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "35051:0:0"
                },
                "scope": 2092,
                "src": "34941:195:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 1955,
                  "nodeType": "Block",
                  "src": "35246:59:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 1948,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1946,
                              "name": "addr",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1942,
                              "src": "35261:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 1947,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "35269:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "35261:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 1945,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "35253:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 1949,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "35253:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 1950,
                      "nodeType": "ExpressionStatement",
                      "src": "35253:18:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 1953,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 1951,
                          "name": "multisigWallet",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1405,
                          "src": "35278:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 1952,
                          "name": "addr",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1942,
                          "src": "35295:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "35278:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 1954,
                      "nodeType": "ExpressionStatement",
                      "src": "35278:21:0"
                    }
                  ]
                },
                "id": 1956,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "setMultisig",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1943,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1942,
                      "name": "addr",
                      "nodeType": "VariableDeclaration",
                      "scope": 1956,
                      "src": "35223:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1941,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "35223:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "35222:14:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1944,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "35246:0:0"
                },
                "scope": 2092,
                "src": "35202:103:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 1993,
                  "nodeType": "Block",
                  "src": "35532:272:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "id": 1961,
                        "name": "finalized",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 1421,
                        "src": "35543:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "condition": {
                          "argumentTypes": null,
                          "id": 1966,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "!",
                          "prefix": true,
                          "src": "35592:11:0",
                          "subExpression": {
                            "argumentTypes": null,
                            "id": 1965,
                            "name": "configured",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1427,
                            "src": "35593:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "falseBody": {
                          "condition": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 1972,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 1970,
                              "name": "now",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2741,
                              "src": "35654:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 1971,
                              "name": "startsAt",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1407,
                              "src": "35660:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "35654:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          "falseBody": {
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 1982,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 1978,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 1976,
                                  "name": "now",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2741,
                                  "src": "35709:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<=",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "id": 1977,
                                  "name": "endsAt",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1409,
                                  "src": "35716:6:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "35709:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 1981,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "UnaryOperation",
                                "operator": "!",
                                "prefix": true,
                                "src": "35726:18:0",
                                "subExpression": {
                                  "argumentTypes": null,
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "id": 1979,
                                    "name": "isCrowdsaleFull",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2006,
                                    "src": "35727:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_internal_view$__$returns$_t_bool_$",
                                      "typeString": "function () view returns (bool)"
                                    }
                                  },
                                  "id": 1980,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "35727:17:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "35709:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": {
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1986,
                                  "name": "State",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1451,
                                  "src": "35785:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                                    "typeString": "type(enum GenericCrowdsale.State)"
                                  }
                                },
                                "id": 1987,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "Success",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "35785:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$1451",
                                  "typeString": "enum GenericCrowdsale.State"
                                }
                              },
                              "functionReturnParameters": 1960,
                              "id": 1988,
                              "nodeType": "Return",
                              "src": "35778:20:0"
                            },
                            "id": 1989,
                            "nodeType": "IfStatement",
                            "src": "35705:93:0",
                            "trueBody": {
                              "expression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 1983,
                                  "name": "State",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1451,
                                  "src": "35753:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                                    "typeString": "type(enum GenericCrowdsale.State)"
                                  }
                                },
                                "id": 1984,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "Funding",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "35753:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$1451",
                                  "typeString": "enum GenericCrowdsale.State"
                                }
                              },
                              "functionReturnParameters": 1960,
                              "id": 1985,
                              "nodeType": "Return",
                              "src": "35746:20:0"
                            }
                          },
                          "id": 1990,
                          "nodeType": "IfStatement",
                          "src": "35650:148:0",
                          "trueBody": {
                            "expression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 1973,
                                "name": "State",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1451,
                                "src": "35677:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                                  "typeString": "type(enum GenericCrowdsale.State)"
                                }
                              },
                              "id": 1974,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "PreFunding",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "35677:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_State_$1451",
                                "typeString": "enum GenericCrowdsale.State"
                              }
                            },
                            "functionReturnParameters": 1960,
                            "id": 1975,
                            "nodeType": "Return",
                            "src": "35670:23:0"
                          }
                        },
                        "id": 1991,
                        "nodeType": "IfStatement",
                        "src": "35588:210:0",
                        "trueBody": {
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 1967,
                              "name": "State",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1451,
                              "src": "35612:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                                "typeString": "type(enum GenericCrowdsale.State)"
                              }
                            },
                            "id": 1968,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "memberName": "PendingConfiguration",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "35612:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$1451",
                              "typeString": "enum GenericCrowdsale.State"
                            }
                          },
                          "functionReturnParameters": 1960,
                          "id": 1969,
                          "nodeType": "Return",
                          "src": "35605:33:0"
                        }
                      },
                      "id": 1992,
                      "nodeType": "IfStatement",
                      "src": "35539:259:0",
                      "trueBody": {
                        "expression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 1962,
                            "name": "State",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1451,
                            "src": "35561:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                              "typeString": "type(enum GenericCrowdsale.State)"
                            }
                          },
                          "id": 1963,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "memberName": "Finalized",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "35561:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$1451",
                            "typeString": "enum GenericCrowdsale.State"
                          }
                        },
                        "functionReturnParameters": 1960,
                        "id": 1964,
                        "nodeType": "Return",
                        "src": "35554:22:0"
                      }
                    }
                  ]
                },
                "id": 1994,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "getState",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1957,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "35501:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 1960,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1959,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 1994,
                      "src": "35525:5:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$1451",
                        "typeString": "enum GenericCrowdsale.State"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 1958,
                        "name": "State",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 1451,
                        "src": "35525:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$1451",
                          "typeString": "enum GenericCrowdsale.State"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "35524:7:0"
                },
                "scope": 2092,
                "src": "35484:320:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "id": 2001,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "assignTokens",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 1999,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 1996,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 2001,
                      "src": "36035:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 1995,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "36035:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 1998,
                      "name": "tokenAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 2001,
                      "src": "36053:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 1997,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "36053:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "36034:36:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2000,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "36079:0:0"
                },
                "scope": 2092,
                "src": "36013:67:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": null,
                "id": 2006,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "isCrowdsaleFull",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2002,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "36198:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2005,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2004,
                      "name": "full",
                      "nodeType": "VariableDeclaration",
                      "scope": 2006,
                      "src": "36224:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 2003,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "36224:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "36223:11:0"
                },
                "scope": 2092,
                "src": "36174:61:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2024,
                  "nodeType": "Block",
                  "src": "36444:74:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2015,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2013,
                          "name": "excedent",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2008,
                          "src": "36455:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 2014,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "36466:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "36455:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 2023,
                      "nodeType": "IfStatement",
                      "src": "36451:62:0",
                      "trueBody": {
                        "id": 2022,
                        "nodeType": "Block",
                        "src": "36469:44:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2019,
                                  "name": "excedent",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2008,
                                  "src": "36496:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2016,
                                  "name": "receiver",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2010,
                                  "src": "36478:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "id": 2018,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "transfer",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "36478:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_transfer_nonpayable$_t_uint256_$returns$__$",
                                  "typeString": "function (uint256)"
                                }
                              },
                              "id": 2020,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "36478:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 2021,
                            "nodeType": "ExpressionStatement",
                            "src": "36478:27:0"
                          }
                        ]
                      }
                    }
                  ]
                },
                "id": 2025,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "returnExcedent",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2011,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2008,
                      "name": "excedent",
                      "nodeType": "VariableDeclaration",
                      "scope": 2025,
                      "src": "36402:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2007,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "36402:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2010,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 2025,
                      "src": "36417:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2009,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "36417:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "36401:33:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2012,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "36444:0:0"
                },
                "scope": 2092,
                "src": "36378:140:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": null,
                "id": 2036,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "calculateTokenAmount",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2030,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2027,
                      "name": "weiAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 2036,
                      "src": "37223:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2026,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "37223:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2029,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 2036,
                      "src": "37239:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2028,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "37239:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "37222:34:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2035,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2032,
                      "name": "weiAllowed",
                      "nodeType": "VariableDeclaration",
                      "scope": 2036,
                      "src": "37280:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2031,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "37280:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2034,
                      "name": "tokenAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 2036,
                      "src": "37297:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2033,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "37297:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "37279:35:0"
                },
                "scope": 2092,
                "src": "37193:122:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2048,
                  "nodeType": "Block",
                  "src": "37381:49:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_enum$_State_$1451",
                              "typeString": "enum GenericCrowdsale.State"
                            },
                            "id": 2044,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "id": 2041,
                                "name": "getState",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1994,
                                "src": "37396:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_view$__$returns$_t_enum$_State_$1451_$",
                                  "typeString": "function () view returns (enum GenericCrowdsale.State)"
                                }
                              },
                              "id": 2042,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "37396:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_State_$1451",
                                "typeString": "enum GenericCrowdsale.State"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 2043,
                              "name": "state",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2038,
                              "src": "37410:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_enum$_State_$1451",
                                "typeString": "enum GenericCrowdsale.State"
                              }
                            },
                            "src": "37396:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 2040,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "37388:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 2045,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "37388:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2046,
                      "nodeType": "ExpressionStatement",
                      "src": "37388:28:0"
                    },
                    {
                      "id": 2047,
                      "nodeType": "PlaceholderStatement",
                      "src": "37423:1:0"
                    }
                  ]
                },
                "id": 2049,
                "name": "inState",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 2039,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2038,
                      "name": "state",
                      "nodeType": "VariableDeclaration",
                      "scope": 2049,
                      "src": "37368:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_enum$_State_$1451",
                        "typeString": "enum GenericCrowdsale.State"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 2037,
                        "name": "State",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 1451,
                        "src": "37368:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$1451",
                          "typeString": "enum GenericCrowdsale.State"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "37367:13:0"
                },
                "src": "37351:79:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2057,
                  "nodeType": "Block",
                  "src": "37466:52:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2053,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "37481:22:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 2052,
                              "name": "requiredSignedAddress",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 1430,
                              "src": "37482:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 2051,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "37473:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 2054,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "37473:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2055,
                      "nodeType": "ExpressionStatement",
                      "src": "37473:31:0"
                    },
                    {
                      "id": 2056,
                      "nodeType": "PlaceholderStatement",
                      "src": "37511:1:0"
                    }
                  ]
                },
                "id": 2058,
                "name": "unsignedBuyAllowed",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 2050,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "37463:2:0"
                },
                "src": "37436:82:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2078,
                  "nodeType": "Block",
                  "src": "37630:136:0",
                  "statements": [
                    {
                      "assignments": [
                        2061
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2061,
                          "name": "current_state",
                          "nodeType": "VariableDeclaration",
                          "scope": 2079,
                          "src": "37637:19:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_enum$_State_$1451",
                            "typeString": "enum GenericCrowdsale.State"
                          },
                          "typeName": {
                            "contractScope": null,
                            "id": 2060,
                            "name": "State",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 1451,
                            "src": "37637:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_enum$_State_$1451",
                              "typeString": "enum GenericCrowdsale.State"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2064,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 2062,
                          "name": "getState",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1994,
                          "src": "37659:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$__$returns$_t_enum$_State_$1451_$",
                            "typeString": "function () view returns (enum GenericCrowdsale.State)"
                          }
                        },
                        "id": 2063,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "37659:10:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$1451",
                          "typeString": "enum GenericCrowdsale.State"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "37637:32:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 2074,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_enum$_State_$1451",
                                "typeString": "enum GenericCrowdsale.State"
                              },
                              "id": 2069,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 2066,
                                "name": "current_state",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2061,
                                "src": "37684:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$1451",
                                  "typeString": "enum GenericCrowdsale.State"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2067,
                                  "name": "State",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1451,
                                  "src": "37701:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                                    "typeString": "type(enum GenericCrowdsale.State)"
                                  }
                                },
                                "id": 2068,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "PreFunding",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "37701:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$1451",
                                  "typeString": "enum GenericCrowdsale.State"
                                }
                              },
                              "src": "37684:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "||",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_enum$_State_$1451",
                                "typeString": "enum GenericCrowdsale.State"
                              },
                              "id": 2073,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 2070,
                                "name": "current_state",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2061,
                                "src": "37721:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$1451",
                                  "typeString": "enum GenericCrowdsale.State"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2071,
                                  "name": "State",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 1451,
                                  "src": "37738:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                                    "typeString": "type(enum GenericCrowdsale.State)"
                                  }
                                },
                                "id": 2072,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "Funding",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "37738:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_enum$_State_$1451",
                                  "typeString": "enum GenericCrowdsale.State"
                                }
                              },
                              "src": "37721:30:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "37684:67:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 2065,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "37676:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 2075,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "37676:76:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2076,
                      "nodeType": "ExpressionStatement",
                      "src": "37676:76:0"
                    },
                    {
                      "id": 2077,
                      "nodeType": "PlaceholderStatement",
                      "src": "37759:1:0"
                    }
                  ]
                },
                "id": 2079,
                "name": "notFinished",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 2059,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "37627:2:0"
                },
                "src": "37607:159:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2090,
                  "nodeType": "Block",
                  "src": "37817:69:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint128",
                              "typeString": "uint128"
                            },
                            "id": 2086,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2084,
                              "name": "customerId",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2081,
                              "src": "37832:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint128",
                                "typeString": "uint128"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 2085,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "37846:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "37832:15:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 2083,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "37824:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 2087,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "37824:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2088,
                      "nodeType": "ExpressionStatement",
                      "src": "37824:24:0"
                    },
                    {
                      "id": 2089,
                      "nodeType": "PlaceholderStatement",
                      "src": "37879:1:0"
                    }
                  ]
                },
                "id": 2091,
                "name": "validCustomerId",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 2082,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2081,
                      "name": "customerId",
                      "nodeType": "VariableDeclaration",
                      "scope": 2091,
                      "src": "37797:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint128",
                        "typeString": "uint128"
                      },
                      "typeName": {
                        "id": 2080,
                        "name": "uint128",
                        "nodeType": "ElementaryTypeName",
                        "src": "37797:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint128",
                          "typeString": "uint128"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "37796:20:0"
                },
                "src": "37772:114:0",
                "visibility": "internal"
              }
            ],
            "scope": 2728,
            "src": "24976:12913:0"
          },
          {
            "id": 2093,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "37891:24:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 2113,
            "linearizedBaseContracts": [
              2113
            ],
            "name": "DeploymentInfo",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 2095,
                "name": "deployed_on",
                "nodeType": "VariableDeclaration",
                "scope": 2113,
                "src": "38013:24:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2094,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "38013:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 2103,
                  "nodeType": "Block",
                  "src": "38077:39:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 2101,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 2098,
                          "name": "deployed_on",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2095,
                          "src": "38084:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 2099,
                            "name": "block",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2731,
                            "src": "38098:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_block",
                              "typeString": "block"
                            }
                          },
                          "id": 2100,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "number",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "38098:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "38084:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 2102,
                      "nodeType": "ExpressionStatement",
                      "src": "38084:26:0"
                    }
                  ]
                },
                "id": 2104,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "DeploymentInfo",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2096,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "38067:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2097,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "38077:0:0"
                },
                "scope": 2113,
                "src": "38044:72:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2111,
                  "nodeType": "Block",
                  "src": "38181:31:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 2109,
                        "name": "deployed_on",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 2095,
                        "src": "38195:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 2108,
                      "id": 2110,
                      "nodeType": "Return",
                      "src": "38188:18:0"
                    }
                  ]
                },
                "id": 2112,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "getDeploymentBlock",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2105,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "38151:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2108,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2107,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 2112,
                      "src": "38175:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2106,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "38175:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "38174:6:0"
                },
                "scope": 2113,
                "src": "38124:88:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 2728,
            "src": "37984:231:0"
          },
          {
            "id": 2114,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".19"
            ],
            "nodeType": "PragmaDirective",
            "src": "38518:24:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": "@dev Tranche based pricing.\n      Implementing \"first price\" tranches, meaning, that if a buyer's order is\n      covering more than one tranche, the price of the lowest tranche will apply\n      to the whole order.",
            "fullyImplemented": true,
            "id": 2360,
            "linearizedBaseContracts": [
              2360
            ],
            "name": "TokenTranchePricing",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 2117,
                "libraryName": {
                  "contractScope": null,
                  "id": 2115,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 265,
                  "src": "38821:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$265",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "38815:24:0",
                "typeName": {
                  "id": 2116,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "38834:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "canonicalName": "TokenTranchePricing.Tranche",
                "id": 2126,
                "members": [
                  {
                    "constant": false,
                    "id": 2119,
                    "name": "amount",
                    "nodeType": "VariableDeclaration",
                    "scope": 2126,
                    "src": "38991:11:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 2118,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "38991:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 2121,
                    "name": "start",
                    "nodeType": "VariableDeclaration",
                    "scope": 2126,
                    "src": "39109:10:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 2120,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "39109:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 2123,
                    "name": "end",
                    "nodeType": "VariableDeclaration",
                    "scope": 2126,
                    "src": "39184:8:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 2122,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "39184:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 2125,
                    "name": "price",
                    "nodeType": "VariableDeclaration",
                    "scope": 2126,
                    "src": "39277:10:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 2124,
                      "name": "uint",
                      "nodeType": "ElementaryTypeName",
                      "src": "39277:4:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  }
                ],
                "name": "Tranche",
                "nodeType": "StructDefinition",
                "scope": 2360,
                "src": "38905:388:0",
                "visibility": "public"
              },
              {
                "constant": true,
                "id": 2129,
                "name": "amount_offset",
                "nodeType": "VariableDeclaration",
                "scope": 2360,
                "src": "39386:39:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2127,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "39386:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "30",
                  "id": 2128,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "39424:1:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                },
                "visibility": "private"
              },
              {
                "constant": true,
                "id": 2132,
                "name": "start_offset",
                "nodeType": "VariableDeclaration",
                "scope": 2360,
                "src": "39430:38:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2130,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "39430:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "31",
                  "id": 2131,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "39467:1:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_1_by_1",
                    "typeString": "int_const 1"
                  },
                  "value": "1"
                },
                "visibility": "private"
              },
              {
                "constant": true,
                "id": 2135,
                "name": "end_offset",
                "nodeType": "VariableDeclaration",
                "scope": 2360,
                "src": "39473:36:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2133,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "39473:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "32",
                  "id": 2134,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "39508:1:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_2_by_1",
                    "typeString": "int_const 2"
                  },
                  "value": "2"
                },
                "visibility": "private"
              },
              {
                "constant": true,
                "id": 2138,
                "name": "price_offset",
                "nodeType": "VariableDeclaration",
                "scope": 2360,
                "src": "39514:38:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2136,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "39514:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "33",
                  "id": 2137,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "39551:1:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_3_by_1",
                    "typeString": "int_const 3"
                  },
                  "value": "3"
                },
                "visibility": "private"
              },
              {
                "constant": true,
                "id": 2141,
                "name": "tranche_size",
                "nodeType": "VariableDeclaration",
                "scope": 2360,
                "src": "39557:38:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2139,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "39557:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "34",
                  "id": 2140,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "39594:1:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_4_by_1",
                    "typeString": "int_const 4"
                  },
                  "value": "4"
                },
                "visibility": "private"
              },
              {
                "constant": false,
                "id": 2144,
                "name": "tranches",
                "nodeType": "VariableDeclaration",
                "scope": 2360,
                "src": "39602:25:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_Tranche_$2126_storage_$dyn_storage",
                  "typeString": "struct TokenTranchePricing.Tranche storage ref[] storage ref"
                },
                "typeName": {
                  "baseType": {
                    "contractScope": null,
                    "id": 2142,
                    "name": "Tranche",
                    "nodeType": "UserDefinedTypeName",
                    "referencedDeclaration": 2126,
                    "src": "39602:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_Tranche_$2126_storage_ptr",
                      "typeString": "struct TokenTranchePricing.Tranche storage pointer"
                    }
                  },
                  "id": 2143,
                  "length": null,
                  "nodeType": "ArrayTypeName",
                  "src": "39602:9:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_Tranche_$2126_storage_$dyn_storage_ptr",
                    "typeString": "struct TokenTranchePricing.Tranche storage ref[] storage pointer"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2152,
                  "nodeType": "Block",
                  "src": "39690:35:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2149,
                          "name": "tranches",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2144,
                          "src": "39704:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_array$_t_struct$_Tranche_$2126_storage_$dyn_storage",
                            "typeString": "struct TokenTranchePricing.Tranche storage ref[] storage ref"
                          }
                        },
                        "id": 2150,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "39704:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 2148,
                      "id": 2151,
                      "nodeType": "Return",
                      "src": "39697:22:0"
                    }
                  ]
                },
                "id": 2153,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "getTranchesLength",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2145,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "39660:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2148,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2147,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 2153,
                      "src": "39684:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2146,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "39684:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "39683:6:0"
                },
                "scope": 2360,
                "src": "39634:91:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2295,
                  "nodeType": "Block",
                  "src": "40090:1295:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2165,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2163,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2160,
                                  "name": "init_tranches",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2156,
                                  "src": "40147:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                    "typeString": "uint256[] memory"
                                  }
                                },
                                "id": 2161,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "40147:20:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "%",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 2162,
                                "name": "tranche_size",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2141,
                                "src": "40170:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "40147:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 2164,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "40186:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "40147:40:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 2159,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "40139:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 2166,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "40139:49:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2167,
                      "nodeType": "ExpressionStatement",
                      "src": "40139:49:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2173,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2169,
                                "name": "init_tranches",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2156,
                                "src": "40385:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                  "typeString": "uint256[] memory"
                                }
                              },
                              "id": 2171,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 2170,
                                "name": "amount_offset",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2129,
                                "src": "40399:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "40385:28:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 2172,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "40416:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "40385:32:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 2168,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "40377:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 2174,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "40377:41:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2175,
                      "nodeType": "ExpressionStatement",
                      "src": "40377:41:0"
                    },
                    {
                      "assignments": [
                        2177
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2177,
                          "name": "input_tranches_length",
                          "nodeType": "VariableDeclaration",
                          "scope": 2296,
                          "src": "40427:26:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 2176,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "40427:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2183,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2181,
                            "name": "tranche_size",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2141,
                            "src": "40481:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 2178,
                              "name": "init_tranches",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2156,
                              "src": "40456:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                "typeString": "uint256[] memory"
                              }
                            },
                            "id": 2179,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "40456:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2180,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 152,
                          "src": "40456:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 2182,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "40456:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "40427:67:0"
                    },
                    {
                      "assignments": [],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2185,
                          "name": "last_tranche",
                          "nodeType": "VariableDeclaration",
                          "scope": 2296,
                          "src": "40501:27:0",
                          "stateVariable": false,
                          "storageLocation": "memory",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$2126_memory_ptr",
                            "typeString": "struct TokenTranchePricing.Tranche memory"
                          },
                          "typeName": {
                            "contractScope": null,
                            "id": 2184,
                            "name": "Tranche",
                            "nodeType": "UserDefinedTypeName",
                            "referencedDeclaration": 2126,
                            "src": "40501:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_Tranche_$2126_storage_ptr",
                              "typeString": "struct TokenTranchePricing.Tranche storage pointer"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2186,
                      "initialValue": null,
                      "nodeType": "VariableDeclarationStatement",
                      "src": "40501:27:0"
                    },
                    {
                      "body": {
                        "id": 2293,
                        "nodeType": "Block",
                        "src": "40584:796:0",
                        "statements": [
                          {
                            "assignments": [
                              2198
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2198,
                                "name": "tranche_offset",
                                "nodeType": "VariableDeclaration",
                                "scope": 2296,
                                "src": "40593:19:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2197,
                                  "name": "uint",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "40593:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2203,
                            "initialValue": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2201,
                                  "name": "tranche_size",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2141,
                                  "src": "40621:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2199,
                                  "name": "i",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2188,
                                  "src": "40615:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 2200,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "mul",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 134,
                                "src": "40615:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 2202,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "40615:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "40593:41:0"
                          },
                          {
                            "assignments": [
                              2205
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2205,
                                "name": "amount",
                                "nodeType": "VariableDeclaration",
                                "scope": 2296,
                                "src": "40643:11:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2204,
                                  "name": "uint",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "40643:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2212,
                            "initialValue": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2206,
                                "name": "init_tranches",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2156,
                                "src": "40657:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                  "typeString": "uint256[] memory"
                                }
                              },
                              "id": 2211,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2209,
                                    "name": "amount_offset",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2129,
                                    "src": "40690:13:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2207,
                                    "name": "tranche_offset",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2198,
                                    "src": "40671:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2208,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "add",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 196,
                                  "src": "40671:18:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2210,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "40671:33:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "40657:48:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "40643:62:0"
                          },
                          {
                            "assignments": [
                              2214
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2214,
                                "name": "start",
                                "nodeType": "VariableDeclaration",
                                "scope": 2296,
                                "src": "40714:10:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2213,
                                  "name": "uint",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "40714:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2221,
                            "initialValue": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2215,
                                "name": "init_tranches",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2156,
                                "src": "40727:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                  "typeString": "uint256[] memory"
                                }
                              },
                              "id": 2220,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2218,
                                    "name": "start_offset",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2132,
                                    "src": "40760:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2216,
                                    "name": "tranche_offset",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2198,
                                    "src": "40741:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2217,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "add",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 196,
                                  "src": "40741:18:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2219,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "40741:32:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "40727:47:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "40714:60:0"
                          },
                          {
                            "assignments": [
                              2223
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2223,
                                "name": "end",
                                "nodeType": "VariableDeclaration",
                                "scope": 2296,
                                "src": "40783:8:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2222,
                                  "name": "uint",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "40783:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2230,
                            "initialValue": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2224,
                                "name": "init_tranches",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2156,
                                "src": "40794:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                  "typeString": "uint256[] memory"
                                }
                              },
                              "id": 2229,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2227,
                                    "name": "end_offset",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2135,
                                    "src": "40827:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2225,
                                    "name": "tranche_offset",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2198,
                                    "src": "40808:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2226,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "add",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 196,
                                  "src": "40808:18:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2228,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "40808:30:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "40794:45:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "40783:56:0"
                          },
                          {
                            "assignments": [
                              2232
                            ],
                            "declarations": [
                              {
                                "constant": false,
                                "id": 2232,
                                "name": "price",
                                "nodeType": "VariableDeclaration",
                                "scope": 2296,
                                "src": "40848:10:0",
                                "stateVariable": false,
                                "storageLocation": "default",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "typeName": {
                                  "id": 2231,
                                  "name": "uint",
                                  "nodeType": "ElementaryTypeName",
                                  "src": "40848:4:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "value": null,
                                "visibility": "internal"
                              }
                            ],
                            "id": 2239,
                            "initialValue": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 2233,
                                "name": "init_tranches",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2156,
                                "src": "40861:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                                  "typeString": "uint256[] memory"
                                }
                              },
                              "id": 2238,
                              "indexExpression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2236,
                                    "name": "price_offset",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2138,
                                    "src": "40894:12:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2234,
                                    "name": "tranche_offset",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2198,
                                    "src": "40875:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2235,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "add",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 196,
                                  "src": "40875:18:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2237,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "40875:32:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "40861:47:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "VariableDeclarationStatement",
                            "src": "40848:60:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 2247,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2243,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "id": 2241,
                                      "name": "start",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2214,
                                      "src": "40952:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "id": 2242,
                                      "name": "end",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2223,
                                      "src": "40960:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "40952:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "&&",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    "id": 2246,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "id": 2244,
                                      "name": "now",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2741,
                                      "src": "40967:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "<",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "id": 2245,
                                      "name": "end",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2223,
                                      "src": "40973:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "src": "40967:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "40952:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                ],
                                "id": 2240,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2742,
                                "src": "40944:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                                  "typeString": "function (bool) pure"
                                }
                              },
                              "id": 2248,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "40944:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 2249,
                            "nodeType": "ExpressionStatement",
                            "src": "40944:33:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  },
                                  "id": 2275,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "commonType": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    },
                                    "id": 2264,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "leftExpression": {
                                      "argumentTypes": null,
                                      "commonType": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      },
                                      "id": 2253,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "leftExpression": {
                                        "argumentTypes": null,
                                        "id": 2251,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2188,
                                        "src": "41132:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "nodeType": "BinaryOperation",
                                      "operator": "==",
                                      "rightExpression": {
                                        "argumentTypes": null,
                                        "hexValue": "30",
                                        "id": 2252,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "kind": "number",
                                        "lValueRequested": false,
                                        "nodeType": "Literal",
                                        "src": "41137:1:0",
                                        "subdenomination": null,
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_rational_0_by_1",
                                          "typeString": "int_const 0"
                                        },
                                        "value": "0"
                                      },
                                      "src": "41132:6:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "nodeType": "BinaryOperation",
                                    "operator": "||",
                                    "rightExpression": {
                                      "argumentTypes": null,
                                      "components": [
                                        {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          },
                                          "id": 2262,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 2257,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "argumentTypes": null,
                                              "id": 2254,
                                              "name": "end",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2223,
                                              "src": "41143:3:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": ">=",
                                            "rightExpression": {
                                              "argumentTypes": null,
                                              "expression": {
                                                "argumentTypes": null,
                                                "id": 2255,
                                                "name": "last_tranche",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2185,
                                                "src": "41150:12:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_Tranche_$2126_memory_ptr",
                                                  "typeString": "struct TokenTranchePricing.Tranche memory"
                                                }
                                              },
                                              "id": 2256,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "end",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 2123,
                                              "src": "41150:16:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "41143:23:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": "&&",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "commonType": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            },
                                            "id": 2261,
                                            "isConstant": false,
                                            "isLValue": false,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "leftExpression": {
                                              "argumentTypes": null,
                                              "id": 2258,
                                              "name": "amount",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2205,
                                              "src": "41170:6:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "nodeType": "BinaryOperation",
                                            "operator": ">",
                                            "rightExpression": {
                                              "argumentTypes": null,
                                              "expression": {
                                                "argumentTypes": null,
                                                "id": 2259,
                                                "name": "last_tranche",
                                                "nodeType": "Identifier",
                                                "overloadedDeclarations": [],
                                                "referencedDeclaration": 2185,
                                                "src": "41179:12:0",
                                                "typeDescriptions": {
                                                  "typeIdentifier": "t_struct$_Tranche_$2126_memory_ptr",
                                                  "typeString": "struct TokenTranchePricing.Tranche memory"
                                                }
                                              },
                                              "id": 2260,
                                              "isConstant": false,
                                              "isLValue": true,
                                              "isPure": false,
                                              "lValueRequested": false,
                                              "memberName": "amount",
                                              "nodeType": "MemberAccess",
                                              "referencedDeclaration": 2119,
                                              "src": "41179:19:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_uint256",
                                                "typeString": "uint256"
                                              }
                                            },
                                            "src": "41170:28:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_bool",
                                              "typeString": "bool"
                                            }
                                          },
                                          "src": "41143:55:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        }
                                      ],
                                      "id": 2263,
                                      "isConstant": false,
                                      "isInlineArray": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "TupleExpression",
                                      "src": "41142:57:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bool",
                                        "typeString": "bool"
                                      }
                                    },
                                    "src": "41132:67:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "||",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "components": [
                                      {
                                        "argumentTypes": null,
                                        "commonType": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        },
                                        "id": 2273,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": false,
                                        "lValueRequested": false,
                                        "leftExpression": {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 2268,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 2265,
                                            "name": "end",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2223,
                                            "src": "41219:3:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": ">",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "id": 2266,
                                              "name": "last_tranche",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2185,
                                              "src": "41225:12:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_Tranche_$2126_memory_ptr",
                                                "typeString": "struct TokenTranchePricing.Tranche memory"
                                              }
                                            },
                                            "id": 2267,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "end",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 2123,
                                            "src": "41225:16:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "41219:22:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "nodeType": "BinaryOperation",
                                        "operator": "&&",
                                        "rightExpression": {
                                          "argumentTypes": null,
                                          "commonType": {
                                            "typeIdentifier": "t_uint256",
                                            "typeString": "uint256"
                                          },
                                          "id": 2272,
                                          "isConstant": false,
                                          "isLValue": false,
                                          "isPure": false,
                                          "lValueRequested": false,
                                          "leftExpression": {
                                            "argumentTypes": null,
                                            "id": 2269,
                                            "name": "amount",
                                            "nodeType": "Identifier",
                                            "overloadedDeclarations": [],
                                            "referencedDeclaration": 2205,
                                            "src": "41245:6:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "nodeType": "BinaryOperation",
                                          "operator": ">=",
                                          "rightExpression": {
                                            "argumentTypes": null,
                                            "expression": {
                                              "argumentTypes": null,
                                              "id": 2270,
                                              "name": "last_tranche",
                                              "nodeType": "Identifier",
                                              "overloadedDeclarations": [],
                                              "referencedDeclaration": 2185,
                                              "src": "41255:12:0",
                                              "typeDescriptions": {
                                                "typeIdentifier": "t_struct$_Tranche_$2126_memory_ptr",
                                                "typeString": "struct TokenTranchePricing.Tranche memory"
                                              }
                                            },
                                            "id": 2271,
                                            "isConstant": false,
                                            "isLValue": true,
                                            "isPure": false,
                                            "lValueRequested": false,
                                            "memberName": "amount",
                                            "nodeType": "MemberAccess",
                                            "referencedDeclaration": 2119,
                                            "src": "41255:19:0",
                                            "typeDescriptions": {
                                              "typeIdentifier": "t_uint256",
                                              "typeString": "uint256"
                                            }
                                          },
                                          "src": "41245:29:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_bool",
                                            "typeString": "bool"
                                          }
                                        },
                                        "src": "41219:55:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_bool",
                                          "typeString": "bool"
                                        }
                                      }
                                    ],
                                    "id": 2274,
                                    "isConstant": false,
                                    "isInlineArray": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "TupleExpression",
                                    "src": "41218:57:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_bool",
                                      "typeString": "bool"
                                    }
                                  },
                                  "src": "41132:143:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                ],
                                "id": 2250,
                                "name": "require",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2742,
                                "src": "41124:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                                  "typeString": "function (bool) pure"
                                }
                              },
                              "id": 2276,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "41124:152:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_tuple$__$",
                                "typeString": "tuple()"
                              }
                            },
                            "id": 2277,
                            "nodeType": "ExpressionStatement",
                            "src": "41124:152:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 2285,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "id": 2278,
                                "name": "last_tranche",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2185,
                                "src": "41287:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Tranche_$2126_memory_ptr",
                                  "typeString": "struct TokenTranchePricing.Tranche memory"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2280,
                                    "name": "amount",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2205,
                                    "src": "41310:6:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2281,
                                    "name": "start",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2214,
                                    "src": "41318:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2282,
                                    "name": "end",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2223,
                                    "src": "41325:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  {
                                    "argumentTypes": null,
                                    "id": 2283,
                                    "name": "price",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2232,
                                    "src": "41330:5:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    },
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 2279,
                                  "name": "Tranche",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2126,
                                  "src": "41302:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_struct$_Tranche_$2126_storage_ptr_$",
                                    "typeString": "type(struct TokenTranchePricing.Tranche storage pointer)"
                                  }
                                },
                                "id": 2284,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "structConstructorCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "41302:34:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_Tranche_$2126_memory",
                                  "typeString": "struct TokenTranchePricing.Tranche memory"
                                }
                              },
                              "src": "41287:49:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_Tranche_$2126_memory_ptr",
                                "typeString": "struct TokenTranchePricing.Tranche memory"
                              }
                            },
                            "id": 2286,
                            "nodeType": "ExpressionStatement",
                            "src": "41287:49:0"
                          },
                          {
                            "expression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2290,
                                  "name": "last_tranche",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2185,
                                  "src": "41359:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_Tranche_$2126_memory_ptr",
                                    "typeString": "struct TokenTranchePricing.Tranche memory"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_struct$_Tranche_$2126_memory_ptr",
                                    "typeString": "struct TokenTranchePricing.Tranche memory"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 2287,
                                  "name": "tranches",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2144,
                                  "src": "41345:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_array$_t_struct$_Tranche_$2126_storage_$dyn_storage",
                                    "typeString": "struct TokenTranchePricing.Tranche storage ref[] storage ref"
                                  }
                                },
                                "id": 2289,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "push",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "41345:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_arraypush_nonpayable$_t_struct$_Tranche_$2126_storage_$returns$_t_uint256_$",
                                  "typeString": "function (struct TokenTranchePricing.Tranche storage ref) returns (uint256)"
                                }
                              },
                              "id": 2291,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "41345:27:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2292,
                            "nodeType": "ExpressionStatement",
                            "src": "41345:27:0"
                          }
                        ]
                      },
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2193,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2191,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2188,
                          "src": "40552:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 2192,
                          "name": "input_tranches_length",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2177,
                          "src": "40556:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "40552:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 2294,
                      "initializationExpression": {
                        "assignments": [
                          2188
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2188,
                            "name": "i",
                            "nodeType": "VariableDeclaration",
                            "scope": 2296,
                            "src": "40540:6:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2187,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "40540:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2190,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 2189,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "40549:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "40540:10:0"
                      },
                      "loopExpression": {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2195,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "40579:3:0",
                          "subExpression": {
                            "argumentTypes": null,
                            "id": 2194,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2188,
                            "src": "40579:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2196,
                        "nodeType": "ExpressionStatement",
                        "src": "40579:3:0"
                      },
                      "nodeType": "ForStatement",
                      "src": "40535:845:0"
                    }
                  ]
                },
                "id": 2296,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "configurationTokenTranchePricing",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2157,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2156,
                      "name": "init_tranches",
                      "nodeType": "VariableDeclaration",
                      "scope": 2296,
                      "src": "40059:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 2154,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "40059:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2155,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "40059:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[] storage pointer"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "40058:22:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2158,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "40090:0:0"
                },
                "scope": 2360,
                "src": "40017:1368:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2345,
                  "nodeType": "Block",
                  "src": "41737:254:0",
                  "statements": [
                    {
                      "body": {
                        "id": 2340,
                        "nodeType": "Block",
                        "src": "41787:145:0",
                        "statements": [
                          {
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              },
                              "id": 2333,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                },
                                "id": 2326,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2319,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "id": 2314,
                                        "name": "tranches",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2144,
                                        "src": "41800:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_struct$_Tranche_$2126_storage_$dyn_storage",
                                          "typeString": "struct TokenTranchePricing.Tranche storage ref[] storage ref"
                                        }
                                      },
                                      "id": 2316,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 2315,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2304,
                                        "src": "41809:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "41800:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Tranche_$2126_storage",
                                        "typeString": "struct TokenTranchePricing.Tranche storage ref"
                                      }
                                    },
                                    "id": 2317,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "start",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2121,
                                    "src": "41800:17:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "<=",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "id": 2318,
                                    "name": "now",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2741,
                                    "src": "41821:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "41800:24:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "&&",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "commonType": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  },
                                  "id": 2325,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "leftExpression": {
                                    "argumentTypes": null,
                                    "id": 2320,
                                    "name": "now",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2741,
                                    "src": "41828:3:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "nodeType": "BinaryOperation",
                                  "operator": "<",
                                  "rightExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "baseExpression": {
                                        "argumentTypes": null,
                                        "id": 2321,
                                        "name": "tranches",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2144,
                                        "src": "41834:8:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_array$_t_struct$_Tranche_$2126_storage_$dyn_storage",
                                          "typeString": "struct TokenTranchePricing.Tranche storage ref[] storage ref"
                                        }
                                      },
                                      "id": 2323,
                                      "indexExpression": {
                                        "argumentTypes": null,
                                        "id": 2322,
                                        "name": "i",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2304,
                                        "src": "41843:1:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "isConstant": false,
                                      "isLValue": true,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "nodeType": "IndexAccess",
                                      "src": "41834:11:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_struct$_Tranche_$2126_storage",
                                        "typeString": "struct TokenTranchePricing.Tranche storage ref"
                                      }
                                    },
                                    "id": 2324,
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "end",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 2123,
                                    "src": "41834:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "src": "41828:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bool",
                                    "typeString": "bool"
                                  }
                                },
                                "src": "41800:49:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "&&",
                              "rightExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 2332,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 2327,
                                  "name": "tokensSold",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2298,
                                  "src": "41853:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "<",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 2328,
                                      "name": "tranches",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2144,
                                      "src": "41866:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Tranche_$2126_storage_$dyn_storage",
                                        "typeString": "struct TokenTranchePricing.Tranche storage ref[] storage ref"
                                      }
                                    },
                                    "id": 2330,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 2329,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2304,
                                      "src": "41875:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "41866:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Tranche_$2126_storage",
                                      "typeString": "struct TokenTranchePricing.Tranche storage ref"
                                    }
                                  },
                                  "id": 2331,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "amount",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 2119,
                                  "src": "41866:18:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "src": "41853:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bool",
                                  "typeString": "bool"
                                }
                              },
                              "src": "41800:84:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": null,
                            "id": 2339,
                            "nodeType": "IfStatement",
                            "src": "41796:129:0",
                            "trueBody": {
                              "id": 2338,
                              "nodeType": "Block",
                              "src": "41886:39:0",
                              "statements": [
                                {
                                  "expression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 2334,
                                      "name": "tranches",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2144,
                                      "src": "41904:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_array$_t_struct$_Tranche_$2126_storage_$dyn_storage",
                                        "typeString": "struct TokenTranchePricing.Tranche storage ref[] storage ref"
                                      }
                                    },
                                    "id": 2336,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "id": 2335,
                                      "name": "i",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2304,
                                      "src": "41913:1:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_uint256",
                                        "typeString": "uint256"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "41904:11:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_Tranche_$2126_storage",
                                      "typeString": "struct TokenTranchePricing.Tranche storage ref"
                                    }
                                  },
                                  "functionReturnParameters": 2302,
                                  "id": 2337,
                                  "nodeType": "Return",
                                  "src": "41897:18:0"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2310,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2307,
                          "name": "i",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2304,
                          "src": "41761:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 2308,
                            "name": "tranches",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2144,
                            "src": "41765:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_struct$_Tranche_$2126_storage_$dyn_storage",
                              "typeString": "struct TokenTranchePricing.Tranche storage ref[] storage ref"
                            }
                          },
                          "id": 2309,
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "length",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "41765:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "41761:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 2341,
                      "initializationExpression": {
                        "assignments": [
                          2304
                        ],
                        "declarations": [
                          {
                            "constant": false,
                            "id": 2304,
                            "name": "i",
                            "nodeType": "VariableDeclaration",
                            "scope": 2346,
                            "src": "41749:6:0",
                            "stateVariable": false,
                            "storageLocation": "default",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "typeName": {
                              "id": 2303,
                              "name": "uint",
                              "nodeType": "ElementaryTypeName",
                              "src": "41749:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "value": null,
                            "visibility": "internal"
                          }
                        ],
                        "id": 2306,
                        "initialValue": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 2305,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "41758:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "nodeType": "VariableDeclarationStatement",
                        "src": "41749:10:0"
                      },
                      "loopExpression": {
                        "expression": {
                          "argumentTypes": null,
                          "id": 2312,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "UnaryOperation",
                          "operator": "++",
                          "prefix": false,
                          "src": "41782:3:0",
                          "subExpression": {
                            "argumentTypes": null,
                            "id": 2311,
                            "name": "i",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2304,
                            "src": "41782:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2313,
                        "nodeType": "ExpressionStatement",
                        "src": "41782:3:0"
                      },
                      "nodeType": "ForStatement",
                      "src": "41744:188:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 2342,
                          "name": "revert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2743,
                          "src": "41977:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_revert_pure$__$returns$__$",
                            "typeString": "function () pure"
                          }
                        },
                        "id": 2343,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "41977:8:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2344,
                      "nodeType": "ExpressionStatement",
                      "src": "41977:8:0"
                    }
                  ]
                },
                "id": 2346,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "getCurrentTranche",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2299,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2298,
                      "name": "tokensSold",
                      "nodeType": "VariableDeclaration",
                      "scope": 2346,
                      "src": "41681:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2297,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "41681:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "41680:17:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2302,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2301,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 2346,
                      "src": "41720:7:0",
                      "stateVariable": false,
                      "storageLocation": "storage",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_Tranche_$2126_storage_ptr",
                        "typeString": "struct TokenTranchePricing.Tranche storage pointer"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 2300,
                        "name": "Tranche",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 2126,
                        "src": "41720:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_Tranche_$2126_storage_ptr",
                          "typeString": "struct TokenTranchePricing.Tranche storage pointer"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "41719:17:0"
                },
                "scope": 2360,
                "src": "41654:337:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "private"
              },
              {
                "body": {
                  "id": 2358,
                  "nodeType": "Block",
                  "src": "42285:55:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2354,
                              "name": "tokensSold",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2348,
                              "src": "42317:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 2353,
                            "name": "getCurrentTranche",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2346,
                            "src": "42299:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_struct$_Tranche_$2126_storage_ptr_$",
                              "typeString": "function (uint256) view returns (struct TokenTranchePricing.Tranche storage pointer)"
                            }
                          },
                          "id": 2355,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "42299:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_struct$_Tranche_$2126_storage_ptr",
                            "typeString": "struct TokenTranchePricing.Tranche storage pointer"
                          }
                        },
                        "id": 2356,
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "price",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": 2125,
                        "src": "42299:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 2352,
                      "id": 2357,
                      "nodeType": "Return",
                      "src": "42292:42:0"
                    }
                  ]
                },
                "id": 2359,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "getCurrentPrice",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2349,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2348,
                      "name": "tokensSold",
                      "nodeType": "VariableDeclaration",
                      "scope": 2359,
                      "src": "42232:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2347,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "42232:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "42231:17:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2352,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2351,
                      "name": "result",
                      "nodeType": "VariableDeclaration",
                      "scope": 2359,
                      "src": "42272:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2350,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "42272:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "42271:13:0"
                },
                "scope": 2360,
                "src": "42207:133:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 2728,
            "src": "38779:3566:0"
          },
          {
            "baseContracts": [
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 2361,
                  "name": "GenericCrowdsale",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 2092,
                  "src": "42477:16:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_GenericCrowdsale_$2092",
                    "typeString": "contract GenericCrowdsale"
                  }
                },
                "id": 2362,
                "nodeType": "InheritanceSpecifier",
                "src": "42477:16:0"
              },
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 2363,
                  "name": "LostAndFoundToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 1172,
                  "src": "42495:17:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_LostAndFoundToken_$1172",
                    "typeString": "contract LostAndFoundToken"
                  }
                },
                "id": 2364,
                "nodeType": "InheritanceSpecifier",
                "src": "42495:17:0"
              },
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 2365,
                  "name": "DeploymentInfo",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 2113,
                  "src": "42514:14:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_DeploymentInfo_$2113",
                    "typeString": "contract DeploymentInfo"
                  }
                },
                "id": 2366,
                "nodeType": "InheritanceSpecifier",
                "src": "42514:14:0"
              },
              {
                "arguments": [],
                "baseName": {
                  "contractScope": null,
                  "id": 2367,
                  "name": "TokenTranchePricing",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 2360,
                  "src": "42530:19:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_TokenTranchePricing_$2360",
                    "typeString": "contract TokenTranchePricing"
                  }
                },
                "id": 2368,
                "nodeType": "InheritanceSpecifier",
                "src": "42530:19:0"
              }
            ],
            "contractDependencies": [
              103,
              47,
              1172,
              1396,
              2092,
              2113,
              2360
            ],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 2727,
            "linearizedBaseContracts": [
              2727,
              2360,
              2113,
              1172,
              2092,
              103,
              47
            ],
            "name": "Crowdsale",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 2370,
                "name": "sellable_tokens",
                "nodeType": "VariableDeclaration",
                "scope": 2727,
                "src": "42555:27:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2369,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "42555:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 2372,
                "name": "initial_tokens",
                "nodeType": "VariableDeclaration",
                "scope": 2727,
                "src": "42587:26:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2371,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "42587:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 2374,
                "name": "milieurs_per_eth",
                "nodeType": "VariableDeclaration",
                "scope": 2727,
                "src": "42618:28:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 2373,
                  "name": "uint",
                  "nodeType": "ElementaryTypeName",
                  "src": "42618:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2461,
                  "nodeType": "Block",
                  "src": "43837:949:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 2400,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 2398,
                          "name": "initial_tokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2372,
                          "src": "43856:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 2399,
                          "name": "multisig_supply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2387,
                          "src": "43873:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "43856:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 2401,
                      "nodeType": "ExpressionStatement",
                      "src": "43856:32:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 2410,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 2402,
                          "name": "token",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1403,
                          "src": "43899:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                            "typeString": "contract CrowdsaleToken"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2405,
                              "name": "multisig_supply",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2387,
                              "src": "43926:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 2406,
                              "name": "token_decimals",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2391,
                              "src": "43943:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 2407,
                              "name": "team_multisig",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2376,
                              "src": "43959:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "id": 2408,
                              "name": "token_retriever",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2382,
                              "src": "43974:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              {
                                "typeIdentifier": "t_uint8",
                                "typeString": "uint8"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              },
                              {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            ],
                            "id": 2404,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "43907:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_creation_nonpayable$_t_uint256_$_t_uint8_$_t_address_$_t_address_$returns$_t_contract$_CrowdsaleToken_$1396_$",
                              "typeString": "function (uint256,uint8,address,address) returns (contract CrowdsaleToken)"
                            },
                            "typeName": {
                              "contractScope": null,
                              "id": 2403,
                              "name": "CrowdsaleToken",
                              "nodeType": "UserDefinedTypeName",
                              "referencedDeclaration": 1396,
                              "src": "43911:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                                "typeString": "contract CrowdsaleToken"
                              }
                            }
                          },
                          "id": 2409,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "43907:83:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                            "typeString": "contract CrowdsaleToken"
                          }
                        },
                        "src": "43899:91:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                          "typeString": "contract CrowdsaleToken"
                        }
                      },
                      "id": 2411,
                      "nodeType": "ExpressionStatement",
                      "src": "43899:91:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2416,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2782,
                                "src": "44068:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              ],
                              "id": 2415,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "44060:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 2417,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "44060:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 2418,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "44075:4:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2412,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "44041:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                              "typeString": "contract CrowdsaleToken"
                            }
                          },
                          "id": 2414,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "setMintAgent",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1273,
                          "src": "44041:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$returns$__$",
                            "typeString": "function (address,bool) external"
                          }
                        },
                        "id": 2419,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "44041:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2420,
                      "nodeType": "ExpressionStatement",
                      "src": "44041:39:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2425,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2782,
                                "src": "44206:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              ],
                              "id": 2424,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "44198:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 2426,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "44198:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2421,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "44176:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                              "typeString": "contract CrowdsaleToken"
                            }
                          },
                          "id": 2423,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "setReleaseAgent",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 780,
                          "src": "44176:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address) external"
                          }
                        },
                        "id": 2427,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "44176:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2428,
                      "nodeType": "ExpressionStatement",
                      "src": "44176:36:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2433,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2782,
                                "src": "44365:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              ],
                              "id": 2432,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "44357:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 2434,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "44357:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 2435,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "44372:4:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2429,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "44334:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                              "typeString": "contract CrowdsaleToken"
                            }
                          },
                          "id": 2431,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "setTransferAgent",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 799,
                          "src": "44334:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$returns$__$",
                            "typeString": "function (address,bool) external"
                          }
                        },
                        "id": 2436,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "44334:43:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2437,
                      "nodeType": "ExpressionStatement",
                      "src": "44334:43:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2442,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2782,
                                "src": "44461:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              ],
                              "id": 2441,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "44453:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 2443,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "44453:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 2444,
                            "name": "crowdsale_supply",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2389,
                            "src": "44468:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2438,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "44442:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                              "typeString": "contract CrowdsaleToken"
                            }
                          },
                          "id": 2440,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mint",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1250,
                          "src": "44442:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256) external"
                          }
                        },
                        "id": 2445,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "44442:43:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2446,
                      "nodeType": "ExpressionStatement",
                      "src": "44442:43:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 2449,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 2447,
                          "name": "sellable_tokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2370,
                          "src": "44496:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 2448,
                          "name": "max_tokens_to_sell",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2393,
                          "src": "44514:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "44496:36:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 2450,
                      "nodeType": "ExpressionStatement",
                      "src": "44496:36:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2452,
                            "name": "team_multisig",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2376,
                            "src": "44633:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 2453,
                            "name": "start",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2378,
                            "src": "44648:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 2454,
                            "name": "end",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2380,
                            "src": "44655:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 2451,
                          "name": "configurationGenericCrowdsale",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1527,
                          "src": "44603:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256,uint256)"
                          }
                        },
                        "id": 2455,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "44603:56:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2456,
                      "nodeType": "ExpressionStatement",
                      "src": "44603:56:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2458,
                            "name": "init_tranches",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2385,
                            "src": "44766:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                              "typeString": "uint256[] memory"
                            }
                          ],
                          "id": 2457,
                          "name": "configurationTokenTranchePricing",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2296,
                          "src": "44733:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_array$_t_uint256_$dyn_memory_ptr_$returns$__$",
                            "typeString": "function (uint256[] memory)"
                          }
                        },
                        "id": 2459,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "44733:47:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2460,
                      "nodeType": "ExpressionStatement",
                      "src": "44733:47:0"
                    }
                  ]
                },
                "id": 2462,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 2396,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2395,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "43827:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "43827:9:0"
                  }
                ],
                "name": "configurationCrowdsale",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2394,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2376,
                      "name": "team_multisig",
                      "nodeType": "VariableDeclaration",
                      "scope": 2462,
                      "src": "43636:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2375,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "43636:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2378,
                      "name": "start",
                      "nodeType": "VariableDeclaration",
                      "scope": 2462,
                      "src": "43659:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2377,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "43659:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2380,
                      "name": "end",
                      "nodeType": "VariableDeclaration",
                      "scope": 2462,
                      "src": "43671:8:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2379,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "43671:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2382,
                      "name": "token_retriever",
                      "nodeType": "VariableDeclaration",
                      "scope": 2462,
                      "src": "43681:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2381,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "43681:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2385,
                      "name": "init_tranches",
                      "nodeType": "VariableDeclaration",
                      "scope": 2462,
                      "src": "43706:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_array$_t_uint256_$dyn_memory_ptr",
                        "typeString": "uint256[] memory"
                      },
                      "typeName": {
                        "baseType": {
                          "id": 2383,
                          "name": "uint",
                          "nodeType": "ElementaryTypeName",
                          "src": "43706:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "id": 2384,
                        "length": null,
                        "nodeType": "ArrayTypeName",
                        "src": "43706:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_array$_t_uint256_$dyn_storage_ptr",
                          "typeString": "uint256[] storage pointer"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2387,
                      "name": "multisig_supply",
                      "nodeType": "VariableDeclaration",
                      "scope": 2462,
                      "src": "43728:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2386,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "43728:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2389,
                      "name": "crowdsale_supply",
                      "nodeType": "VariableDeclaration",
                      "scope": 2462,
                      "src": "43750:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2388,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "43750:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2391,
                      "name": "token_decimals",
                      "nodeType": "VariableDeclaration",
                      "scope": 2462,
                      "src": "43773:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 2390,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "43773:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2393,
                      "name": "max_tokens_to_sell",
                      "nodeType": "VariableDeclaration",
                      "scope": 2462,
                      "src": "43795:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2392,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "43795:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "43635:184:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2397,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "43837:0:0"
                },
                "scope": 2727,
                "src": "43604:1182:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2476,
                  "nodeType": "Block",
                  "src": "44882:50:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2472,
                            "name": "receiver",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2464,
                            "src": "44904:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 2473,
                            "name": "tokenAmount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2466,
                            "src": "44914:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2469,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "44889:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                              "typeString": "contract CrowdsaleToken"
                            }
                          },
                          "id": 2471,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 866,
                          "src": "44889:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) external returns (bool)"
                          }
                        },
                        "id": 2474,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "44889:37:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 2475,
                      "nodeType": "ExpressionStatement",
                      "src": "44889:37:0"
                    }
                  ]
                },
                "id": 2477,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "assignTokens",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2467,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2464,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 2477,
                      "src": "44837:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2463,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "44837:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2466,
                      "name": "tokenAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 2477,
                      "src": "44855:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2465,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "44855:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "44836:36:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2468,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "44882:0:0"
                },
                "scope": 2727,
                "src": "44815:117:0",
                "stateMutability": "nonpayable",
                "superFunction": 2001,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2555,
                  "nodeType": "Block",
                  "src": "45090:678:0",
                  "statements": [
                    {
                      "assignments": [
                        2489
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2489,
                          "name": "tokensPerEth",
                          "nodeType": "VariableDeclaration",
                          "scope": 2556,
                          "src": "45097:17:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 2488,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "45097:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2499,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "31303030",
                            "id": 2497,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "45171:4:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1000_by_1",
                              "typeString": "int_const 1000"
                            },
                            "value": "1000"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_1000_by_1",
                              "typeString": "int_const 1000"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2494,
                                "name": "milieurs_per_eth",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2374,
                                "src": "45149:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2491,
                                    "name": "tokensSold",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1412,
                                    "src": "45133:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "id": 2490,
                                  "name": "getCurrentPrice",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2359,
                                  "src": "45117:15:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_view$_t_uint256_$returns$_t_uint256_$",
                                    "typeString": "function (uint256) view returns (uint256)"
                                  }
                                },
                                "id": 2492,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "45117:27:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2493,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "mul",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 134,
                              "src": "45117:31:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 2495,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "45117:49:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2496,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 152,
                          "src": "45117:53:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 2498,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "45117:59:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "45097:79:0"
                    },
                    {
                      "assignments": [
                        2501
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2501,
                          "name": "maxWeiAllowed",
                          "nodeType": "VariableDeclaration",
                          "scope": 2556,
                          "src": "45183:18:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 2500,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "45183:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2512,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2510,
                            "name": "tokensPerEth",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2489,
                            "src": "45253:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "31",
                                "id": 2507,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "45240:7:0",
                                "subdenomination": "ether",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                  "typeString": "int_const 1000000000000000000"
                                },
                                "value": "1"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                  "typeString": "int_const 1000000000000000000"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2504,
                                    "name": "tokensSold",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1412,
                                    "src": "45224:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2502,
                                    "name": "sellable_tokens",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2370,
                                    "src": "45204:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2503,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sub",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 172,
                                  "src": "45204:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2505,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "45204:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2506,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "mul",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 134,
                              "src": "45204:35:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 2508,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "45204:44:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2509,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "div",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 152,
                          "src": "45204:48:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 2511,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "45204:62:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "45183:83:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 2518,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 2513,
                          "name": "weiAllowed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2484,
                          "src": "45273:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 2516,
                              "name": "weiAmount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2479,
                              "src": "45307:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 2514,
                              "name": "maxWeiAllowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2501,
                              "src": "45286:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2515,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "min256",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 264,
                            "src": "45286:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 2517,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "45286:31:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "45273:44:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 2519,
                      "nodeType": "ExpressionStatement",
                      "src": "45273:44:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2529,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 2526,
                                  "name": "weiAllowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 2484,
                                  "src": "45364:10:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 2523,
                                      "name": "receiver",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 2481,
                                      "src": "45350:8:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2521,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1403,
                                      "src": "45334:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                                        "typeString": "contract CrowdsaleToken"
                                      }
                                    },
                                    "id": 2522,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "balanceOf",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 450,
                                    "src": "45334:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                      "typeString": "function (address) view external returns (uint256)"
                                    }
                                  },
                                  "id": 2524,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "45334:25:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 2525,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "add",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 196,
                                "src": "45334:29:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 2527,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "45334:41:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "313030",
                              "id": 2528,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "45379:3:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100_by_1",
                                "typeString": "int_const 100"
                              },
                              "value": "100"
                            },
                            "src": "45334:48:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 2520,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "45326:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 2530,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "45326:57:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2531,
                      "nodeType": "ExpressionStatement",
                      "src": "45326:57:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2534,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2532,
                          "name": "weiAmount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2479,
                          "src": "45400:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 2533,
                          "name": "maxWeiAllowed",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2501,
                          "src": "45412:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "45400:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 2553,
                        "nodeType": "Block",
                        "src": "45701:62:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 2551,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "id": 2546,
                                "name": "tokenAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2486,
                                "src": "45710:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2549,
                                    "name": "tokensSold",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 1412,
                                    "src": "45744:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2547,
                                    "name": "sellable_tokens",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2370,
                                    "src": "45724:15:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2548,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sub",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 172,
                                  "src": "45724:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2550,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "45724:31:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "45710:45:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2552,
                            "nodeType": "ExpressionStatement",
                            "src": "45710:45:0"
                          }
                        ]
                      },
                      "id": 2554,
                      "nodeType": "IfStatement",
                      "src": "45396:367:0",
                      "trueBody": {
                        "id": 2545,
                        "nodeType": "Block",
                        "src": "45427:148:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 2543,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "id": 2535,
                                "name": "tokenAmount",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2486,
                                "src": "45513:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "31",
                                    "id": 2541,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "45559:7:0",
                                    "subdenomination": "ether",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                      "typeString": "int_const 1000000000000000000"
                                    },
                                    "value": "1"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_1000000000000000000_by_1",
                                      "typeString": "int_const 1000000000000000000"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "arguments": [
                                      {
                                        "argumentTypes": null,
                                        "id": 2538,
                                        "name": "weiAmount",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2479,
                                        "src": "45544:9:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      }
                                    ],
                                    "expression": {
                                      "argumentTypes": [
                                        {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 2536,
                                        "name": "tokensPerEth",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 2489,
                                        "src": "45527:12:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_uint256",
                                          "typeString": "uint256"
                                        }
                                      },
                                      "id": 2537,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "mul",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": 134,
                                      "src": "45527:16:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                        "typeString": "function (uint256,uint256) pure returns (uint256)"
                                      }
                                    },
                                    "id": 2539,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "kind": "functionCall",
                                    "lValueRequested": false,
                                    "names": [],
                                    "nodeType": "FunctionCall",
                                    "src": "45527:27:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2540,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "div",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 152,
                                  "src": "45527:31:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2542,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "45527:40:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "45513:54:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 2544,
                            "nodeType": "ExpressionStatement",
                            "src": "45513:54:0"
                          }
                        ]
                      }
                    }
                  ]
                },
                "id": 2556,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "calculateTokenAmount",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2482,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2479,
                      "name": "weiAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 2556,
                      "src": "44998:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2478,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "44998:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2481,
                      "name": "receiver",
                      "nodeType": "VariableDeclaration",
                      "scope": 2556,
                      "src": "45014:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2480,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "45014:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "44997:34:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2487,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2484,
                      "name": "weiAllowed",
                      "nodeType": "VariableDeclaration",
                      "scope": 2556,
                      "src": "45055:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2483,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "45055:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 2486,
                      "name": "tokenAmount",
                      "nodeType": "VariableDeclaration",
                      "scope": 2556,
                      "src": "45072:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2485,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "45072:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "45054:35:0"
                },
                "scope": 2727,
                "src": "44968:800:0",
                "stateMutability": "view",
                "superFunction": 2036,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2565,
                  "nodeType": "Block",
                  "src": "45891:49:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 2563,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 2561,
                          "name": "tokensSold",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1412,
                          "src": "45905:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 2562,
                          "name": "sellable_tokens",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2370,
                          "src": "45919:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "45905:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 2560,
                      "id": 2564,
                      "nodeType": "Return",
                      "src": "45898:36:0"
                    }
                  ]
                },
                "id": 2566,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "isCrowdsaleFull",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2557,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "45854:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2560,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2559,
                      "name": "full",
                      "nodeType": "VariableDeclaration",
                      "scope": 2566,
                      "src": "45880:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 2558,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "45880:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "45879:11:0"
                },
                "scope": 2727,
                "src": "45830:110:0",
                "stateMutability": "view",
                "superFunction": 2006,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2649,
                  "nodeType": "Block",
                  "src": "46223:506:0",
                  "statements": [
                    {
                      "assignments": [
                        2578
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2578,
                          "name": "sold",
                          "nodeType": "VariableDeclaration",
                          "scope": 2650,
                          "src": "46363:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 2577,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "46363:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2583,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2581,
                            "name": "initial_tokens",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2372,
                            "src": "46392:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2579,
                            "name": "tokensSold",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1412,
                            "src": "46375:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2580,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "add",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 196,
                          "src": "46375:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 2582,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "46375:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "46363:44:0"
                    },
                    {
                      "assignments": [
                        2585
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 2585,
                          "name": "toShare",
                          "nodeType": "VariableDeclaration",
                          "scope": 2650,
                          "src": "46414:12:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 2584,
                            "name": "uint",
                            "nodeType": "ElementaryTypeName",
                            "src": "46414:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 2602,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2600,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "hexValue": "3130",
                              "id": 2594,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "46454:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_10_by_1",
                                "typeString": "int_const 10"
                              },
                              "value": "10"
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "**",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "arguments": [],
                                  "expression": {
                                    "argumentTypes": [],
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 2596,
                                      "name": "token",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 1403,
                                      "src": "46463:5:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                                        "typeString": "contract CrowdsaleToken"
                                      }
                                    },
                                    "id": 2597,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "decimals",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": 1310,
                                    "src": "46463:14:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_external_view$__$returns$_t_uint8_$",
                                      "typeString": "function () view external returns (uint8)"
                                    }
                                  },
                                  "id": 2598,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "46463:16:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint8",
                                    "typeString": "uint8"
                                  }
                                ],
                                "id": 2595,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "46458:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_uint256_$",
                                  "typeString": "type(uint256)"
                                },
                                "typeName": "uint"
                              },
                              "id": 2599,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "46458:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "46454:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "3735",
                                "id": 2591,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "46446:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_75_by_1",
                                  "typeString": "int_const 75"
                                },
                                "value": "75"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_75_by_1",
                                  "typeString": "int_const 75"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "hexValue": "3235",
                                    "id": 2588,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "kind": "number",
                                    "lValueRequested": false,
                                    "nodeType": "Literal",
                                    "src": "46438:2:0",
                                    "subdenomination": null,
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_rational_25_by_1",
                                      "typeString": "int_const 25"
                                    },
                                    "value": "25"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_rational_25_by_1",
                                      "typeString": "int_const 25"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 2586,
                                    "name": "sold",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2578,
                                    "src": "46429:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 2587,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "mul",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 134,
                                  "src": "46429:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 2589,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "46429:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "id": 2590,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "div",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 152,
                              "src": "46429:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                "typeString": "function (uint256,uint256) pure returns (uint256)"
                              }
                            },
                            "id": 2592,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "46429:20:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "id": 2593,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mul",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 134,
                          "src": "46429:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                            "typeString": "function (uint256,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 2601,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "46429:52:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "46414:67:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2607,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2782,
                                "src": "46515:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              ],
                              "id": 2606,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "46507:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 2608,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "46507:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "74727565",
                            "id": 2609,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "46522:4:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "true"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2603,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "46488:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                              "typeString": "contract CrowdsaleToken"
                            }
                          },
                          "id": 2605,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "setMintAgent",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1273,
                          "src": "46488:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$returns$__$",
                            "typeString": "function (address,bool) external"
                          }
                        },
                        "id": 2610,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "46488:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2611,
                      "nodeType": "ExpressionStatement",
                      "src": "46488:39:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 2615,
                            "name": "multisigWallet",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1405,
                            "src": "46545:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 2616,
                            "name": "toShare",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2585,
                            "src": "46561:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2612,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "46534:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                              "typeString": "contract CrowdsaleToken"
                            }
                          },
                          "id": 2614,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "mint",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1250,
                          "src": "46534:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256) external"
                          }
                        },
                        "id": 2617,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "46534:35:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2618,
                      "nodeType": "ExpressionStatement",
                      "src": "46534:35:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 2623,
                                "name": "this",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2782,
                                "src": "46603:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                  "typeString": "contract Crowdsale"
                                }
                              ],
                              "id": 2622,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "46595:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 2624,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "46595:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "66616c7365",
                            "id": 2625,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "bool",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "46610:5:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "value": "false"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2619,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "46576:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                              "typeString": "contract CrowdsaleToken"
                            }
                          },
                          "id": 2621,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "setMintAgent",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1273,
                          "src": "46576:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_address_$_t_bool_$returns$__$",
                            "typeString": "function (address,bool) external"
                          }
                        },
                        "id": 2626,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "46576:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2627,
                      "nodeType": "ExpressionStatement",
                      "src": "46576:40:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2628,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "46623:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                              "typeString": "contract CrowdsaleToken"
                            }
                          },
                          "id": 2630,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "releaseTokenTransfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1363,
                          "src": "46623:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$__$returns$__$",
                            "typeString": "function () external"
                          }
                        },
                        "id": 2631,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "46623:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2632,
                      "nodeType": "ExpressionStatement",
                      "src": "46623:28:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 2639,
                                    "name": "this",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 2782,
                                    "src": "46693:4:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                      "typeString": "contract Crowdsale"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_contract$_Crowdsale_$2727",
                                      "typeString": "contract Crowdsale"
                                    }
                                  ],
                                  "id": 2638,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "lValueRequested": false,
                                  "nodeType": "ElementaryTypeNameExpression",
                                  "src": "46685:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_type$_t_address_$",
                                    "typeString": "type(address)"
                                  },
                                  "typeName": "address"
                                },
                                "id": 2640,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "typeConversion",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "46685:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 2636,
                                "name": "token",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1403,
                                "src": "46669:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                                  "typeString": "contract CrowdsaleToken"
                                }
                              },
                              "id": 2637,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "balanceOf",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 450,
                              "src": "46669:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_external_view$_t_address_$returns$_t_uint256_$",
                                "typeString": "function (address) view external returns (uint256)"
                              }
                            },
                            "id": 2641,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "46669:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2633,
                            "name": "token",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 1403,
                            "src": "46658:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_contract$_CrowdsaleToken_$1396",
                              "typeString": "contract CrowdsaleToken"
                            }
                          },
                          "id": 2635,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "burn",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1387,
                          "src": "46658:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_external_nonpayable$_t_uint256_$returns$__$",
                            "typeString": "function (uint256) external"
                          }
                        },
                        "id": 2642,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "46658:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2643,
                      "nodeType": "ExpressionStatement",
                      "src": "46658:42:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "expression": {
                            "argumentTypes": null,
                            "id": 2644,
                            "name": "super",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 2783,
                            "src": "46707:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_super$_Crowdsale_$2727",
                              "typeString": "contract super Crowdsale"
                            }
                          },
                          "id": 2646,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "finalize",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 1873,
                          "src": "46707:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 2647,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "46707:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2648,
                      "nodeType": "ExpressionStatement",
                      "src": "46707:16:0"
                    }
                  ]
                },
                "id": 2650,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2569,
                          "name": "State",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1451,
                          "src": "46182:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                            "typeString": "type(enum GenericCrowdsale.State)"
                          }
                        },
                        "id": 2570,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "Success",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "46182:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$1451",
                          "typeString": "enum GenericCrowdsale.State"
                        }
                      }
                    ],
                    "id": 2571,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2568,
                      "name": "inState",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2049,
                      "src": "46174:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$_t_enum$_State_$1451_$",
                        "typeString": "modifier (enum GenericCrowdsale.State)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "46174:22:0"
                  },
                  {
                    "arguments": [],
                    "id": 2573,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2572,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "46197:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "46197:9:0"
                  },
                  {
                    "arguments": [],
                    "id": 2575,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2574,
                      "name": "stopInEmergency",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 64,
                      "src": "46207:15:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "46207:15:0"
                  }
                ],
                "name": "finalize",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2567,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "46164:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2576,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "46223:0:0"
                },
                "scope": 2727,
                "src": "46147:582:0",
                "stateMutability": "nonpayable",
                "superFunction": 1873,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2657,
                  "nodeType": "Block",
                  "src": "47060:27:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 2655,
                        "name": "owner",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 6,
                        "src": "47074:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 2654,
                      "id": 2656,
                      "nodeType": "Return",
                      "src": "47067:12:0"
                    }
                  ]
                },
                "id": 2658,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "getLostAndFoundMaster",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2651,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "47025:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2654,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2653,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 2658,
                      "src": "47051:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 2652,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "47051:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "47050:9:0"
                },
                "scope": 2727,
                "src": "46995:92:0",
                "stateMutability": "view",
                "superFunction": 1146,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 2683,
                  "nodeType": "Block",
                  "src": "47307:99:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 2676,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2672,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 2670,
                                "name": "startingTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2660,
                                "src": "47324:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 2671,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2741,
                                "src": "47339:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "47324:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2675,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 2673,
                                "name": "startingTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2660,
                                "src": "47346:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "<",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 2674,
                                "name": "endsAt",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1409,
                                "src": "47361:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "47346:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "47324:43:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 2669,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "47316:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 2677,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "47316:52:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2678,
                      "nodeType": "ExpressionStatement",
                      "src": "47316:52:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 2681,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 2679,
                          "name": "startsAt",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1407,
                          "src": "47377:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 2680,
                          "name": "startingTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2660,
                          "src": "47388:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "47377:23:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 2682,
                      "nodeType": "ExpressionStatement",
                      "src": "47377:23:0"
                    }
                  ]
                },
                "id": 2684,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 2663,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2662,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "47271:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "47271:9:0"
                  },
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 2665,
                          "name": "State",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1451,
                          "src": "47289:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_enum$_State_$1451_$",
                            "typeString": "type(enum GenericCrowdsale.State)"
                          }
                        },
                        "id": 2666,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "PreFunding",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "47289:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_enum$_State_$1451",
                          "typeString": "enum GenericCrowdsale.State"
                        }
                      }
                    ],
                    "id": 2667,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2664,
                      "name": "inState",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2049,
                      "src": "47281:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$_t_enum$_State_$1451_$",
                        "typeString": "modifier (enum GenericCrowdsale.State)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "47281:25:0"
                  }
                ],
                "name": "setStartingTime",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2661,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2660,
                      "name": "startingTime",
                      "nodeType": "VariableDeclaration",
                      "scope": 2684,
                      "src": "47245:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2659,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "47245:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "47244:19:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2668,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "47307:0:0"
                },
                "scope": 2727,
                "src": "47220:186:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2707,
                  "nodeType": "Block",
                  "src": "47481:95:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            "id": 2700,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2696,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 2694,
                                "name": "endingTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2686,
                                "src": "47499:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 2695,
                                "name": "now",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2741,
                                "src": "47512:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "47499:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "&&",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 2699,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 2697,
                                "name": "endingTime",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 2686,
                                "src": "47519:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 2698,
                                "name": "startsAt",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 1407,
                                "src": "47532:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "47519:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "src": "47499:41:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 2693,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "47491:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 2701,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "47491:50:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2702,
                      "nodeType": "ExpressionStatement",
                      "src": "47491:50:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 2705,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 2703,
                          "name": "endsAt",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 1409,
                          "src": "47551:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 2704,
                          "name": "endingTime",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2686,
                          "src": "47560:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "47551:19:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 2706,
                      "nodeType": "ExpressionStatement",
                      "src": "47551:19:0"
                    }
                  ]
                },
                "id": 2708,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 2689,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2688,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "47459:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "47459:9:0"
                  },
                  {
                    "arguments": [],
                    "id": 2691,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2690,
                      "name": "notFinished",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 2079,
                      "src": "47469:11:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "47469:11:0"
                  }
                ],
                "name": "setEndingTime",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2687,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2686,
                      "name": "endingTime",
                      "nodeType": "VariableDeclaration",
                      "scope": 2708,
                      "src": "47435:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2685,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "47435:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "47434:17:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2692,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "47481:0:0"
                },
                "scope": 2727,
                "src": "47412:164:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 2725,
                  "nodeType": "Block",
                  "src": "47652:85:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 2718,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 2716,
                              "name": "milieurs_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 2710,
                              "src": "47667:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "313030",
                              "id": 2717,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "47686:3:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_100_by_1",
                                "typeString": "int_const 100"
                              },
                              "value": "100"
                            },
                            "src": "47667:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 2715,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2742,
                          "src": "47659:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 2719,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "47659:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 2720,
                      "nodeType": "ExpressionStatement",
                      "src": "47659:31:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 2723,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 2721,
                          "name": "milieurs_per_eth",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2374,
                          "src": "47697:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 2722,
                          "name": "milieurs_amount",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 2710,
                          "src": "47716:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "47697:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 2724,
                      "nodeType": "ExpressionStatement",
                      "src": "47697:34:0"
                    }
                  ]
                },
                "id": 2726,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 2713,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 2712,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 26,
                      "src": "47642:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "47642:9:0"
                  }
                ],
                "name": "updateEursPerEth",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2711,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 2710,
                      "name": "milieurs_amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 2726,
                      "src": "47613:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 2709,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "47613:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "47612:22:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 2714,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "47652:0:0"
                },
                "scope": 2727,
                "src": "47586:151:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 2728,
            "src": "42455:5285:0"
          }
        ],
        "src": "0:47740:0"
      },
      "id": 0
    }
  }
}