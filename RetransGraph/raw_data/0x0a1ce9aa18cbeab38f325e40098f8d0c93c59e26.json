{
  "contracts": {
    "reentrancy.sol": {
      "BasicToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b5061027a806100206000396000f3006080604052600436106100565763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166318160ddd811461005b57806370a0823114610082578063a9059cbb146100b0575b600080fd5b34801561006757600080fd5b506100706100f5565b60408051918252519081900360200190f35b34801561008e57600080fd5b5061007073ffffffffffffffffffffffffffffffffffffffff600435166100fb565b3480156100bc57600080fd5b506100e173ffffffffffffffffffffffffffffffffffffffff60043516602435610123565b604080519115158252519081900360200190f35b60015490565b73ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b3360009081526020819052604081205482111561013f57600080fd5b73ffffffffffffffffffffffffffffffffffffffff8316151561016157600080fd5b33600090815260208190526040902054610181908363ffffffff61022916565b336000908152602081905260408082209290925573ffffffffffffffffffffffffffffffffffffffff8516815220546101c0908363ffffffff61023b16565b73ffffffffffffffffffffffffffffffffffffffff8416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b60008282111561023557fe5b50900390565b8181018281101561024857fe5b929150505600a165627a7a72305820182503456a40656589e4421f3f3981b099e30508aaf4164e252c137d264d515f0029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27A DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x18160DDD DUP2 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x82 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0xB0 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0xF5 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x8E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH2 0xFB JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xBC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE1 PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x123 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP4 AND ISZERO ISZERO PUSH2 0x161 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x181 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x229 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x1C0 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x23B AND JUMP JUMPDEST PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x235 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 0x248 JUMPI INVALID JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 XOR 0x25 SUB GASLIMIT PUSH11 0x40656589E4421F3F3981B0 SWAP10 0xe3 SDIV ADDMOD 0xaa DELEGATECALL AND 0x4e 0x25 0x2c SGT PUSH30 0x264D515F0029000000000000000000000000000000000000000000000000 ",
            "sourceMap": "4273:1109:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;4273:1109:0;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}}},\"title\":\"Basic token\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"BasicToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-11-01\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.24;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * See https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address _who) public view returns (uint256);\\n\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n\\n  event OwnershipTransferred(\\n\\n    address indexed previousOwner,\\n\\n    address indexed newOwner\\n\\n  );\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  constructor() public {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner.\\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to relinquish control of the contract.\\n\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n   * It will not be possible to call the functions with the `onlyOwner`\\n\\n   * modifier anymore.\\n\\n   */\\n\\n  function renounceOwnership() public onlyOwner {\\n\\n    emit OwnershipRenounced(owner);\\n\\n    owner = address(0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n\\n    _transferOwnership(_newOwner);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfers control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function _transferOwnership(address _newOwner) internal {\\n\\n    require(_newOwner != address(0));\\n\\n    emit OwnershipTransferred(owner, _newOwner);\\n\\n    owner = _newOwner;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address _owner, address _spender)\\n\\n    public view returns (uint256);\\n\\n\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n\\n    public returns (bool);\\n\\n\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n\\n  event Approval(\\n\\n    address indexed owner,\\n\\n    address indexed spender,\\n\\n    uint256 value\\n\\n  );\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n\\n    // benefit is lost if 'b' is also tested.\\n\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n    if (_a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n\\n\\n    c = _a * _b;\\n\\n    assert(c / _a == _b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = _a / _b;\\n\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n    return _a / _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    assert(_b <= _a);\\n\\n    return _a - _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    c = _a + _b;\\n\\n    assert(c >= _a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) internal balances;\\n\\n\\n\\n  uint256 internal totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev Total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_value <= balances[msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/issues/20\\n\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(\\n\\n    address _owner,\\n\\n    address _spender\\n\\n   )\\n\\n    public\\n\\n    view\\n\\n    returns (uint256)\\n\\n  {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _addedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    allowed[msg.sender][_spender] = (\\n\\n      allowed[msg.sender][_spender].add(_addedValue));\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue >= oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title DetailedERC20 token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract DetailedERC20 is ERC20 {\\n\\n  string public name;\\n\\n  string public symbol;\\n\\n  uint8 public decimals;\\n\\n\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n\\n    name = _name;\\n\\n    symbol = _symbol;\\n\\n    decimals = _decimals;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Mintable token\\n\\n * @dev Simple ERC20 Token example, with mintable token creation\\n\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n\\n */\\n\\ncontract MintableToken is StandardToken, Ownable {\\n\\n  event Mint(address indexed to, uint256 amount);\\n\\n  event MintFinished();\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier hasMintPermission() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to mint tokens\\n\\n   * @param _to The address that will receive the minted tokens.\\n\\n   * @param _amount The amount of tokens to mint.\\n\\n   * @return A boolean that indicates if the operation was successful.\\n\\n   */\\n\\n  function mint(\\n\\n    address _to,\\n\\n    uint256 _amount\\n\\n  )\\n\\n    public\\n\\n    hasMintPermission\\n\\n    canMint\\n\\n    returns (bool)\\n\\n  {\\n\\n    totalSupply_ = totalSupply_.add(_amount);\\n\\n    balances[_to] = balances[_to].add(_amount);\\n\\n    emit Mint(_to, _amount);\\n\\n    emit Transfer(address(0), _to, _amount);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to stop minting new tokens.\\n\\n   * @return True if the operation was successful.\\n\\n   */\\n\\n  function finishMinting() public onlyOwner canMint returns (bool) {\\n\\n    mintingFinished = true;\\n\\n    emit MintFinished();\\n\\n    return true;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is Ownable {\\n\\n  event Pause();\\n\\n  event Unpause();\\n\\n\\n\\n  bool public paused = false;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n   */\\n\\n  modifier whenNotPaused() {\\n\\n    require(!paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n\\n   */\\n\\n  modifier whenPaused() {\\n\\n    require(paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to pause, triggers stopped state\\n\\n   */\\n\\n  function pause() public onlyOwner whenNotPaused {\\n\\n    paused = true;\\n\\n    emit Pause();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to unpause, returns to normal state\\n\\n   */\\n\\n  function unpause() public onlyOwner whenPaused {\\n\\n    paused = false;\\n\\n    emit Unpause();\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable token\\n\\n * @dev StandardToken modified with pausable transfers.\\n\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n\\n\\n\\n  function transfer(\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transfer(_to, _value);\\n\\n  }\\n\\n\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transferFrom(_from, _to, _value);\\n\\n  }\\n\\n\\n\\n  function approve(\\n\\n    address _spender,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.approve(_spender, _value);\\n\\n  }\\n\\n\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint _addedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.increaseApproval(_spender, _addedValue);\\n\\n  }\\n\\n\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.decreaseApproval(_spender, _subtractedValue);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract COT is MintableToken, PausableToken, DetailedERC20 {\\n\\n\\n\\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSuply)\\n\\n        DetailedERC20(_name, _symbol, _decimals)\\n\\n        public\\n\\n    {\\n\\n        // Initialize totalSupply\\n\\n        totalSupply_ = _totalSuply;\\n\\n        // Initialize Holder\\n\\n        balances[msg.sender] = _totalSuply;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x453f6bbd971b0c89d18e44ab87aa1bc0c786af41bff30bb03c334cebc9be75fd\"}},\"version\":1}"
      },
      "COT": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "60806040526003805460a060020a61ffff021916905534801561002157600080fd5b506040516200102438038062001024833981016040908152815160208084015192840151606085015160038054600160a060020a0319163317905592850180519095949094019390929185918591859161008191600491908601906100ca565b5081516100959060059060208501906100ca565b506006805460ff191660ff92909216919091179055505060018190553360009081526020819052604090205550610165915050565b828054600181600116156101000203166002900490600052602060002090601f016020900481019282601f1061010b57805160ff1916838001178555610138565b82800160010185558215610138579182015b8281111561013857825182559160200191906001019061011d565b50610144929150610148565b5090565b61016291905b80821115610144576000815560010161014e565b90565b610eaf80620001756000396000f3006080604052600436106101115763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b811461011657806306fdde031461013f578063095ea7b3146101c957806318160ddd146101ed57806323b872dd14610214578063313ce5671461023e5780633f4ba83a1461026957806340c10f19146102805780635c975abb146102a457806366188463146102b957806370a08231146102dd578063715018a6146102fe5780637d64bcb4146103135780638456cb59146103285780638da5cb5b1461033d57806395d89b411461036e578063a9059cbb14610383578063d73dd623146103a7578063dd62ed3e146103cb578063f2fde38b146103f2575b600080fd5b34801561012257600080fd5b5061012b610413565b604080519115158252519081900360200190f35b34801561014b57600080fd5b50610154610434565b6040805160208082528351818301528351919283929083019185019080838360005b8381101561018e578181015183820152602001610176565b50505050905090810190601f1680156101bb5780820380516001836020036101000a031916815260200191505b509250505060405180910390f35b3480156101d557600080fd5b5061012b600160a060020a03600435166024356104c2565b3480156101f957600080fd5b506102026104ed565b60408051918252519081900360200190f35b34801561022057600080fd5b5061012b600160a060020a03600435811690602435166044356104f3565b34801561024a57600080fd5b50610253610520565b6040805160ff9092168252519081900360200190f35b34801561027557600080fd5b5061027e610529565b005b34801561028c57600080fd5b5061012b600160a060020a03600435166024356105a2565b3480156102b057600080fd5b5061012b6106bd565b3480156102c557600080fd5b5061012b600160a060020a03600435166024356106cd565b3480156102e957600080fd5b50610202600160a060020a03600435166106f1565b34801561030a57600080fd5b5061027e61070c565b34801561031f57600080fd5b5061012b61077a565b34801561033457600080fd5b5061027e610820565b34801561034957600080fd5b5061035261089e565b60408051600160a060020a039092168252519081900360200190f35b34801561037a57600080fd5b506101546108ad565b34801561038f57600080fd5b5061012b600160a060020a0360043516602435610908565b3480156103b357600080fd5b5061012b600160a060020a036004351660243561092c565b3480156103d757600080fd5b50610202600160a060020a0360043581169060243516610950565b3480156103fe57600080fd5b5061027e600160a060020a036004351661097b565b60035474010000000000000000000000000000000000000000900460ff1681565b6004805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104ba5780601f1061048f576101008083540402835291602001916104ba565b820191906000526020600020905b81548152906001019060200180831161049d57829003601f168201915b505050505081565b60035460009060a860020a900460ff16156104dc57600080fd5b6104e6838361099e565b9392505050565b60015490565b60035460009060a860020a900460ff161561050d57600080fd5b610518848484610a04565b949350505050565b60065460ff1681565b600354600160a060020a0316331461054057600080fd5b60035460a860020a900460ff16151561055857600080fd5b6003805475ff000000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b600354600090600160a060020a031633146105bc57600080fd5b60035474010000000000000000000000000000000000000000900460ff16156105e457600080fd5b6001546105f7908363ffffffff610b7916565b600155600160a060020a038316600090815260208190526040902054610623908363ffffffff610b7916565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b60035460a860020a900460ff1681565b60035460009060a860020a900460ff16156106e757600080fd5b6104e68383610b8c565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331461072357600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a0316331461079457600080fd5b60035474010000000000000000000000000000000000000000900460ff16156107bc57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a0316331461083757600080fd5b60035460a860020a900460ff161561084e57600080fd5b6003805475ff000000000000000000000000000000000000000000191660a860020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b6005805460408051602060026001851615610100026000190190941693909304601f810184900484028201840190925281815292918301828280156104ba5780601f1061048f576101008083540402835291602001916104ba565b60035460009060a860020a900460ff161561092257600080fd5b6104e68383610c7b565b60035460009060a860020a900460ff161561094657600080fd5b6104e68383610d5a565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a0316331461099257600080fd5b61099b81610df3565b50565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a038316600090815260208190526040812054821115610a2957600080fd5b600160a060020a0384166000908152600260209081526040808320338452909152902054821115610a5957600080fd5b600160a060020a0383161515610a6e57600080fd5b600160a060020a038416600090815260208190526040902054610a97908363ffffffff610e7116565b600160a060020a038086166000908152602081905260408082209390935590851681522054610acc908363ffffffff610b7916565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610b0e908363ffffffff610e7116565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b81810182811015610b8657fe5b92915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054808310610be057336000908152600260209081526040808320600160a060020a0388168452909152812055610c15565b610bf0818463ffffffff610e7116565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b33600090815260208190526040812054821115610c9757600080fd5b600160a060020a0383161515610cac57600080fd5b33600090815260208190526040902054610ccc908363ffffffff610e7116565b3360009081526020819052604080822092909255600160a060020a03851681522054610cfe908363ffffffff610b7916565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610d8e908363ffffffff610b7916565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a0381161515610e0857600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610e7d57fe5b509003905600a165627a7a72305820d4b77deb0a71e6329ed2a900d50a29b88b7f5512763f3f9e957f0d4ef9087c670029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP PUSH2 0xFFFF MUL NOT AND SWAP1 SSTORE CALLVALUE DUP1 ISZERO PUSH2 0x21 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH3 0x1024 CODESIZE SUB DUP1 PUSH3 0x1024 DUP4 CODECOPY DUP2 ADD PUSH1 0x40 SWAP1 DUP2 MSTORE DUP2 MLOAD PUSH1 0x20 DUP1 DUP5 ADD MLOAD SWAP3 DUP5 ADD MLOAD PUSH1 0x60 DUP6 ADD MLOAD PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE SWAP3 DUP6 ADD DUP1 MLOAD SWAP1 SWAP6 SWAP5 SWAP1 SWAP5 ADD SWAP4 SWAP1 SWAP3 SWAP2 DUP6 SWAP2 DUP6 SWAP2 DUP6 SWAP2 PUSH2 0x81 SWAP2 PUSH1 0x4 SWAP2 SWAP1 DUP7 ADD SWAP1 PUSH2 0xCA JUMP JUMPDEST POP DUP2 MLOAD PUSH2 0x95 SWAP1 PUSH1 0x5 SWAP1 PUSH1 0x20 DUP6 ADD SWAP1 PUSH2 0xCA JUMP JUMPDEST POP PUSH1 0x6 DUP1 SLOAD PUSH1 0xFF NOT AND PUSH1 0xFF SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE POP POP PUSH1 0x1 DUP2 SWAP1 SSTORE CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SSTORE POP PUSH2 0x165 SWAP2 POP POP JUMP JUMPDEST DUP3 DUP1 SLOAD PUSH1 0x1 DUP2 PUSH1 0x1 AND ISZERO PUSH2 0x100 MUL SUB AND PUSH1 0x2 SWAP1 DIV SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 PUSH1 0x1F ADD PUSH1 0x20 SWAP1 DIV DUP2 ADD SWAP3 DUP3 PUSH1 0x1F LT PUSH2 0x10B JUMPI DUP1 MLOAD PUSH1 0xFF NOT AND DUP4 DUP1 ADD OR DUP6 SSTORE PUSH2 0x138 JUMP JUMPDEST DUP3 DUP1 ADD PUSH1 0x1 ADD DUP6 SSTORE DUP3 ISZERO PUSH2 0x138 JUMPI SWAP2 DUP3 ADD JUMPDEST DUP3 DUP2 GT ISZERO PUSH2 0x138 JUMPI DUP3 MLOAD DUP3 SSTORE SWAP2 PUSH1 0x20 ADD SWAP2 SWAP1 PUSH1 0x1 ADD SWAP1 PUSH2 0x11D JUMP JUMPDEST POP PUSH2 0x144 SWAP3 SWAP2 POP PUSH2 0x148 JUMP JUMPDEST POP SWAP1 JUMP JUMPDEST PUSH2 0x162 SWAP2 SWAP1 JUMPDEST DUP1 DUP3 GT ISZERO PUSH2 0x144 JUMPI PUSH1 0x0 DUP2 SSTORE PUSH1 0x1 ADD PUSH2 0x14E JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xEAF DUP1 PUSH3 0x175 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x111 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x5D2035B DUP2 EQ PUSH2 0x116 JUMPI DUP1 PUSH4 0x6FDDE03 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0x1C9 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x1ED JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x214 JUMPI DUP1 PUSH4 0x313CE567 EQ PUSH2 0x23E JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x269 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x2A4 JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x2B9 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x2DD JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x2FE JUMPI DUP1 PUSH4 0x7D64BCB4 EQ PUSH2 0x313 JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x328 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x33D JUMPI DUP1 PUSH4 0x95D89B41 EQ PUSH2 0x36E JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x383 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x3A7 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x3CB JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x3F2 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x122 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x413 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x434 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 DUP1 DUP3 MSTORE DUP4 MLOAD DUP2 DUP4 ADD MSTORE DUP4 MLOAD SWAP2 SWAP3 DUP4 SWAP3 SWAP1 DUP4 ADD SWAP2 DUP6 ADD SWAP1 DUP1 DUP4 DUP4 PUSH1 0x0 JUMPDEST DUP4 DUP2 LT ISZERO PUSH2 0x18E JUMPI DUP2 DUP2 ADD MLOAD DUP4 DUP3 ADD MSTORE PUSH1 0x20 ADD PUSH2 0x176 JUMP JUMPDEST POP POP POP POP SWAP1 POP SWAP1 DUP2 ADD SWAP1 PUSH1 0x1F AND DUP1 ISZERO PUSH2 0x1BB JUMPI DUP1 DUP3 SUB DUP1 MLOAD PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB NOT AND DUP2 MSTORE PUSH1 0x20 ADD SWAP2 POP JUMPDEST POP SWAP3 POP POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1D5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x4C2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x202 PUSH2 0x4ED JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x220 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x4F3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x24A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x253 PUSH2 0x520 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0xFF SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x275 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x529 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x5A2 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x6BD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x6CD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x202 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x6F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x30A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x70C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x31F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH2 0x77A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x334 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH2 0x820 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x349 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x352 PUSH2 0x89E JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x154 PUSH2 0x8AD JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x38F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x908 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x12B PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x92C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3D7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x202 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x950 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x3FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x27E PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x97B JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x4 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x4BA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x48F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4BA JUMP JUMPDEST DUP3 ADD SWAP2 SWAP1 PUSH1 0x0 MSTORE PUSH1 0x20 PUSH1 0x0 KECCAK256 SWAP1 JUMPDEST DUP2 SLOAD DUP2 MSTORE SWAP1 PUSH1 0x1 ADD SWAP1 PUSH1 0x20 ADD DUP1 DUP4 GT PUSH2 0x49D JUMPI DUP3 SWAP1 SUB PUSH1 0x1F AND DUP3 ADD SWAP2 JUMPDEST POP POP POP POP POP DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x4DC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E6 DUP4 DUP4 PUSH2 0x99E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x50D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x518 DUP5 DUP5 DUP5 PUSH2 0xA04 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x6 SLOAD PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x540 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xA8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x558 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH22 0xFF000000000000000000000000000000000000000000 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x7805862F689E2F13DF9F062FF482AD3AD112ACA9E0847911ED832E158C525B33 SWAP1 PUSH1 0x0 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x5BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x5E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x5F7 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB79 AND JUMP JUMPDEST PUSH1 0x1 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x623 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB79 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG2 PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND SWAP2 PUSH1 0x0 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xA8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x6E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E6 DUP4 DUP4 PUSH2 0xB8C JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x723 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0xF8DF31144D9C2F0F6B59D69B8B98ABD5459D07F2742C4DF920B25AAE33C64820 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x3 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x794 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x7BC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND PUSH21 0x10000000000000000000000000000000000000000 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xAE5184FBA832CB2B1F702ACA6117B8D265EAF03AD33EB133F19DDE0F5920FA08 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x837 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xA8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x84E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH22 0xFF000000000000000000000000000000000000000000 NOT AND PUSH1 0xA8 PUSH1 0x2 EXP OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x6985A02210A168E66602D3235CB6DB0E70F92B3BA4D376A33C0F3D9434BFF625 SWAP1 PUSH1 0x0 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x5 DUP1 SLOAD PUSH1 0x40 DUP1 MLOAD PUSH1 0x20 PUSH1 0x2 PUSH1 0x1 DUP6 AND ISZERO PUSH2 0x100 MUL PUSH1 0x0 NOT ADD SWAP1 SWAP5 AND SWAP4 SWAP1 SWAP4 DIV PUSH1 0x1F DUP2 ADD DUP5 SWAP1 DIV DUP5 MUL DUP3 ADD DUP5 ADD SWAP1 SWAP3 MSTORE DUP2 DUP2 MSTORE SWAP3 SWAP2 DUP4 ADD DUP3 DUP3 DUP1 ISZERO PUSH2 0x4BA JUMPI DUP1 PUSH1 0x1F LT PUSH2 0x48F JUMPI PUSH2 0x100 DUP1 DUP4 SLOAD DIV MUL DUP4 MSTORE SWAP2 PUSH1 0x20 ADD SWAP2 PUSH2 0x4BA JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x922 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E6 DUP4 DUP4 PUSH2 0xC7B JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA8 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x946 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x4E6 DUP4 DUP4 PUSH2 0xD5A JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x992 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x99B DUP2 PUSH2 0xDF3 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0xA29 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0xA59 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0xA6E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xA97 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xE71 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0xACC SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB79 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 0x2 DUP3 MSTORE DUP3 DUP2 KECCAK256 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH2 0xB0E SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xE71 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP8 AND SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 0xB86 JUMPI INVALID JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP1 DUP4 LT PUSH2 0xBE0 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SSTORE PUSH2 0xC15 JUMP JUMPDEST PUSH2 0xBF0 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xE71 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0xC97 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0xCAC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0xCCC SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xE71 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0xCFE SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB79 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0xD8E SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xB79 AND JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0xE08 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x3 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xE7D JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xd4 0xb7 PUSH30 0xEB0A71E6329ED2A900D50A29B88B7F5512763F3F9E957F0D4EF9087C6700 0x29 ",
            "sourceMap": "13527:378:0:-;;;10423:35;;;-1:-1:-1;;;;;;11666:26:0;;;13596:306;5:2:-1;;;;30:1;27;20:12;5:2;13596:306:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;1095:5;:18;;-1:-1:-1;;;;;;1095:18:0;1103:10;1095:18;;;13596:306;;;9987:12;;13596:306;;;;;;;;;;;;;;;;9987:12;;:4;;:12;;;;;:::i;:::-;-1:-1:-1;10006:16:0;;;;:6;;:16;;;;;:::i;:::-;-1:-1:-1;10029:8:0;:20;;-1:-1:-1;;10029:20:0;;;;;;;;;;;;-1:-1:-1;;;13793:26:0;;;13869:10;-1:-1:-1;13860:20:0;;;;;;;;;;:34;-1:-1:-1;13527:378:0;;-1:-1:-1;;13527:378:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;-1:-1:-1;13527:378:0;;;-1:-1:-1;13527:378:0;:::i;:::-;;;:::o;:::-;;;;;;;;;;;;;;;;;;;;:::o;:::-;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"name\":\"\",\"type\":\"string\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_name\",\"type\":\"string\"},{\"name\":\"_symbol\",\"type\":\"string\"},{\"name\":\"_decimals\",\"type\":\"uint8\"},{\"name\":\"_totalSuply\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"finishMinting()\":{\"details\":\"Function to stop minting new tokens.\",\"return\":\"True if the operation was successful.\"},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens\",\"params\":{\"_amount\":\"The amount of tokens to mint.\",\"_to\":\"The address that will receive the minted tokens.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"}}},\"userdoc\":{\"methods\":{\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"COT\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-11-01\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.24;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * See https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address _who) public view returns (uint256);\\n\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n\\n  event OwnershipTransferred(\\n\\n    address indexed previousOwner,\\n\\n    address indexed newOwner\\n\\n  );\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  constructor() public {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner.\\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to relinquish control of the contract.\\n\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n   * It will not be possible to call the functions with the `onlyOwner`\\n\\n   * modifier anymore.\\n\\n   */\\n\\n  function renounceOwnership() public onlyOwner {\\n\\n    emit OwnershipRenounced(owner);\\n\\n    owner = address(0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n\\n    _transferOwnership(_newOwner);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfers control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function _transferOwnership(address _newOwner) internal {\\n\\n    require(_newOwner != address(0));\\n\\n    emit OwnershipTransferred(owner, _newOwner);\\n\\n    owner = _newOwner;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address _owner, address _spender)\\n\\n    public view returns (uint256);\\n\\n\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n\\n    public returns (bool);\\n\\n\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n\\n  event Approval(\\n\\n    address indexed owner,\\n\\n    address indexed spender,\\n\\n    uint256 value\\n\\n  );\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n\\n    // benefit is lost if 'b' is also tested.\\n\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n    if (_a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n\\n\\n    c = _a * _b;\\n\\n    assert(c / _a == _b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = _a / _b;\\n\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n    return _a / _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    assert(_b <= _a);\\n\\n    return _a - _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    c = _a + _b;\\n\\n    assert(c >= _a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) internal balances;\\n\\n\\n\\n  uint256 internal totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev Total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_value <= balances[msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/issues/20\\n\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(\\n\\n    address _owner,\\n\\n    address _spender\\n\\n   )\\n\\n    public\\n\\n    view\\n\\n    returns (uint256)\\n\\n  {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _addedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    allowed[msg.sender][_spender] = (\\n\\n      allowed[msg.sender][_spender].add(_addedValue));\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue >= oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title DetailedERC20 token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract DetailedERC20 is ERC20 {\\n\\n  string public name;\\n\\n  string public symbol;\\n\\n  uint8 public decimals;\\n\\n\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n\\n    name = _name;\\n\\n    symbol = _symbol;\\n\\n    decimals = _decimals;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Mintable token\\n\\n * @dev Simple ERC20 Token example, with mintable token creation\\n\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n\\n */\\n\\ncontract MintableToken is StandardToken, Ownable {\\n\\n  event Mint(address indexed to, uint256 amount);\\n\\n  event MintFinished();\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier hasMintPermission() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to mint tokens\\n\\n   * @param _to The address that will receive the minted tokens.\\n\\n   * @param _amount The amount of tokens to mint.\\n\\n   * @return A boolean that indicates if the operation was successful.\\n\\n   */\\n\\n  function mint(\\n\\n    address _to,\\n\\n    uint256 _amount\\n\\n  )\\n\\n    public\\n\\n    hasMintPermission\\n\\n    canMint\\n\\n    returns (bool)\\n\\n  {\\n\\n    totalSupply_ = totalSupply_.add(_amount);\\n\\n    balances[_to] = balances[_to].add(_amount);\\n\\n    emit Mint(_to, _amount);\\n\\n    emit Transfer(address(0), _to, _amount);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to stop minting new tokens.\\n\\n   * @return True if the operation was successful.\\n\\n   */\\n\\n  function finishMinting() public onlyOwner canMint returns (bool) {\\n\\n    mintingFinished = true;\\n\\n    emit MintFinished();\\n\\n    return true;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is Ownable {\\n\\n  event Pause();\\n\\n  event Unpause();\\n\\n\\n\\n  bool public paused = false;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n   */\\n\\n  modifier whenNotPaused() {\\n\\n    require(!paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n\\n   */\\n\\n  modifier whenPaused() {\\n\\n    require(paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to pause, triggers stopped state\\n\\n   */\\n\\n  function pause() public onlyOwner whenNotPaused {\\n\\n    paused = true;\\n\\n    emit Pause();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to unpause, returns to normal state\\n\\n   */\\n\\n  function unpause() public onlyOwner whenPaused {\\n\\n    paused = false;\\n\\n    emit Unpause();\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable token\\n\\n * @dev StandardToken modified with pausable transfers.\\n\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n\\n\\n\\n  function transfer(\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transfer(_to, _value);\\n\\n  }\\n\\n\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transferFrom(_from, _to, _value);\\n\\n  }\\n\\n\\n\\n  function approve(\\n\\n    address _spender,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.approve(_spender, _value);\\n\\n  }\\n\\n\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint _addedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.increaseApproval(_spender, _addedValue);\\n\\n  }\\n\\n\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.decreaseApproval(_spender, _subtractedValue);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract COT is MintableToken, PausableToken, DetailedERC20 {\\n\\n\\n\\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSuply)\\n\\n        DetailedERC20(_name, _symbol, _decimals)\\n\\n        public\\n\\n    {\\n\\n        // Initialize totalSupply\\n\\n        totalSupply_ = _totalSuply;\\n\\n        // Initialize Holder\\n\\n        balances[msg.sender] = _totalSuply;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x453f6bbd971b0c89d18e44ab87aa1bc0c786af41bff30bb03c334cebc9be75fd\"}},\"version\":1}"
      },
      "DetailedERC20": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "ERC20": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "ERC20Basic": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "",
            "sourceMap": ""
          }
        },
        "metadata": ""
      },
      "MintableToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405260038054600160a860020a03191633179055610aa7806100256000396000f3006080604052600436106100cf5763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166305d2035b81146100d4578063095ea7b3146100fd57806318160ddd1461012157806323b872dd1461014857806340c10f1914610172578063661884631461019657806370a08231146101ba578063715018a6146101db5780637d64bcb4146101f25780638da5cb5b14610207578063a9059cbb14610238578063d73dd6231461025c578063dd62ed3e14610280578063f2fde38b146102a7575b600080fd5b3480156100e057600080fd5b506100e96102c8565b604080519115158252519081900360200190f35b34801561010957600080fd5b506100e9600160a060020a03600435166024356102e9565b34801561012d57600080fd5b5061013661034f565b60408051918252519081900360200190f35b34801561015457600080fd5b506100e9600160a060020a0360043581169060243516604435610355565b34801561017e57600080fd5b506100e9600160a060020a03600435166024356104ca565b3480156101a257600080fd5b506100e9600160a060020a03600435166024356105e5565b3480156101c657600080fd5b50610136600160a060020a03600435166106d4565b3480156101e757600080fd5b506101f06106ef565b005b3480156101fe57600080fd5b506100e961075d565b34801561021357600080fd5b5061021c610803565b60408051600160a060020a039092168252519081900360200190f35b34801561024457600080fd5b506100e9600160a060020a0360043516602435610812565b34801561026857600080fd5b506100e9600160a060020a03600435166024356108f1565b34801561028c57600080fd5b50610136600160a060020a036004358116906024351661098a565b3480156102b357600080fd5b506101f0600160a060020a03600435166109b5565b60035474010000000000000000000000000000000000000000900460ff1681565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b600160a060020a03831660009081526020819052604081205482111561037a57600080fd5b600160a060020a03841660009081526002602090815260408083203384529091529020548211156103aa57600080fd5b600160a060020a03831615156103bf57600080fd5b600160a060020a0384166000908152602081905260409020546103e8908363ffffffff6109d816565b600160a060020a03808616600090815260208190526040808220939093559085168152205461041d908363ffffffff6109ea16565b600160a060020a0380851660009081526020818152604080832094909455918716815260028252828120338252909152205461045f908363ffffffff6109d816565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b600354600090600160a060020a031633146104e457600080fd5b60035474010000000000000000000000000000000000000000900460ff161561050c57600080fd5b60015461051f908363ffffffff6109ea16565b600155600160a060020a03831660009081526020819052604090205461054b908363ffffffff6109ea16565b600160a060020a03841660008181526020818152604091829020939093558051858152905191927f0f6798a560793a54c3bcfe86a93cde1e73087d944c0ea20544137d412139688592918290030190a2604080518381529051600160a060020a038516916000917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9181900360200190a350600192915050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831061063957336000908152600260209081526040808320600160a060020a038816845290915281205561066e565b610649818463ffffffff6109d816565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a0316331461070657600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600090600160a060020a0316331461077757600080fd5b60035474010000000000000000000000000000000000000000900460ff161561079f57600080fd5b6003805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001790556040517fae5184fba832cb2b1f702aca6117b8d265eaf03ad33eb133f19dde0f5920fa0890600090a150600190565b600354600160a060020a031681565b3360009081526020819052604081205482111561082e57600080fd5b600160a060020a038316151561084357600080fd5b33600090815260208190526040902054610863908363ffffffff6109d816565b3360009081526020819052604080822092909255600160a060020a03851681522054610895908363ffffffff6109ea16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a0386168452909152812054610925908363ffffffff6109ea16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a031633146109cc57600080fd5b6109d5816109fd565b50565b6000828211156109e457fe5b50900390565b818101828110156109f757fe5b92915050565b600160a060020a0381161515610a1257600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a7230582008a57c1feb6a445dbf63a4762795ad8441f6c88a16298f7a56a8027bfa30298e0029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA8 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0xAA7 DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x5D2035B DUP2 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x95EA7B3 EQ PUSH2 0xFD JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x121 JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x148 JUMPI DUP1 PUSH4 0x40C10F19 EQ PUSH2 0x172 JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x196 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1BA JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1DB JUMPI DUP1 PUSH4 0x7D64BCB4 EQ PUSH2 0x1F2 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x207 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x238 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x25C JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x280 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x2A7 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x2C8 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x109 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x2E9 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x12D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x136 PUSH2 0x34F JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x154 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x355 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x17E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x4CA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1A2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x5E5 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1C6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x136 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x6D4 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1E7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH2 0x6EF JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1FE JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH2 0x75D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x213 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x21C PUSH2 0x803 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x244 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x812 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x268 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xE9 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x8F1 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x28C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x136 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x98A JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2B3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x1F0 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x9B5 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x37A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x3AA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0x3BF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x3E8 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x9D8 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x41D SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x9EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 0x2 DUP3 MSTORE DUP3 DUP2 KECCAK256 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH2 0x45F SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x9D8 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP8 AND SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x4E4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x50C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 SLOAD PUSH2 0x51F SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x9EA AND JUMP JUMPDEST PUSH1 0x1 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x54B SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x9EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 PUSH32 0xF6798A560793A54C3BCFE86A93CDE1E73087D944C0EA20544137D4121396885 SWAP3 SWAP2 DUP3 SWAP1 SUB ADD SWAP1 LOG2 PUSH1 0x40 DUP1 MLOAD DUP4 DUP2 MSTORE SWAP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND SWAP2 PUSH1 0x0 SWAP2 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP2 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP1 DUP4 LT PUSH2 0x639 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SSTORE PUSH2 0x66E JUMP JUMPDEST PUSH2 0x649 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x9D8 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x706 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0xF8DF31144D9C2F0F6B59D69B8B98ABD5459D07F2742C4DF920B25AAE33C64820 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x3 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x777 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x79F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND PUSH21 0x10000000000000000000000000000000000000000 OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0xAE5184FBA832CB2B1F702ACA6117B8D265EAF03AD33EB133F19DDE0F5920FA08 SWAP1 PUSH1 0x0 SWAP1 LOG1 POP PUSH1 0x1 SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x82E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0x843 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x863 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x9D8 AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x895 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x9EA AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x925 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x9EA AND JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x9CC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x9D5 DUP2 PUSH2 0x9FD JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x9E4 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 0x9F7 JUMPI INVALID JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0xA12 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x3 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 ADDMOD 0xa5 PUSH29 0x1FEB6A445DBF63A4762795AD8441F6C88A16298F7A56A8027BFA30298E STOP 0x29 ",
            "sourceMap": "10291:1162:0:-;;;10423:35;;;-1:-1:-1;;;;;;1095:18:0;1103:10;1095:18;;;10291:1162;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"mintingFinished\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"finishMinting\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"MintFinished\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"decreaseApproval(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"finishMinting()\":{\"details\":\"Function to stop minting new tokens.\",\"return\":\"True if the operation was successful.\"},\"increaseApproval(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_addedValue\":\"The amount of tokens to increase the allowance by.\",\"_spender\":\"The address which will spend the funds.\"}},\"mint(address,uint256)\":{\"details\":\"Function to mint tokens\",\"params\":{\"_amount\":\"The amount of tokens to mint.\",\"_to\":\"The address that will receive the minted tokens.\"},\"return\":\"A boolean that indicates if the operation was successful.\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amount of tokens to be transferred\"}},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}}},\"title\":\"Mintable token\"},\"userdoc\":{\"methods\":{\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"MintableToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-11-01\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.24;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * See https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address _who) public view returns (uint256);\\n\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n\\n  event OwnershipTransferred(\\n\\n    address indexed previousOwner,\\n\\n    address indexed newOwner\\n\\n  );\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  constructor() public {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner.\\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to relinquish control of the contract.\\n\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n   * It will not be possible to call the functions with the `onlyOwner`\\n\\n   * modifier anymore.\\n\\n   */\\n\\n  function renounceOwnership() public onlyOwner {\\n\\n    emit OwnershipRenounced(owner);\\n\\n    owner = address(0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n\\n    _transferOwnership(_newOwner);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfers control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function _transferOwnership(address _newOwner) internal {\\n\\n    require(_newOwner != address(0));\\n\\n    emit OwnershipTransferred(owner, _newOwner);\\n\\n    owner = _newOwner;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address _owner, address _spender)\\n\\n    public view returns (uint256);\\n\\n\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n\\n    public returns (bool);\\n\\n\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n\\n  event Approval(\\n\\n    address indexed owner,\\n\\n    address indexed spender,\\n\\n    uint256 value\\n\\n  );\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n\\n    // benefit is lost if 'b' is also tested.\\n\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n    if (_a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n\\n\\n    c = _a * _b;\\n\\n    assert(c / _a == _b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = _a / _b;\\n\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n    return _a / _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    assert(_b <= _a);\\n\\n    return _a - _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    c = _a + _b;\\n\\n    assert(c >= _a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) internal balances;\\n\\n\\n\\n  uint256 internal totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev Total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_value <= balances[msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/issues/20\\n\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(\\n\\n    address _owner,\\n\\n    address _spender\\n\\n   )\\n\\n    public\\n\\n    view\\n\\n    returns (uint256)\\n\\n  {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _addedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    allowed[msg.sender][_spender] = (\\n\\n      allowed[msg.sender][_spender].add(_addedValue));\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue >= oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title DetailedERC20 token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract DetailedERC20 is ERC20 {\\n\\n  string public name;\\n\\n  string public symbol;\\n\\n  uint8 public decimals;\\n\\n\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n\\n    name = _name;\\n\\n    symbol = _symbol;\\n\\n    decimals = _decimals;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Mintable token\\n\\n * @dev Simple ERC20 Token example, with mintable token creation\\n\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n\\n */\\n\\ncontract MintableToken is StandardToken, Ownable {\\n\\n  event Mint(address indexed to, uint256 amount);\\n\\n  event MintFinished();\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier hasMintPermission() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to mint tokens\\n\\n   * @param _to The address that will receive the minted tokens.\\n\\n   * @param _amount The amount of tokens to mint.\\n\\n   * @return A boolean that indicates if the operation was successful.\\n\\n   */\\n\\n  function mint(\\n\\n    address _to,\\n\\n    uint256 _amount\\n\\n  )\\n\\n    public\\n\\n    hasMintPermission\\n\\n    canMint\\n\\n    returns (bool)\\n\\n  {\\n\\n    totalSupply_ = totalSupply_.add(_amount);\\n\\n    balances[_to] = balances[_to].add(_amount);\\n\\n    emit Mint(_to, _amount);\\n\\n    emit Transfer(address(0), _to, _amount);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to stop minting new tokens.\\n\\n   * @return True if the operation was successful.\\n\\n   */\\n\\n  function finishMinting() public onlyOwner canMint returns (bool) {\\n\\n    mintingFinished = true;\\n\\n    emit MintFinished();\\n\\n    return true;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is Ownable {\\n\\n  event Pause();\\n\\n  event Unpause();\\n\\n\\n\\n  bool public paused = false;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n   */\\n\\n  modifier whenNotPaused() {\\n\\n    require(!paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n\\n   */\\n\\n  modifier whenPaused() {\\n\\n    require(paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to pause, triggers stopped state\\n\\n   */\\n\\n  function pause() public onlyOwner whenNotPaused {\\n\\n    paused = true;\\n\\n    emit Pause();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to unpause, returns to normal state\\n\\n   */\\n\\n  function unpause() public onlyOwner whenPaused {\\n\\n    paused = false;\\n\\n    emit Unpause();\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable token\\n\\n * @dev StandardToken modified with pausable transfers.\\n\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n\\n\\n\\n  function transfer(\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transfer(_to, _value);\\n\\n  }\\n\\n\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transferFrom(_from, _to, _value);\\n\\n  }\\n\\n\\n\\n  function approve(\\n\\n    address _spender,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.approve(_spender, _value);\\n\\n  }\\n\\n\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint _addedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.increaseApproval(_spender, _addedValue);\\n\\n  }\\n\\n\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.decreaseApproval(_spender, _subtractedValue);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract COT is MintableToken, PausableToken, DetailedERC20 {\\n\\n\\n\\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSuply)\\n\\n        DetailedERC20(_name, _symbol, _decimals)\\n\\n        public\\n\\n    {\\n\\n        // Initialize totalSupply\\n\\n        totalSupply_ = _totalSuply;\\n\\n        // Initialize Holder\\n\\n        balances[msg.sender] = _totalSuply;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x453f6bbd971b0c89d18e44ab87aa1bc0c786af41bff30bb03c334cebc9be75fd\"}},\"version\":1}"
      },
      "Ownable": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b5060008054600160a060020a0319163317905561020b806100326000396000f3006080604052600436106100565763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663715018a6811461005b5780638da5cb5b14610072578063f2fde38b146100a3575b600080fd5b34801561006757600080fd5b506100706100c4565b005b34801561007e57600080fd5b50610087610130565b60408051600160a060020a039092168252519081900360200190f35b3480156100af57600080fd5b50610070600160a060020a036004351661013f565b600054600160a060020a031633146100db57600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a031681565b600054600160a060020a0316331461015657600080fd5b61015f81610162565b50565b600160a060020a038116151561017757600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a723058208d403950603a4768d6e5dc8f0ff8e356bf986a699dcf8f850b17e9e292487dda0029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x20B DUP1 PUSH2 0x32 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x56 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x715018A6 DUP2 EQ PUSH2 0x5B JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x72 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0xA3 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x67 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH2 0xC4 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x87 PUSH2 0x130 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xAF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x70 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x13F JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0xDB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP2 PUSH32 0xF8DF31144D9C2F0F6B59D69B8B98ABD5459D07F2742C4DF920B25AAE33C64820 SWAP2 LOG2 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x156 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x15F DUP2 PUSH2 0x162 JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x177 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 DUP14 BLOCKHASH CODECOPY POP PUSH1 0x3A 0x47 PUSH9 0xD6E5DC8F0FF8E356BF SWAP9 PUSH11 0x699DCF8F850B17E9E29248 PUSH30 0xDA0029000000000000000000000000000000000000000000000000000000 ",
            "sourceMap": "729:1523:0:-;;;1067:52;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1095:5:0;:18;;-1:-1:-1;;;;;;1095:18:0;1103:10;1095:18;;;729:1523;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}}},\"title\":\"Ownable\"},\"userdoc\":{\"methods\":{\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"Ownable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-11-01\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.24;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * See https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address _who) public view returns (uint256);\\n\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n\\n  event OwnershipTransferred(\\n\\n    address indexed previousOwner,\\n\\n    address indexed newOwner\\n\\n  );\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  constructor() public {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner.\\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to relinquish control of the contract.\\n\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n   * It will not be possible to call the functions with the `onlyOwner`\\n\\n   * modifier anymore.\\n\\n   */\\n\\n  function renounceOwnership() public onlyOwner {\\n\\n    emit OwnershipRenounced(owner);\\n\\n    owner = address(0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n\\n    _transferOwnership(_newOwner);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfers control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function _transferOwnership(address _newOwner) internal {\\n\\n    require(_newOwner != address(0));\\n\\n    emit OwnershipTransferred(owner, _newOwner);\\n\\n    owner = _newOwner;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address _owner, address _spender)\\n\\n    public view returns (uint256);\\n\\n\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n\\n    public returns (bool);\\n\\n\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n\\n  event Approval(\\n\\n    address indexed owner,\\n\\n    address indexed spender,\\n\\n    uint256 value\\n\\n  );\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n\\n    // benefit is lost if 'b' is also tested.\\n\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n    if (_a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n\\n\\n    c = _a * _b;\\n\\n    assert(c / _a == _b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = _a / _b;\\n\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n    return _a / _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    assert(_b <= _a);\\n\\n    return _a - _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    c = _a + _b;\\n\\n    assert(c >= _a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) internal balances;\\n\\n\\n\\n  uint256 internal totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev Total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_value <= balances[msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/issues/20\\n\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(\\n\\n    address _owner,\\n\\n    address _spender\\n\\n   )\\n\\n    public\\n\\n    view\\n\\n    returns (uint256)\\n\\n  {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _addedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    allowed[msg.sender][_spender] = (\\n\\n      allowed[msg.sender][_spender].add(_addedValue));\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue >= oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title DetailedERC20 token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract DetailedERC20 is ERC20 {\\n\\n  string public name;\\n\\n  string public symbol;\\n\\n  uint8 public decimals;\\n\\n\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n\\n    name = _name;\\n\\n    symbol = _symbol;\\n\\n    decimals = _decimals;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Mintable token\\n\\n * @dev Simple ERC20 Token example, with mintable token creation\\n\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n\\n */\\n\\ncontract MintableToken is StandardToken, Ownable {\\n\\n  event Mint(address indexed to, uint256 amount);\\n\\n  event MintFinished();\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier hasMintPermission() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to mint tokens\\n\\n   * @param _to The address that will receive the minted tokens.\\n\\n   * @param _amount The amount of tokens to mint.\\n\\n   * @return A boolean that indicates if the operation was successful.\\n\\n   */\\n\\n  function mint(\\n\\n    address _to,\\n\\n    uint256 _amount\\n\\n  )\\n\\n    public\\n\\n    hasMintPermission\\n\\n    canMint\\n\\n    returns (bool)\\n\\n  {\\n\\n    totalSupply_ = totalSupply_.add(_amount);\\n\\n    balances[_to] = balances[_to].add(_amount);\\n\\n    emit Mint(_to, _amount);\\n\\n    emit Transfer(address(0), _to, _amount);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to stop minting new tokens.\\n\\n   * @return True if the operation was successful.\\n\\n   */\\n\\n  function finishMinting() public onlyOwner canMint returns (bool) {\\n\\n    mintingFinished = true;\\n\\n    emit MintFinished();\\n\\n    return true;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is Ownable {\\n\\n  event Pause();\\n\\n  event Unpause();\\n\\n\\n\\n  bool public paused = false;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n   */\\n\\n  modifier whenNotPaused() {\\n\\n    require(!paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n\\n   */\\n\\n  modifier whenPaused() {\\n\\n    require(paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to pause, triggers stopped state\\n\\n   */\\n\\n  function pause() public onlyOwner whenNotPaused {\\n\\n    paused = true;\\n\\n    emit Pause();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to unpause, returns to normal state\\n\\n   */\\n\\n  function unpause() public onlyOwner whenPaused {\\n\\n    paused = false;\\n\\n    emit Unpause();\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable token\\n\\n * @dev StandardToken modified with pausable transfers.\\n\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n\\n\\n\\n  function transfer(\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transfer(_to, _value);\\n\\n  }\\n\\n\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transferFrom(_from, _to, _value);\\n\\n  }\\n\\n\\n\\n  function approve(\\n\\n    address _spender,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.approve(_spender, _value);\\n\\n  }\\n\\n\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint _addedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.increaseApproval(_spender, _addedValue);\\n\\n  }\\n\\n\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.decreaseApproval(_spender, _subtractedValue);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract COT is MintableToken, PausableToken, DetailedERC20 {\\n\\n\\n\\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSuply)\\n\\n        DetailedERC20(_name, _symbol, _decimals)\\n\\n        public\\n\\n    {\\n\\n        // Initialize totalSupply\\n\\n        totalSupply_ = _totalSuply;\\n\\n        // Initialize Holder\\n\\n        balances[msg.sender] = _totalSuply;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x453f6bbd971b0c89d18e44ab87aa1bc0c786af41bff30bb03c334cebc9be75fd\"}},\"version\":1}"
      },
      "Pausable": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405260008054600160a860020a031916331790556103c4806100256000396000f3006080604052600436106100775763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416633f4ba83a811461007c5780635c975abb14610093578063715018a6146100bc5780638456cb59146100d15780638da5cb5b146100e6578063f2fde38b14610117575b600080fd5b34801561008857600080fd5b50610091610138565b005b34801561009f57600080fd5b506100a86101bf565b604080519115158252519081900360200190f35b3480156100c857600080fd5b506100916101e0565b3480156100dd57600080fd5b5061009161024c565b3480156100f257600080fd5b506100fb6102e9565b60408051600160a060020a039092168252519081900360200190f35b34801561012357600080fd5b50610091600160a060020a03600435166102f8565b600054600160a060020a0316331461014f57600080fd5b60005474010000000000000000000000000000000000000000900460ff16151561017857600080fd5b6000805474ff0000000000000000000000000000000000000000191681556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b339190a1565b60005474010000000000000000000000000000000000000000900460ff1681565b600054600160a060020a031633146101f757600080fd5b60008054604051600160a060020a03909116917ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482091a26000805473ffffffffffffffffffffffffffffffffffffffff19169055565b600054600160a060020a0316331461026357600080fd5b60005474010000000000000000000000000000000000000000900460ff161561028b57600080fd5b6000805474ff00000000000000000000000000000000000000001916740100000000000000000000000000000000000000001781556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff6259190a1565b600054600160a060020a031681565b600054600160a060020a0316331461030f57600080fd5b6103188161031b565b50565b600160a060020a038116151561033057600080fd5b60008054604051600160a060020a03808516939216917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a36000805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a03929092169190911790555600a165627a7a72305820d433771878eb7981972427d16a787945c23d47f818f5f782423824ad801afbf60029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA8 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0x3C4 DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x77 JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x3F4BA83A DUP2 EQ PUSH2 0x7C JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x93 JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0xBC JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0xD1 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0xE6 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x117 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x88 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x91 PUSH2 0x138 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xA8 PUSH2 0x1BF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xC8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x91 PUSH2 0x1E0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xDD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x91 PUSH2 0x24C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xF2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xFB PUSH2 0x2E9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x123 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x91 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x2F8 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x14F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x178 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x7805862F689E2F13DF9F062FF482AD3AD112ACA9E0847911ED832E158C525B33 SWAP2 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x1F7 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP2 PUSH32 0xF8DF31144D9C2F0F6B59D69B8B98ABD5459D07F2742C4DF920B25AAE33C64820 SWAP2 LOG2 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x263 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 SLOAD PUSH21 0x10000000000000000000000000000000000000000 SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x28B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND PUSH21 0x10000000000000000000000000000000000000000 OR DUP2 SSTORE PUSH1 0x40 MLOAD PUSH32 0x6985A02210A168E66602D3235CB6DB0E70F92B3BA4D376A33C0F3D9434BFF625 SWAP2 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x30F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x318 DUP2 PUSH2 0x31B JUMP JUMPDEST POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x330 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 DUP1 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND SWAP4 SWAP3 AND SWAP2 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP2 LOG3 PUSH1 0x0 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xd4 CALLER PUSH24 0x1878EB7981972427D16A787945C23D47F818F5F782423824 0xad DUP1 BYTE CREATE2 0xf6 STOP 0x29 ",
            "sourceMap": "11592:793:0:-;;;11687:5;11666:26;;-1:-1:-1;;;;;;1095:18:0;1103:10;1095:18;;;11592:793;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"}},\"title\":\"Pausable\"},\"userdoc\":{\"methods\":{\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"Pausable\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-11-01\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.24;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * See https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address _who) public view returns (uint256);\\n\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n\\n  event OwnershipTransferred(\\n\\n    address indexed previousOwner,\\n\\n    address indexed newOwner\\n\\n  );\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  constructor() public {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner.\\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to relinquish control of the contract.\\n\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n   * It will not be possible to call the functions with the `onlyOwner`\\n\\n   * modifier anymore.\\n\\n   */\\n\\n  function renounceOwnership() public onlyOwner {\\n\\n    emit OwnershipRenounced(owner);\\n\\n    owner = address(0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n\\n    _transferOwnership(_newOwner);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfers control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function _transferOwnership(address _newOwner) internal {\\n\\n    require(_newOwner != address(0));\\n\\n    emit OwnershipTransferred(owner, _newOwner);\\n\\n    owner = _newOwner;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address _owner, address _spender)\\n\\n    public view returns (uint256);\\n\\n\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n\\n    public returns (bool);\\n\\n\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n\\n  event Approval(\\n\\n    address indexed owner,\\n\\n    address indexed spender,\\n\\n    uint256 value\\n\\n  );\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n\\n    // benefit is lost if 'b' is also tested.\\n\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n    if (_a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n\\n\\n    c = _a * _b;\\n\\n    assert(c / _a == _b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = _a / _b;\\n\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n    return _a / _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    assert(_b <= _a);\\n\\n    return _a - _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    c = _a + _b;\\n\\n    assert(c >= _a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) internal balances;\\n\\n\\n\\n  uint256 internal totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev Total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_value <= balances[msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/issues/20\\n\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(\\n\\n    address _owner,\\n\\n    address _spender\\n\\n   )\\n\\n    public\\n\\n    view\\n\\n    returns (uint256)\\n\\n  {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _addedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    allowed[msg.sender][_spender] = (\\n\\n      allowed[msg.sender][_spender].add(_addedValue));\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue >= oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title DetailedERC20 token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract DetailedERC20 is ERC20 {\\n\\n  string public name;\\n\\n  string public symbol;\\n\\n  uint8 public decimals;\\n\\n\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n\\n    name = _name;\\n\\n    symbol = _symbol;\\n\\n    decimals = _decimals;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Mintable token\\n\\n * @dev Simple ERC20 Token example, with mintable token creation\\n\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n\\n */\\n\\ncontract MintableToken is StandardToken, Ownable {\\n\\n  event Mint(address indexed to, uint256 amount);\\n\\n  event MintFinished();\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier hasMintPermission() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to mint tokens\\n\\n   * @param _to The address that will receive the minted tokens.\\n\\n   * @param _amount The amount of tokens to mint.\\n\\n   * @return A boolean that indicates if the operation was successful.\\n\\n   */\\n\\n  function mint(\\n\\n    address _to,\\n\\n    uint256 _amount\\n\\n  )\\n\\n    public\\n\\n    hasMintPermission\\n\\n    canMint\\n\\n    returns (bool)\\n\\n  {\\n\\n    totalSupply_ = totalSupply_.add(_amount);\\n\\n    balances[_to] = balances[_to].add(_amount);\\n\\n    emit Mint(_to, _amount);\\n\\n    emit Transfer(address(0), _to, _amount);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to stop minting new tokens.\\n\\n   * @return True if the operation was successful.\\n\\n   */\\n\\n  function finishMinting() public onlyOwner canMint returns (bool) {\\n\\n    mintingFinished = true;\\n\\n    emit MintFinished();\\n\\n    return true;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is Ownable {\\n\\n  event Pause();\\n\\n  event Unpause();\\n\\n\\n\\n  bool public paused = false;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n   */\\n\\n  modifier whenNotPaused() {\\n\\n    require(!paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n\\n   */\\n\\n  modifier whenPaused() {\\n\\n    require(paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to pause, triggers stopped state\\n\\n   */\\n\\n  function pause() public onlyOwner whenNotPaused {\\n\\n    paused = true;\\n\\n    emit Pause();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to unpause, returns to normal state\\n\\n   */\\n\\n  function unpause() public onlyOwner whenPaused {\\n\\n    paused = false;\\n\\n    emit Unpause();\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable token\\n\\n * @dev StandardToken modified with pausable transfers.\\n\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n\\n\\n\\n  function transfer(\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transfer(_to, _value);\\n\\n  }\\n\\n\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transferFrom(_from, _to, _value);\\n\\n  }\\n\\n\\n\\n  function approve(\\n\\n    address _spender,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.approve(_spender, _value);\\n\\n  }\\n\\n\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint _addedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.increaseApproval(_spender, _addedValue);\\n\\n  }\\n\\n\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.decreaseApproval(_spender, _subtractedValue);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract COT is MintableToken, PausableToken, DetailedERC20 {\\n\\n\\n\\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSuply)\\n\\n        DetailedERC20(_name, _symbol, _decimals)\\n\\n        public\\n\\n    {\\n\\n        // Initialize totalSupply\\n\\n        totalSupply_ = _totalSuply;\\n\\n        // Initialize Holder\\n\\n        balances[msg.sender] = _totalSuply;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x453f6bbd971b0c89d18e44ab87aa1bc0c786af41bff30bb03c334cebc9be75fd\"}},\"version\":1}"
      },
      "PausableToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405260038054600160a860020a03191633179055610a7f806100256000396000f3006080604052600436106100cf5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b381146100d457806318160ddd1461010c57806323b872dd146101335780633f4ba83a1461015d5780635c975abb14610174578063661884631461018957806370a08231146101ad578063715018a6146101ce5780638456cb59146101e35780638da5cb5b146101f8578063a9059cbb14610229578063d73dd6231461024d578063dd62ed3e14610271578063f2fde38b14610298575b600080fd5b3480156100e057600080fd5b506100f8600160a060020a03600435166024356102b9565b604080519115158252519081900360200190f35b34801561011857600080fd5b506101216102e4565b60408051918252519081900360200190f35b34801561013f57600080fd5b506100f8600160a060020a03600435811690602435166044356102ea565b34801561016957600080fd5b50610172610317565b005b34801561018057600080fd5b506100f861038f565b34801561019557600080fd5b506100f8600160a060020a036004351660243561039f565b3480156101b957600080fd5b50610121600160a060020a03600435166103c3565b3480156101da57600080fd5b506101726103de565b3480156101ef57600080fd5b5061017261044c565b34801561020457600080fd5b5061020d6104c9565b60408051600160a060020a039092168252519081900360200190f35b34801561023557600080fd5b506100f8600160a060020a03600435166024356104d8565b34801561025957600080fd5b506100f8600160a060020a03600435166024356104fc565b34801561027d57600080fd5b50610121600160a060020a0360043581169060243516610520565b3480156102a457600080fd5b50610172600160a060020a036004351661054b565b60035460009060a060020a900460ff16156102d357600080fd5b6102dd838361056e565b9392505050565b60015490565b60035460009060a060020a900460ff161561030457600080fd5b61030f8484846105d4565b949350505050565b600354600160a060020a0316331461032e57600080fd5b60035460a060020a900460ff16151561034657600080fd5b6003805474ff0000000000000000000000000000000000000000191690556040517f7805862f689e2f13df9f062ff482ad3ad112aca9e0847911ed832e158c525b3390600090a1565b60035460a060020a900460ff1681565b60035460009060a060020a900460ff16156103b957600080fd5b6102dd8383610749565b600160a060020a031660009081526020819052604090205490565b600354600160a060020a031633146103f557600080fd5b600354604051600160a060020a03909116907ff8df31144d9c2f0f6b59d69b8b98abd5459d07f2742c4df920b25aae33c6482090600090a26003805473ffffffffffffffffffffffffffffffffffffffff19169055565b600354600160a060020a0316331461046357600080fd5b60035460a060020a900460ff161561047a57600080fd5b6003805474ff0000000000000000000000000000000000000000191660a060020a1790556040517f6985a02210a168e66602d3235cb6db0e70f92b3ba4d376a33c0f3d9434bff62590600090a1565b600354600160a060020a031681565b60035460009060a060020a900460ff16156104f257600080fd5b6102dd8383610838565b60035460009060a060020a900460ff161561051657600080fd5b6102dd8383610917565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b600354600160a060020a0316331461056257600080fd5b61056b816109b0565b50565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b600160a060020a0383166000908152602081905260408120548211156105f957600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561062957600080fd5b600160a060020a038316151561063e57600080fd5b600160a060020a038416600090815260208190526040902054610667908363ffffffff610a2e16565b600160a060020a03808616600090815260208190526040808220939093559085168152205461069c908363ffffffff610a4016565b600160a060020a038085166000908152602081815260408083209490945591871681526002825282812033825290915220546106de908363ffffffff610a2e16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831061079d57336000908152600260209081526040808320600160a060020a03881684529091528120556107d2565b6107ad818463ffffffff610a2e16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b3360009081526020819052604081205482111561085457600080fd5b600160a060020a038316151561086957600080fd5b33600090815260208190526040902054610889908363ffffffff610a2e16565b3360009081526020819052604080822092909255600160a060020a038516815220546108bb908363ffffffff610a4016565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a038616845290915281205461094b908363ffffffff610a4016565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03811615156109c557600080fd5b600354604051600160a060020a038084169216907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a36003805473ffffffffffffffffffffffffffffffffffffffff1916600160a060020a0392909216919091179055565b600082821115610a3a57fe5b50900390565b81810182811015610a4d57fe5b929150505600a165627a7a7230582061dbdc0cf43421094323ba56a752d27293af92ab591024c6147da67d5b9902f60029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x3 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA8 PUSH1 0x2 EXP SUB NOT AND CALLER OR SWAP1 SSTORE PUSH2 0xA7F DUP1 PUSH2 0x25 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0xCF JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x95EA7B3 DUP2 EQ PUSH2 0xD4 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0x10C JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0x133 JUMPI DUP1 PUSH4 0x3F4BA83A EQ PUSH2 0x15D JUMPI DUP1 PUSH4 0x5C975ABB EQ PUSH2 0x174 JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x189 JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x1AD JUMPI DUP1 PUSH4 0x715018A6 EQ PUSH2 0x1CE JUMPI DUP1 PUSH4 0x8456CB59 EQ PUSH2 0x1E3 JUMPI DUP1 PUSH4 0x8DA5CB5B EQ PUSH2 0x1F8 JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x229 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x24D JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x271 JUMPI DUP1 PUSH4 0xF2FDE38B EQ PUSH2 0x298 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xE0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF8 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x2B9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x118 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH2 0x2E4 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x13F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF8 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x2EA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x169 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x172 PUSH2 0x317 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x180 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF8 PUSH2 0x38F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x195 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF8 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x39F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x3C3 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1DA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x172 PUSH2 0x3DE JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1EF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x172 PUSH2 0x44C JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x204 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x20D PUSH2 0x4C9 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP3 AND DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x235 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF8 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x4D8 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x259 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xF8 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x4FC JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x27D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x121 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x520 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x2A4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x172 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x54B JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x2D3 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DD DUP4 DUP4 PUSH2 0x56E JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x304 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x30F DUP5 DUP5 DUP5 PUSH2 0x5D4 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x32E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO ISZERO PUSH2 0x346 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x7805862F689E2F13DF9F062FF482AD3AD112ACA9E0847911ED832E158C525B33 SWAP1 PUSH1 0x0 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x3B9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DD DUP4 DUP4 PUSH2 0x749 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x3F5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 SWAP2 AND SWAP1 PUSH32 0xF8DF31144D9C2F0F6B59D69B8B98ABD5459D07F2742C4DF920B25AAE33C64820 SWAP1 PUSH1 0x0 SWAP1 LOG2 PUSH1 0x3 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x463 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x47A JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 DUP1 SLOAD PUSH21 0xFF0000000000000000000000000000000000000000 NOT AND PUSH1 0xA0 PUSH1 0x2 EXP OR SWAP1 SSTORE PUSH1 0x40 MLOAD PUSH32 0x6985A02210A168E66602D3235CB6DB0E70F92B3BA4D376A33C0F3D9434BFF625 SWAP1 PUSH1 0x0 SWAP1 LOG1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x4F2 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DD DUP4 DUP4 PUSH2 0x838 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x0 SWAP1 PUSH1 0xA0 PUSH1 0x2 EXP SWAP1 DIV PUSH1 0xFF AND ISZERO PUSH2 0x516 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x2DD DUP4 DUP4 PUSH2 0x917 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x562 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x56B DUP2 PUSH2 0x9B0 JUMP JUMPDEST POP JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x5F9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x629 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0x63E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x667 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xA2E AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x69C SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xA40 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 0x2 DUP3 MSTORE DUP3 DUP2 KECCAK256 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH2 0x6DE SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xA2E AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP8 AND SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP1 DUP4 LT PUSH2 0x79D JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SSTORE PUSH2 0x7D2 JUMP JUMPDEST PUSH2 0x7AD DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0xA2E AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x854 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0x869 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x889 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xA2E AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x8BB SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xA40 AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x94B SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0xA40 AND JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP2 AND ISZERO ISZERO PUSH2 0x9C5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x3 SLOAD PUSH1 0x40 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP5 AND SWAP3 AND SWAP1 PUSH32 0x8BE0079C531659141344CD1FD0A4F28419497F9722A3DAAFE3B4186F6B6457E0 SWAP1 PUSH1 0x0 SWAP1 LOG3 PUSH1 0x3 DUP1 SLOAD PUSH20 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP3 SWAP1 SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0xA3A JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 0xA4D JUMPI INVALID JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 PUSH2 0xDBDC 0xc DELEGATECALL CALLVALUE 0x21 MULMOD NUMBER 0x23 0xba JUMP 0xa7 MSTORE 0xd2 PUSH19 0x93AF92AB591024C6147DA67D5B9902F6002900 ",
            "sourceMap": "12487:1034:0:-;;;11666:26;;;-1:-1:-1;;;;;;1095:18:0;1103:10;1095:18;;;12487:1034;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"success\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Pause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[],\"name\":\"Unpause\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"}],\"name\":\"OwnershipRenounced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"pause()\":{\"details\":\"called by the owner to pause, triggers stopped state\"},\"renounceOwnership()\":{\"details\":\"Allows the current owner to relinquish control of the contract.\"},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transferOwnership(address)\":{\"details\":\"Allows the current owner to transfer control of the contract to a newOwner.\",\"params\":{\"_newOwner\":\"The address to transfer ownership to.\"}},\"unpause()\":{\"details\":\"called by the owner to unpause, returns to normal state\"}},\"title\":\"Pausable token\"},\"userdoc\":{\"methods\":{\"renounceOwnership()\":{\"notice\":\"Renouncing to ownership will leave the contract without an owner. It will not be possible to call the functions with the `onlyOwner` modifier anymore.\"}}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"PausableToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-11-01\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.24;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * See https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address _who) public view returns (uint256);\\n\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n\\n  event OwnershipTransferred(\\n\\n    address indexed previousOwner,\\n\\n    address indexed newOwner\\n\\n  );\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  constructor() public {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner.\\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to relinquish control of the contract.\\n\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n   * It will not be possible to call the functions with the `onlyOwner`\\n\\n   * modifier anymore.\\n\\n   */\\n\\n  function renounceOwnership() public onlyOwner {\\n\\n    emit OwnershipRenounced(owner);\\n\\n    owner = address(0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n\\n    _transferOwnership(_newOwner);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfers control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function _transferOwnership(address _newOwner) internal {\\n\\n    require(_newOwner != address(0));\\n\\n    emit OwnershipTransferred(owner, _newOwner);\\n\\n    owner = _newOwner;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address _owner, address _spender)\\n\\n    public view returns (uint256);\\n\\n\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n\\n    public returns (bool);\\n\\n\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n\\n  event Approval(\\n\\n    address indexed owner,\\n\\n    address indexed spender,\\n\\n    uint256 value\\n\\n  );\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n\\n    // benefit is lost if 'b' is also tested.\\n\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n    if (_a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n\\n\\n    c = _a * _b;\\n\\n    assert(c / _a == _b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = _a / _b;\\n\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n    return _a / _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    assert(_b <= _a);\\n\\n    return _a - _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    c = _a + _b;\\n\\n    assert(c >= _a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) internal balances;\\n\\n\\n\\n  uint256 internal totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev Total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_value <= balances[msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/issues/20\\n\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(\\n\\n    address _owner,\\n\\n    address _spender\\n\\n   )\\n\\n    public\\n\\n    view\\n\\n    returns (uint256)\\n\\n  {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _addedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    allowed[msg.sender][_spender] = (\\n\\n      allowed[msg.sender][_spender].add(_addedValue));\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue >= oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title DetailedERC20 token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract DetailedERC20 is ERC20 {\\n\\n  string public name;\\n\\n  string public symbol;\\n\\n  uint8 public decimals;\\n\\n\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n\\n    name = _name;\\n\\n    symbol = _symbol;\\n\\n    decimals = _decimals;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Mintable token\\n\\n * @dev Simple ERC20 Token example, with mintable token creation\\n\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n\\n */\\n\\ncontract MintableToken is StandardToken, Ownable {\\n\\n  event Mint(address indexed to, uint256 amount);\\n\\n  event MintFinished();\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier hasMintPermission() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to mint tokens\\n\\n   * @param _to The address that will receive the minted tokens.\\n\\n   * @param _amount The amount of tokens to mint.\\n\\n   * @return A boolean that indicates if the operation was successful.\\n\\n   */\\n\\n  function mint(\\n\\n    address _to,\\n\\n    uint256 _amount\\n\\n  )\\n\\n    public\\n\\n    hasMintPermission\\n\\n    canMint\\n\\n    returns (bool)\\n\\n  {\\n\\n    totalSupply_ = totalSupply_.add(_amount);\\n\\n    balances[_to] = balances[_to].add(_amount);\\n\\n    emit Mint(_to, _amount);\\n\\n    emit Transfer(address(0), _to, _amount);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to stop minting new tokens.\\n\\n   * @return True if the operation was successful.\\n\\n   */\\n\\n  function finishMinting() public onlyOwner canMint returns (bool) {\\n\\n    mintingFinished = true;\\n\\n    emit MintFinished();\\n\\n    return true;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is Ownable {\\n\\n  event Pause();\\n\\n  event Unpause();\\n\\n\\n\\n  bool public paused = false;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n   */\\n\\n  modifier whenNotPaused() {\\n\\n    require(!paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n\\n   */\\n\\n  modifier whenPaused() {\\n\\n    require(paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to pause, triggers stopped state\\n\\n   */\\n\\n  function pause() public onlyOwner whenNotPaused {\\n\\n    paused = true;\\n\\n    emit Pause();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to unpause, returns to normal state\\n\\n   */\\n\\n  function unpause() public onlyOwner whenPaused {\\n\\n    paused = false;\\n\\n    emit Unpause();\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable token\\n\\n * @dev StandardToken modified with pausable transfers.\\n\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n\\n\\n\\n  function transfer(\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transfer(_to, _value);\\n\\n  }\\n\\n\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transferFrom(_from, _to, _value);\\n\\n  }\\n\\n\\n\\n  function approve(\\n\\n    address _spender,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.approve(_spender, _value);\\n\\n  }\\n\\n\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint _addedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.increaseApproval(_spender, _addedValue);\\n\\n  }\\n\\n\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.decreaseApproval(_spender, _subtractedValue);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract COT is MintableToken, PausableToken, DetailedERC20 {\\n\\n\\n\\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSuply)\\n\\n        DetailedERC20(_name, _symbol, _decimals)\\n\\n        public\\n\\n    {\\n\\n        // Initialize totalSupply\\n\\n        totalSupply_ = _totalSuply;\\n\\n        // Initialize Holder\\n\\n        balances[msg.sender] = _totalSuply;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x453f6bbd971b0c89d18e44ab87aa1bc0c786af41bff30bb03c334cebc9be75fd\"}},\"version\":1}"
      },
      "SafeMath": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "604c602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a165627a7a723058200ece467ef0fddb98fe2b1e516ed14f0c107d9bbc98b23d2c948b36bb285237580029",
            "opcodes": "PUSH1 0x4C PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN STOP PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 0xe 0xce 0x46 PUSH31 0xF0FDDB98FE2B1E516ED14F0C107D9BBC98B23D2C948B36BB28523758002900 ",
            "sourceMap": "2876:1295:0:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{},\"title\":\"SafeMath\"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"SafeMath\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-11-01\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.24;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * See https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address _who) public view returns (uint256);\\n\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n\\n  event OwnershipTransferred(\\n\\n    address indexed previousOwner,\\n\\n    address indexed newOwner\\n\\n  );\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  constructor() public {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner.\\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to relinquish control of the contract.\\n\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n   * It will not be possible to call the functions with the `onlyOwner`\\n\\n   * modifier anymore.\\n\\n   */\\n\\n  function renounceOwnership() public onlyOwner {\\n\\n    emit OwnershipRenounced(owner);\\n\\n    owner = address(0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n\\n    _transferOwnership(_newOwner);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfers control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function _transferOwnership(address _newOwner) internal {\\n\\n    require(_newOwner != address(0));\\n\\n    emit OwnershipTransferred(owner, _newOwner);\\n\\n    owner = _newOwner;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address _owner, address _spender)\\n\\n    public view returns (uint256);\\n\\n\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n\\n    public returns (bool);\\n\\n\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n\\n  event Approval(\\n\\n    address indexed owner,\\n\\n    address indexed spender,\\n\\n    uint256 value\\n\\n  );\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n\\n    // benefit is lost if 'b' is also tested.\\n\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n    if (_a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n\\n\\n    c = _a * _b;\\n\\n    assert(c / _a == _b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = _a / _b;\\n\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n    return _a / _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    assert(_b <= _a);\\n\\n    return _a - _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    c = _a + _b;\\n\\n    assert(c >= _a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) internal balances;\\n\\n\\n\\n  uint256 internal totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev Total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_value <= balances[msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/issues/20\\n\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(\\n\\n    address _owner,\\n\\n    address _spender\\n\\n   )\\n\\n    public\\n\\n    view\\n\\n    returns (uint256)\\n\\n  {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _addedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    allowed[msg.sender][_spender] = (\\n\\n      allowed[msg.sender][_spender].add(_addedValue));\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue >= oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title DetailedERC20 token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract DetailedERC20 is ERC20 {\\n\\n  string public name;\\n\\n  string public symbol;\\n\\n  uint8 public decimals;\\n\\n\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n\\n    name = _name;\\n\\n    symbol = _symbol;\\n\\n    decimals = _decimals;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Mintable token\\n\\n * @dev Simple ERC20 Token example, with mintable token creation\\n\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n\\n */\\n\\ncontract MintableToken is StandardToken, Ownable {\\n\\n  event Mint(address indexed to, uint256 amount);\\n\\n  event MintFinished();\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier hasMintPermission() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to mint tokens\\n\\n   * @param _to The address that will receive the minted tokens.\\n\\n   * @param _amount The amount of tokens to mint.\\n\\n   * @return A boolean that indicates if the operation was successful.\\n\\n   */\\n\\n  function mint(\\n\\n    address _to,\\n\\n    uint256 _amount\\n\\n  )\\n\\n    public\\n\\n    hasMintPermission\\n\\n    canMint\\n\\n    returns (bool)\\n\\n  {\\n\\n    totalSupply_ = totalSupply_.add(_amount);\\n\\n    balances[_to] = balances[_to].add(_amount);\\n\\n    emit Mint(_to, _amount);\\n\\n    emit Transfer(address(0), _to, _amount);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to stop minting new tokens.\\n\\n   * @return True if the operation was successful.\\n\\n   */\\n\\n  function finishMinting() public onlyOwner canMint returns (bool) {\\n\\n    mintingFinished = true;\\n\\n    emit MintFinished();\\n\\n    return true;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is Ownable {\\n\\n  event Pause();\\n\\n  event Unpause();\\n\\n\\n\\n  bool public paused = false;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n   */\\n\\n  modifier whenNotPaused() {\\n\\n    require(!paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n\\n   */\\n\\n  modifier whenPaused() {\\n\\n    require(paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to pause, triggers stopped state\\n\\n   */\\n\\n  function pause() public onlyOwner whenNotPaused {\\n\\n    paused = true;\\n\\n    emit Pause();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to unpause, returns to normal state\\n\\n   */\\n\\n  function unpause() public onlyOwner whenPaused {\\n\\n    paused = false;\\n\\n    emit Unpause();\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable token\\n\\n * @dev StandardToken modified with pausable transfers.\\n\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n\\n\\n\\n  function transfer(\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transfer(_to, _value);\\n\\n  }\\n\\n\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transferFrom(_from, _to, _value);\\n\\n  }\\n\\n\\n\\n  function approve(\\n\\n    address _spender,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.approve(_spender, _value);\\n\\n  }\\n\\n\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint _addedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.increaseApproval(_spender, _addedValue);\\n\\n  }\\n\\n\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.decreaseApproval(_spender, _subtractedValue);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract COT is MintableToken, PausableToken, DetailedERC20 {\\n\\n\\n\\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSuply)\\n\\n        DetailedERC20(_name, _symbol, _decimals)\\n\\n        public\\n\\n    {\\n\\n        // Initialize totalSupply\\n\\n        totalSupply_ = _totalSuply;\\n\\n        // Initialize Holder\\n\\n        balances[msg.sender] = _totalSuply;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x453f6bbd971b0c89d18e44ab87aa1bc0c786af41bff30bb03c334cebc9be75fd\"}},\"version\":1}"
      },
      "StandardToken": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b506106ae806100206000396000f30060806040526004361061008d5763ffffffff7c0100000000000000000000000000000000000000000000000000000000600035041663095ea7b3811461009257806318160ddd146100ca57806323b872dd146100f1578063661884631461011b57806370a082311461013f578063a9059cbb14610160578063d73dd62314610184578063dd62ed3e146101a8575b600080fd5b34801561009e57600080fd5b506100b6600160a060020a03600435166024356101cf565b604080519115158252519081900360200190f35b3480156100d657600080fd5b506100df610235565b60408051918252519081900360200190f35b3480156100fd57600080fd5b506100b6600160a060020a036004358116906024351660443561023b565b34801561012757600080fd5b506100b6600160a060020a03600435166024356103b0565b34801561014b57600080fd5b506100df600160a060020a036004351661049f565b34801561016c57600080fd5b506100b6600160a060020a03600435166024356104ba565b34801561019057600080fd5b506100b6600160a060020a0360043516602435610599565b3480156101b457600080fd5b506100df600160a060020a0360043581169060243516610632565b336000818152600260209081526040808320600160a060020a038716808552908352818420869055815186815291519394909390927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925928290030190a350600192915050565b60015490565b600160a060020a03831660009081526020819052604081205482111561026057600080fd5b600160a060020a038416600090815260026020908152604080832033845290915290205482111561029057600080fd5b600160a060020a03831615156102a557600080fd5b600160a060020a0384166000908152602081905260409020546102ce908363ffffffff61065d16565b600160a060020a038086166000908152602081905260408082209390935590851681522054610303908363ffffffff61066f16565b600160a060020a03808516600090815260208181526040808320949094559187168152600282528281203382529091522054610345908363ffffffff61065d16565b600160a060020a03808616600081815260026020908152604080832033845282529182902094909455805186815290519287169391927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef929181900390910190a35060019392505050565b336000908152600260209081526040808320600160a060020a038616845290915281205480831061040457336000908152600260209081526040808320600160a060020a0388168452909152812055610439565b610414818463ffffffff61065d16565b336000908152600260209081526040808320600160a060020a03891684529091529020555b336000818152600260209081526040808320600160a060020a0389168085529083529281902054815190815290519293927f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929181900390910190a35060019392505050565b600160a060020a031660009081526020819052604090205490565b336000908152602081905260408120548211156104d657600080fd5b600160a060020a03831615156104eb57600080fd5b3360009081526020819052604090205461050b908363ffffffff61065d16565b3360009081526020819052604080822092909255600160a060020a0385168152205461053d908363ffffffff61066f16565b600160a060020a038416600081815260208181526040918290209390935580518581529051919233927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9281900390910190a350600192915050565b336000908152600260209081526040808320600160a060020a03861684529091528120546105cd908363ffffffff61066f16565b336000818152600260209081526040808320600160a060020a0389168085529083529281902085905580519485525191937f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925929081900390910190a350600192915050565b600160a060020a03918216600090815260026020908152604080832093909416825291909152205490565b60008282111561066957fe5b50900390565b8181018281101561067c57fe5b929150505600a165627a7a72305820f1b32debd393fb6301d21af32491f1d59d178d915223f680db069a40e0174a670029",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x6AE DUP1 PUSH2 0x20 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x8D JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x95EA7B3 DUP2 EQ PUSH2 0x92 JUMPI DUP1 PUSH4 0x18160DDD EQ PUSH2 0xCA JUMPI DUP1 PUSH4 0x23B872DD EQ PUSH2 0xF1 JUMPI DUP1 PUSH4 0x66188463 EQ PUSH2 0x11B JUMPI DUP1 PUSH4 0x70A08231 EQ PUSH2 0x13F JUMPI DUP1 PUSH4 0xA9059CBB EQ PUSH2 0x160 JUMPI DUP1 PUSH4 0xD73DD623 EQ PUSH2 0x184 JUMPI DUP1 PUSH4 0xDD62ED3E EQ PUSH2 0x1A8 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x9E JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x1CF JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 ISZERO ISZERO DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xD6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDF PUSH2 0x235 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD SWAP2 DUP3 MSTORE MLOAD SWAP1 DUP2 SWAP1 SUB PUSH1 0x20 ADD SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xFD JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH1 0x44 CALLDATALOAD PUSH2 0x23B JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x127 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x3B0 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x14B JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDF PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH2 0x49F JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x16C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x4BA JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x190 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xB6 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD AND PUSH1 0x24 CALLDATALOAD PUSH2 0x599 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x1B4 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xDF PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB PUSH1 0x4 CALLDATALOAD DUP2 AND SWAP1 PUSH1 0x24 CALLDATALOAD AND PUSH2 0x632 JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP8 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE DUP2 DUP5 KECCAK256 DUP7 SWAP1 SSTORE DUP2 MLOAD DUP7 DUP2 MSTORE SWAP2 MLOAD SWAP4 SWAP5 SWAP1 SWAP4 SWAP1 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 DUP3 SWAP1 SUB ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x260 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x290 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0x2A5 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x2CE SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x65D AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE SWAP1 DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x303 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x66F AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP6 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE SWAP2 DUP8 AND DUP2 MSTORE PUSH1 0x2 DUP3 MSTORE DUP3 DUP2 KECCAK256 CALLER DUP3 MSTORE SWAP1 SWAP2 MSTORE KECCAK256 SLOAD PUSH2 0x345 SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x65D AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP1 DUP7 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 CALLER DUP5 MSTORE DUP3 MSTORE SWAP2 DUP3 SWAP1 KECCAK256 SWAP5 SWAP1 SWAP5 SSTORE DUP1 MLOAD DUP7 DUP2 MSTORE SWAP1 MLOAD SWAP3 DUP8 AND SWAP4 SWAP2 SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD DUP1 DUP4 LT PUSH2 0x404 JUMPI CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP9 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SSTORE PUSH2 0x439 JUMP JUMPDEST PUSH2 0x414 DUP2 DUP5 PUSH4 0xFFFFFFFF PUSH2 0x65D AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE SWAP1 KECCAK256 SSTORE JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 SLOAD DUP2 MLOAD SWAP1 DUP2 MSTORE SWAP1 MLOAD SWAP3 SWAP4 SWAP3 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP2 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD SWAP1 JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP2 KECCAK256 SLOAD DUP3 GT ISZERO PUSH2 0x4D6 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP4 AND ISZERO ISZERO PUSH2 0x4EB JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 SWAP1 KECCAK256 SLOAD PUSH2 0x50B SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x65D AND JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x20 DUP2 SWAP1 MSTORE PUSH1 0x40 DUP1 DUP3 KECCAK256 SWAP3 SWAP1 SWAP3 SSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP6 AND DUP2 MSTORE KECCAK256 SLOAD PUSH2 0x53D SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x66F AND JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP5 AND PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x20 DUP2 DUP2 MSTORE PUSH1 0x40 SWAP2 DUP3 SWAP1 KECCAK256 SWAP4 SWAP1 SWAP4 SSTORE DUP1 MLOAD DUP6 DUP2 MSTORE SWAP1 MLOAD SWAP2 SWAP3 CALLER SWAP3 PUSH32 0xDDF252AD1BE2C89B69C2B068FC378DAA952BA7F163C4A11628F55A4DF523B3EF SWAP3 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST CALLER PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP7 AND DUP5 MSTORE SWAP1 SWAP2 MSTORE DUP2 KECCAK256 SLOAD PUSH2 0x5CD SWAP1 DUP4 PUSH4 0xFFFFFFFF PUSH2 0x66F AND JUMP JUMPDEST CALLER PUSH1 0x0 DUP2 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB DUP10 AND DUP1 DUP6 MSTORE SWAP1 DUP4 MSTORE SWAP3 DUP2 SWAP1 KECCAK256 DUP6 SWAP1 SSTORE DUP1 MLOAD SWAP5 DUP6 MSTORE MLOAD SWAP2 SWAP4 PUSH32 0x8C5BE1E5EBEC7D5BD14F71427D1E84F3DD0314C0F7B2291E5B200AC8C7C3B925 SWAP3 SWAP1 DUP2 SWAP1 SUB SWAP1 SWAP2 ADD SWAP1 LOG3 POP PUSH1 0x1 SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP2 DUP3 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 SWAP4 SWAP1 SWAP5 AND DUP3 MSTORE SWAP2 SWAP1 SWAP2 MSTORE KECCAK256 SLOAD SWAP1 JUMP JUMPDEST PUSH1 0x0 DUP3 DUP3 GT ISZERO PUSH2 0x669 JUMPI INVALID JUMPDEST POP SWAP1 SUB SWAP1 JUMP JUMPDEST DUP2 DUP2 ADD DUP3 DUP2 LT ISZERO PUSH2 0x67C JUMPI INVALID JUMPDEST SWAP3 SWAP2 POP POP JUMP STOP LOG1 PUSH6 0x627A7A723058 KECCAK256 CALL 0xb3 0x2d 0xeb 0xd3 SWAP4 CREATE2 PUSH4 0x1D21AF3 0x24 SWAP2 CALL 0xd5 SWAP14 OR DUP14 SWAP2 MSTORE 0x23 0xf6 DUP1 0xdb MOD SWAP11 BLOCKHASH 0xe0 OR 0x4a PUSH8 0x29000000000000 ",
            "sourceMap": "5656:3890:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;5656:3890:0;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_subtractedValue\",\"type\":\"uint256\"}],\"name\":\"decreaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_value\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_addedValue\",\"type\":\"uint256\"}],\"name\":\"increaseApproval\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_owner\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowance(address,address)\":{\"details\":\"Function to check the amount of tokens that an owner allowed to a spender.\",\"params\":{\"_owner\":\"address The address which owns the funds.\",\"_spender\":\"address The address which will spend the funds.\"},\"return\":\"A uint256 specifying the amount of tokens still available for the spender.\"},\"approve(address,uint256)\":{\"details\":\"Approve the passed address to spend the specified amount of tokens on behalf of msg.sender. Beware that changing an allowance with this method brings the risk that someone may use both the old and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards: https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_value\":\"The amount of tokens to be spent.\"}},\"balanceOf(address)\":{\"details\":\"Gets the balance of the specified address.\",\"params\":{\"_owner\":\"The address to query the the balance of.\"},\"return\":\"An uint256 representing the amount owned by the passed address.\"},\"decreaseApproval(address,uint256)\":{\"details\":\"Decrease the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To decrement allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_spender\":\"The address which will spend the funds.\",\"_subtractedValue\":\"The amount of tokens to decrease the allowance by.\"}},\"increaseApproval(address,uint256)\":{\"details\":\"Increase the amount of tokens that an owner allowed to a spender. approve should be called when allowed[_spender] == 0. To increment allowed value is better to use this function to avoid 2 calls (and wait until the first transaction is mined) From MonolithDAO Token.sol\",\"params\":{\"_addedValue\":\"The amount of tokens to increase the allowance by.\",\"_spender\":\"The address which will spend the funds.\"}},\"totalSupply()\":{\"details\":\"Total number of tokens in existence\"},\"transfer(address,uint256)\":{\"details\":\"Transfer token for a specified address\",\"params\":{\"_to\":\"The address to transfer to.\",\"_value\":\"The amount to be transferred.\"}},\"transferFrom(address,address,uint256)\":{\"details\":\"Transfer tokens from one address to another\",\"params\":{\"_from\":\"address The address which you want to send tokens from\",\"_to\":\"address The address which you want to transfer to\",\"_value\":\"uint256 the amount of tokens to be transferred\"}}},\"title\":\"Standard ERC20 token \"},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"StandardToken\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-11-01\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.24;\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20Basic\\n\\n * @dev Simpler version of ERC20 interface\\n\\n * See https://github.com/ethereum/EIPs/issues/179\\n\\n */\\n\\ncontract ERC20Basic {\\n\\n  function totalSupply() public view returns (uint256);\\n\\n  function balanceOf(address _who) public view returns (uint256);\\n\\n  function transfer(address _to, uint256 _value) public returns (bool);\\n\\n  event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Ownable\\n\\n * @dev The Ownable contract has an owner address, and provides basic authorization control\\n\\n * functions, this simplifies the implementation of \\\"user permissions\\\".\\n\\n */\\n\\ncontract Ownable {\\n\\n  address public owner;\\n\\n\\n\\n\\n\\n  event OwnershipRenounced(address indexed previousOwner);\\n\\n  event OwnershipTransferred(\\n\\n    address indexed previousOwner,\\n\\n    address indexed newOwner\\n\\n  );\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev The Ownable constructor sets the original `owner` of the contract to the sender\\n\\n   * account.\\n\\n   */\\n\\n  constructor() public {\\n\\n    owner = msg.sender;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Throws if called by any account other than the owner.\\n\\n   */\\n\\n  modifier onlyOwner() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to relinquish control of the contract.\\n\\n   * @notice Renouncing to ownership will leave the contract without an owner.\\n\\n   * It will not be possible to call the functions with the `onlyOwner`\\n\\n   * modifier anymore.\\n\\n   */\\n\\n  function renounceOwnership() public onlyOwner {\\n\\n    emit OwnershipRenounced(owner);\\n\\n    owner = address(0);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Allows the current owner to transfer control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function transferOwnership(address _newOwner) public onlyOwner {\\n\\n    _transferOwnership(_newOwner);\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Transfers control of the contract to a newOwner.\\n\\n   * @param _newOwner The address to transfer ownership to.\\n\\n   */\\n\\n  function _transferOwnership(address _newOwner) internal {\\n\\n    require(_newOwner != address(0));\\n\\n    emit OwnershipTransferred(owner, _newOwner);\\n\\n    owner = _newOwner;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title ERC20 interface\\n\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n\\n */\\n\\ncontract ERC20 is ERC20Basic {\\n\\n  function allowance(address _owner, address _spender)\\n\\n    public view returns (uint256);\\n\\n\\n\\n  function transferFrom(address _from, address _to, uint256 _value)\\n\\n    public returns (bool);\\n\\n\\n\\n  function approve(address _spender, uint256 _value) public returns (bool);\\n\\n  event Approval(\\n\\n    address indexed owner,\\n\\n    address indexed spender,\\n\\n    uint256 value\\n\\n  );\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title SafeMath\\n\\n * @dev Math operations with safety checks that throw on error\\n\\n */\\n\\nlibrary SafeMath {\\n\\n\\n\\n  /**\\n\\n  * @dev Multiplies two numbers, throws on overflow.\\n\\n  */\\n\\n  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the\\n\\n    // benefit is lost if 'b' is also tested.\\n\\n    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n\\n    if (_a == 0) {\\n\\n      return 0;\\n\\n    }\\n\\n\\n\\n    c = _a * _b;\\n\\n    assert(c / _a == _b);\\n\\n    return c;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Integer division of two numbers, truncating the quotient.\\n\\n  */\\n\\n  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    // assert(_b > 0); // Solidity automatically throws when dividing by 0\\n\\n    // uint256 c = _a / _b;\\n\\n    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n    return _a / _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).\\n\\n  */\\n\\n  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n\\n    assert(_b <= _a);\\n\\n    return _a - _b;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Adds two numbers, throws on overflow.\\n\\n  */\\n\\n  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {\\n\\n    c = _a + _b;\\n\\n    assert(c >= _a);\\n\\n    return c;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Basic token\\n\\n * @dev Basic version of StandardToken, with no allowances.\\n\\n */\\n\\ncontract BasicToken is ERC20Basic {\\n\\n  using SafeMath for uint256;\\n\\n\\n\\n  mapping(address => uint256) internal balances;\\n\\n\\n\\n  uint256 internal totalSupply_;\\n\\n\\n\\n  /**\\n\\n  * @dev Total number of tokens in existence\\n\\n  */\\n\\n  function totalSupply() public view returns (uint256) {\\n\\n    return totalSupply_;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Transfer token for a specified address\\n\\n  * @param _to The address to transfer to.\\n\\n  * @param _value The amount to be transferred.\\n\\n  */\\n\\n  function transfer(address _to, uint256 _value) public returns (bool) {\\n\\n    require(_value <= balances[msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[msg.sender] = balances[msg.sender].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    emit Transfer(msg.sender, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n  * @dev Gets the balance of the specified address.\\n\\n  * @param _owner The address to query the the balance of.\\n\\n  * @return An uint256 representing the amount owned by the passed address.\\n\\n  */\\n\\n  function balanceOf(address _owner) public view returns (uint256) {\\n\\n    return balances[_owner];\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Standard ERC20 token\\n\\n *\\n\\n * @dev Implementation of the basic standard token.\\n\\n * https://github.com/ethereum/EIPs/issues/20\\n\\n * Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol\\n\\n */\\n\\ncontract StandardToken is ERC20, BasicToken {\\n\\n\\n\\n  mapping (address => mapping (address => uint256)) internal allowed;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Transfer tokens from one address to another\\n\\n   * @param _from address The address which you want to send tokens from\\n\\n   * @param _to address The address which you want to transfer to\\n\\n   * @param _value uint256 the amount of tokens to be transferred\\n\\n   */\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    require(_value <= balances[_from]);\\n\\n    require(_value <= allowed[_from][msg.sender]);\\n\\n    require(_to != address(0));\\n\\n\\n\\n    balances[_from] = balances[_from].sub(_value);\\n\\n    balances[_to] = balances[_to].add(_value);\\n\\n    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);\\n\\n    emit Transfer(_from, _to, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\\n\\n   * Beware that changing an allowance with this method brings the risk that someone may use both the old\\n\\n   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\\n\\n   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\\n\\n   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _value The amount of tokens to be spent.\\n\\n   */\\n\\n  function approve(address _spender, uint256 _value) public returns (bool) {\\n\\n    allowed[msg.sender][_spender] = _value;\\n\\n    emit Approval(msg.sender, _spender, _value);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to check the amount of tokens that an owner allowed to a spender.\\n\\n   * @param _owner address The address which owns the funds.\\n\\n   * @param _spender address The address which will spend the funds.\\n\\n   * @return A uint256 specifying the amount of tokens still available for the spender.\\n\\n   */\\n\\n  function allowance(\\n\\n    address _owner,\\n\\n    address _spender\\n\\n   )\\n\\n    public\\n\\n    view\\n\\n    returns (uint256)\\n\\n  {\\n\\n    return allowed[_owner][_spender];\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Increase the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To increment\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _addedValue The amount of tokens to increase the allowance by.\\n\\n   */\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _addedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    allowed[msg.sender][_spender] = (\\n\\n      allowed[msg.sender][_spender].add(_addedValue));\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Decrease the amount of tokens that an owner allowed to a spender.\\n\\n   * approve should be called when allowed[_spender] == 0. To decrement\\n\\n   * allowed value is better to use this function to avoid 2 calls (and wait until\\n\\n   * the first transaction is mined)\\n\\n   * From MonolithDAO Token.sol\\n\\n   * @param _spender The address which will spend the funds.\\n\\n   * @param _subtractedValue The amount of tokens to decrease the allowance by.\\n\\n   */\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint256 _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    returns (bool)\\n\\n  {\\n\\n    uint256 oldValue = allowed[msg.sender][_spender];\\n\\n    if (_subtractedValue >= oldValue) {\\n\\n      allowed[msg.sender][_spender] = 0;\\n\\n    } else {\\n\\n      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);\\n\\n    }\\n\\n    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title DetailedERC20 token\\n\\n * @dev The decimals are only for visualization purposes.\\n\\n * All the operations are done using the smallest and indivisible token unit,\\n\\n * just as on Ethereum all the operations are done in wei.\\n\\n */\\n\\ncontract DetailedERC20 is ERC20 {\\n\\n  string public name;\\n\\n  string public symbol;\\n\\n  uint8 public decimals;\\n\\n\\n\\n  constructor(string _name, string _symbol, uint8 _decimals) public {\\n\\n    name = _name;\\n\\n    symbol = _symbol;\\n\\n    decimals = _decimals;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Mintable token\\n\\n * @dev Simple ERC20 Token example, with mintable token creation\\n\\n * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol\\n\\n */\\n\\ncontract MintableToken is StandardToken, Ownable {\\n\\n  event Mint(address indexed to, uint256 amount);\\n\\n  event MintFinished();\\n\\n\\n\\n  bool public mintingFinished = false;\\n\\n\\n\\n\\n\\n  modifier canMint() {\\n\\n    require(!mintingFinished);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  modifier hasMintPermission() {\\n\\n    require(msg.sender == owner);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to mint tokens\\n\\n   * @param _to The address that will receive the minted tokens.\\n\\n   * @param _amount The amount of tokens to mint.\\n\\n   * @return A boolean that indicates if the operation was successful.\\n\\n   */\\n\\n  function mint(\\n\\n    address _to,\\n\\n    uint256 _amount\\n\\n  )\\n\\n    public\\n\\n    hasMintPermission\\n\\n    canMint\\n\\n    returns (bool)\\n\\n  {\\n\\n    totalSupply_ = totalSupply_.add(_amount);\\n\\n    balances[_to] = balances[_to].add(_amount);\\n\\n    emit Mint(_to, _amount);\\n\\n    emit Transfer(address(0), _to, _amount);\\n\\n    return true;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Function to stop minting new tokens.\\n\\n   * @return True if the operation was successful.\\n\\n   */\\n\\n  function finishMinting() public onlyOwner canMint returns (bool) {\\n\\n    mintingFinished = true;\\n\\n    emit MintFinished();\\n\\n    return true;\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable\\n\\n * @dev Base contract which allows children to implement an emergency stop mechanism.\\n\\n */\\n\\ncontract Pausable is Ownable {\\n\\n  event Pause();\\n\\n  event Unpause();\\n\\n\\n\\n  bool public paused = false;\\n\\n\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is not paused.\\n\\n   */\\n\\n  modifier whenNotPaused() {\\n\\n    require(!paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev Modifier to make a function callable only when the contract is paused.\\n\\n   */\\n\\n  modifier whenPaused() {\\n\\n    require(paused);\\n\\n    _;\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to pause, triggers stopped state\\n\\n   */\\n\\n  function pause() public onlyOwner whenNotPaused {\\n\\n    paused = true;\\n\\n    emit Pause();\\n\\n  }\\n\\n\\n\\n  /**\\n\\n   * @dev called by the owner to unpause, returns to normal state\\n\\n   */\\n\\n  function unpause() public onlyOwner whenPaused {\\n\\n    paused = false;\\n\\n    emit Unpause();\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\n\\n\\n/**\\n\\n * @title Pausable token\\n\\n * @dev StandardToken modified with pausable transfers.\\n\\n **/\\n\\ncontract PausableToken is StandardToken, Pausable {\\n\\n\\n\\n  function transfer(\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transfer(_to, _value);\\n\\n  }\\n\\n\\n\\n  function transferFrom(\\n\\n    address _from,\\n\\n    address _to,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.transferFrom(_from, _to, _value);\\n\\n  }\\n\\n\\n\\n  function approve(\\n\\n    address _spender,\\n\\n    uint256 _value\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool)\\n\\n  {\\n\\n    return super.approve(_spender, _value);\\n\\n  }\\n\\n\\n\\n  function increaseApproval(\\n\\n    address _spender,\\n\\n    uint _addedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.increaseApproval(_spender, _addedValue);\\n\\n  }\\n\\n\\n\\n  function decreaseApproval(\\n\\n    address _spender,\\n\\n    uint _subtractedValue\\n\\n  )\\n\\n    public\\n\\n    whenNotPaused\\n\\n    returns (bool success)\\n\\n  {\\n\\n    return super.decreaseApproval(_spender, _subtractedValue);\\n\\n  }\\n\\n}\\n\\n\\n\\n\\n\\ncontract COT is MintableToken, PausableToken, DetailedERC20 {\\n\\n\\n\\n    constructor(string _name, string _symbol, uint8 _decimals, uint256 _totalSuply)\\n\\n        DetailedERC20(_name, _symbol, _decimals)\\n\\n        public\\n\\n    {\\n\\n        // Initialize totalSupply\\n\\n        totalSupply_ = _totalSuply;\\n\\n        // Initialize Holder\\n\\n        balances[msg.sender] = _totalSuply;\\n\\n    }\\n\\n}\",\"keccak256\":\"0x453f6bbd971b0c89d18e44ab87aa1bc0c786af41bff30bb03c334cebc9be75fd\"}},\"version\":1}"
      }
    }
  },
  "sources": {
    "reentrancy.sol": {
      "ast": {
        "absolutePath": "reentrancy.sol",
        "exportedSymbols": {
          "BasicToken": [
            339
          ],
          "COT": [
            905
          ],
          "DetailedERC20": [
            613
          ],
          "ERC20": [
            155
          ],
          "ERC20Basic": [
            31
          ],
          "MintableToken": [
            715
          ],
          "Ownable": [
            115
          ],
          "Pausable": [
            772
          ],
          "PausableToken": [
            870
          ],
          "SafeMath": [
            247
          ],
          "StandardToken": [
            582
          ]
        },
        "id": 906,
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".24"
            ],
            "nodeType": "PragmaDirective",
            "src": "71:24:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": "@title ERC20Basic\n@dev Simpler version of ERC20 interface\nSee https://github.com/ethereum/EIPs/issues/179",
            "fullyImplemented": false,
            "id": 31,
            "linearizedBaseContracts": [
              31
            ],
            "name": "ERC20Basic",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": null,
                "documentation": null,
                "id": 6,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "totalSupply",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 2,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "274:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 5,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 4,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 6,
                      "src": "298:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 3,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "298:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "297:9:0"
                },
                "scope": 31,
                "src": "254:53:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "documentation": null,
                "id": 13,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "balanceOf",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 9,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 8,
                      "name": "_who",
                      "nodeType": "VariableDeclaration",
                      "scope": 13,
                      "src": "330:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 7,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "330:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "329:14:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 12,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 11,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 13,
                      "src": "365:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 10,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "365:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "364:9:0"
                },
                "scope": 31,
                "src": "311:63:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "documentation": null,
                "id": 22,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 18,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 15,
                      "name": "_to",
                      "nodeType": "VariableDeclaration",
                      "scope": 22,
                      "src": "396:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 14,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "396:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 17,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 22,
                      "src": "409:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 16,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "409:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "395:29:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 21,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 20,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 22,
                      "src": "441:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 19,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "441:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "440:6:0"
                },
                "scope": 31,
                "src": "378:69:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 30,
                "name": "Transfer",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 29,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 24,
                      "indexed": true,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 30,
                      "src": "466:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 23,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "466:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 26,
                      "indexed": true,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 30,
                      "src": "488:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 25,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "488:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 28,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 30,
                      "src": "508:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 27,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "508:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "465:57:0"
                },
                "src": "451:72:0"
              }
            ],
            "scope": 906,
            "src": "229:297:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": "@title Ownable\n@dev The Ownable contract has an owner address, and provides basic authorization control\nfunctions, this simplifies the implementation of \"user permissions\".",
            "fullyImplemented": true,
            "id": 115,
            "linearizedBaseContracts": [
              115
            ],
            "name": "Ownable",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 33,
                "name": "owner",
                "nodeType": "VariableDeclaration",
                "scope": 115,
                "src": "751:20:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 32,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "751:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 37,
                "name": "OwnershipRenounced",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 36,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 35,
                      "indexed": true,
                      "name": "previousOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 37,
                      "src": "805:29:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 34,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "805:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "804:31:0"
                },
                "src": "780:56:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 43,
                "name": "OwnershipTransferred",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 42,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 39,
                      "indexed": true,
                      "name": "previousOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 43,
                      "src": "873:29:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 38,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "873:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 41,
                      "indexed": true,
                      "name": "newOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 43,
                      "src": "909:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 40,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "909:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "866:72:0"
                },
                "src": "840:99:0"
              },
              {
                "body": {
                  "id": 51,
                  "nodeType": "Block",
                  "src": "1088:31:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 49,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 46,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33,
                          "src": "1095:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "expression": {
                            "argumentTypes": null,
                            "id": 47,
                            "name": "msg",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 920,
                            "src": "1103:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_magic_message",
                              "typeString": "msg"
                            }
                          },
                          "id": 48,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "sender",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": null,
                          "src": "1103:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1095:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 50,
                      "nodeType": "ExpressionStatement",
                      "src": "1095:18:0"
                    }
                  ]
                },
                "documentation": "@dev The Ownable constructor sets the original `owner` of the contract to the sender\naccount.",
                "id": 52,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 44,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1078:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 45,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1088:0:0"
                },
                "scope": 115,
                "src": "1067:52:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 62,
                  "nodeType": "Block",
                  "src": "1225:49:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 58,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 55,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 920,
                                "src": "1240:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 56,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "1240:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 57,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 33,
                              "src": "1254:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "1240:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 54,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            923,
                            924
                          ],
                          "referencedDeclaration": 923,
                          "src": "1232:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 59,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1232:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 60,
                      "nodeType": "ExpressionStatement",
                      "src": "1232:28:0"
                    },
                    {
                      "id": 61,
                      "nodeType": "PlaceholderStatement",
                      "src": "1267:1:0"
                    }
                  ]
                },
                "documentation": "@dev Throws if called by any account other than the owner.",
                "id": 63,
                "name": "onlyOwner",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 53,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1222:2:0"
                },
                "src": "1204:70:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 78,
                  "nodeType": "Block",
                  "src": "1592:68:0",
                  "statements": [
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 69,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 33,
                            "src": "1623:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 68,
                          "name": "OwnershipRenounced",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 37,
                          "src": "1604:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 70,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1604:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 71,
                      "nodeType": "EmitStatement",
                      "src": "1599:30:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 76,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 72,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33,
                          "src": "1636:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 74,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "1652:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              }
                            ],
                            "id": 73,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "ElementaryTypeNameExpression",
                            "src": "1644:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_type$_t_address_$",
                              "typeString": "type(address)"
                            },
                            "typeName": "address"
                          },
                          "id": 75,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "typeConversion",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1644:10:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "1636:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 77,
                      "nodeType": "ExpressionStatement",
                      "src": "1636:18:0"
                    }
                  ]
                },
                "documentation": "@dev Allows the current owner to relinquish control of the contract.\n@notice Renouncing to ownership will leave the contract without an owner.\nIt will not be possible to call the functions with the `onlyOwner`\nmodifier anymore.",
                "id": 79,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 66,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 65,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 63,
                      "src": "1582:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "1582:9:0"
                  }
                ],
                "name": "renounceOwnership",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 64,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1572:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 67,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1592:0:0"
                },
                "scope": 115,
                "src": "1546:114:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 90,
                  "nodeType": "Block",
                  "src": "1891:42:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 87,
                            "name": "_newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 81,
                            "src": "1917:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 86,
                          "name": "_transferOwnership",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 114,
                          "src": "1898:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$returns$__$",
                            "typeString": "function (address)"
                          }
                        },
                        "id": 88,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "1898:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 89,
                      "nodeType": "ExpressionStatement",
                      "src": "1898:29:0"
                    }
                  ]
                },
                "documentation": "@dev Allows the current owner to transfer control of the contract to a newOwner.\n@param _newOwner The address to transfer ownership to.",
                "id": 91,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 84,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 83,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 63,
                      "src": "1881:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "1881:9:0"
                  }
                ],
                "name": "transferOwnership",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 82,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 81,
                      "name": "_newOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 91,
                      "src": "1855:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 80,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "1855:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "1854:19:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 85,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1891:0:0"
                },
                "scope": 115,
                "src": "1828:105:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 113,
                  "nodeType": "Block",
                  "src": "2130:119:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 101,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 97,
                              "name": "_newOwner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 93,
                              "src": "2145:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 99,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "2166:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 98,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "2158:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 100,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "2158:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "2145:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 96,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            923,
                            924
                          ],
                          "referencedDeclaration": 923,
                          "src": "2137:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 102,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2137:32:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 103,
                      "nodeType": "ExpressionStatement",
                      "src": "2137:32:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 105,
                            "name": "owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 33,
                            "src": "2202:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 106,
                            "name": "_newOwner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 93,
                            "src": "2209:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          ],
                          "id": 104,
                          "name": "OwnershipTransferred",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 43,
                          "src": "2181:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$returns$__$",
                            "typeString": "function (address,address)"
                          }
                        },
                        "id": 107,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2181:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 108,
                      "nodeType": "EmitStatement",
                      "src": "2176:43:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 111,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 109,
                          "name": "owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 33,
                          "src": "2226:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 110,
                          "name": "_newOwner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 93,
                          "src": "2234:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "2226:17:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 112,
                      "nodeType": "ExpressionStatement",
                      "src": "2226:17:0"
                    }
                  ]
                },
                "documentation": "@dev Transfers control of the contract to a newOwner.\n@param _newOwner The address to transfer ownership to.",
                "id": 114,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "_transferOwnership",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 94,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 93,
                      "name": "_newOwner",
                      "nodeType": "VariableDeclaration",
                      "scope": 114,
                      "src": "2102:17:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 92,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2102:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2101:19:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 95,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "2130:0:0"
                },
                "scope": 115,
                "src": "2074:175:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 906,
            "src": "729:1523:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 116,
                  "name": "ERC20Basic",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 31,
                  "src": "2375:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Basic_$31",
                    "typeString": "contract ERC20Basic"
                  }
                },
                "id": 117,
                "nodeType": "InheritanceSpecifier",
                "src": "2375:10:0"
              }
            ],
            "contractDependencies": [
              31
            ],
            "contractKind": "contract",
            "documentation": "@title ERC20 interface\n@dev see https://github.com/ethereum/EIPs/issues/20",
            "fullyImplemented": false,
            "id": 155,
            "linearizedBaseContracts": [
              155,
              31
            ],
            "name": "ERC20",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": null,
                "documentation": null,
                "id": 126,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "allowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 122,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 119,
                      "name": "_owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 126,
                      "src": "2410:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 118,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2410:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 121,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 126,
                      "src": "2426:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 120,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2426:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2409:34:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 125,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 124,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 126,
                      "src": "2470:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 123,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2470:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2469:9:0"
                },
                "scope": 155,
                "src": "2391:88:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "documentation": null,
                "id": 137,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transferFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 133,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 128,
                      "name": "_from",
                      "nodeType": "VariableDeclaration",
                      "scope": 137,
                      "src": "2507:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 127,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2507:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 130,
                      "name": "_to",
                      "nodeType": "VariableDeclaration",
                      "scope": 137,
                      "src": "2522:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 129,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2522:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 132,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 137,
                      "src": "2535:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 131,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2535:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2506:44:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 136,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 135,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 137,
                      "src": "2572:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 134,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2572:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2571:6:0"
                },
                "scope": 155,
                "src": "2485:93:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": null,
                "documentation": null,
                "id": 146,
                "implemented": false,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "approve",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 142,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 139,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 146,
                      "src": "2601:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 138,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2601:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 141,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 146,
                      "src": "2619:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 140,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2619:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2600:34:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 145,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 144,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 146,
                      "src": "2651:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 143,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "2651:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2650:6:0"
                },
                "scope": 155,
                "src": "2584:73:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 154,
                "name": "Approval",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 153,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 148,
                      "indexed": true,
                      "name": "owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 154,
                      "src": "2682:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 147,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2682:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 150,
                      "indexed": true,
                      "name": "spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 154,
                      "src": "2710:23:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 149,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "2710:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 152,
                      "indexed": false,
                      "name": "value",
                      "nodeType": "VariableDeclaration",
                      "scope": 154,
                      "src": "2740:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 151,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2740:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2675:83:0"
                },
                "src": "2661:98:0"
              }
            ],
            "scope": 906,
            "src": "2357:405:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "library",
            "documentation": "@title SafeMath\n@dev Math operations with safety checks that throw on error",
            "fullyImplemented": true,
            "id": 247,
            "linearizedBaseContracts": [
              247
            ],
            "name": "SafeMath",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 187,
                  "nodeType": "Block",
                  "src": "3038:320:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 166,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 164,
                          "name": "_a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 157,
                          "src": "3257:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "30",
                          "id": 165,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "3263:1:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_0_by_1",
                            "typeString": "int_const 0"
                          },
                          "value": "0"
                        },
                        "src": "3257:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": null,
                      "id": 170,
                      "nodeType": "IfStatement",
                      "src": "3253:38:0",
                      "trueBody": {
                        "id": 169,
                        "nodeType": "Block",
                        "src": "3266:25:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 167,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "3282:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "functionReturnParameters": 163,
                            "id": 168,
                            "nodeType": "Return",
                            "src": "3275:8:0"
                          }
                        ]
                      }
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 175,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 171,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 162,
                          "src": "3299:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 174,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 172,
                            "name": "_a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 157,
                            "src": "3303:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "*",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 173,
                            "name": "_b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 159,
                            "src": "3308:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "3303:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3299:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 176,
                      "nodeType": "ExpressionStatement",
                      "src": "3299:11:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 182,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 180,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 178,
                                "name": "c",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 162,
                                "src": "3324:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "/",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 179,
                                "name": "_a",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 157,
                                "src": "3328:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "3324:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 181,
                              "name": "_b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 159,
                              "src": "3334:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3324:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 177,
                          "name": "assert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 909,
                          "src": "3317:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 183,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3317:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 184,
                      "nodeType": "ExpressionStatement",
                      "src": "3317:20:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 185,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 162,
                        "src": "3351:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 163,
                      "id": 186,
                      "nodeType": "Return",
                      "src": "3344:8:0"
                    }
                  ]
                },
                "documentation": "@dev Multiplies two numbers, throws on overflow.",
                "id": 188,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "mul",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 160,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 157,
                      "name": "_a",
                      "nodeType": "VariableDeclaration",
                      "scope": 188,
                      "src": "2980:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 156,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2980:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 159,
                      "name": "_b",
                      "nodeType": "VariableDeclaration",
                      "scope": 188,
                      "src": "2992:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 158,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "2992:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2979:24:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 163,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 162,
                      "name": "c",
                      "nodeType": "VariableDeclaration",
                      "scope": 188,
                      "src": "3027:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 161,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3027:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3026:11:0"
                },
                "scope": 247,
                "src": "2967:391:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 201,
                  "nodeType": "Block",
                  "src": "3514:219:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 199,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 197,
                          "name": "_a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 190,
                          "src": "3720:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "/",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 198,
                          "name": "_b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 192,
                          "src": "3725:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3720:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 196,
                      "id": 200,
                      "nodeType": "Return",
                      "src": "3713:14:0"
                    }
                  ]
                },
                "documentation": "@dev Integer division of two numbers, truncating the quotient.",
                "id": 202,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "div",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 193,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 190,
                      "name": "_a",
                      "nodeType": "VariableDeclaration",
                      "scope": 202,
                      "src": "3458:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 189,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3458:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 192,
                      "name": "_b",
                      "nodeType": "VariableDeclaration",
                      "scope": 202,
                      "src": "3470:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 191,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3470:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3457:24:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 196,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 195,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 202,
                      "src": "3505:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 194,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3505:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3504:9:0"
                },
                "scope": 247,
                "src": "3445:288:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 221,
                  "nodeType": "Block",
                  "src": "3919:50:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 214,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 212,
                              "name": "_b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 206,
                              "src": "3933:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 213,
                              "name": "_a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 204,
                              "src": "3939:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3933:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 211,
                          "name": "assert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 909,
                          "src": "3926:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 215,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3926:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 216,
                      "nodeType": "ExpressionStatement",
                      "src": "3926:16:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 219,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 217,
                          "name": "_a",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 204,
                          "src": "3956:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "-",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 218,
                          "name": "_b",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 206,
                          "src": "3961:2:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "3956:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 210,
                      "id": 220,
                      "nodeType": "Return",
                      "src": "3949:14:0"
                    }
                  ]
                },
                "documentation": "@dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).",
                "id": 222,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "sub",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 207,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 204,
                      "name": "_a",
                      "nodeType": "VariableDeclaration",
                      "scope": 222,
                      "src": "3863:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 203,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3863:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 206,
                      "name": "_b",
                      "nodeType": "VariableDeclaration",
                      "scope": 222,
                      "src": "3875:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 205,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3875:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3862:24:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 210,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 209,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 222,
                      "src": "3910:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 208,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "3910:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3909:9:0"
                },
                "scope": 247,
                "src": "3850:119:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 245,
                  "nodeType": "Block",
                  "src": "4107:61:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 235,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 231,
                          "name": "c",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 229,
                          "src": "4114:1:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 234,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "id": 232,
                            "name": "_a",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 224,
                            "src": "4118:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "argumentTypes": null,
                            "id": 233,
                            "name": "_b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 226,
                            "src": "4123:2:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "4118:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4114:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 236,
                      "nodeType": "ExpressionStatement",
                      "src": "4114:11:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 240,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 238,
                              "name": "c",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 229,
                              "src": "4139:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 239,
                              "name": "_a",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 224,
                              "src": "4144:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "4139:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 237,
                          "name": "assert",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 909,
                          "src": "4132:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_assert_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 241,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4132:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 242,
                      "nodeType": "ExpressionStatement",
                      "src": "4132:15:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 243,
                        "name": "c",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 229,
                        "src": "4161:1:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 230,
                      "id": 244,
                      "nodeType": "Return",
                      "src": "4154:8:0"
                    }
                  ]
                },
                "documentation": "@dev Adds two numbers, throws on overflow.",
                "id": 246,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "add",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 227,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 224,
                      "name": "_a",
                      "nodeType": "VariableDeclaration",
                      "scope": 246,
                      "src": "4049:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 223,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4049:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 226,
                      "name": "_b",
                      "nodeType": "VariableDeclaration",
                      "scope": 246,
                      "src": "4061:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 225,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4061:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4048:24:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 230,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 229,
                      "name": "c",
                      "nodeType": "VariableDeclaration",
                      "scope": 246,
                      "src": "4096:9:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 228,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4096:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4095:11:0"
                },
                "scope": 247,
                "src": "4036:132:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 906,
            "src": "2876:1295:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 248,
                  "name": "ERC20Basic",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 31,
                  "src": "4296:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20Basic_$31",
                    "typeString": "contract ERC20Basic"
                  }
                },
                "id": 249,
                "nodeType": "InheritanceSpecifier",
                "src": "4296:10:0"
              }
            ],
            "contractDependencies": [
              31
            ],
            "contractKind": "contract",
            "documentation": "@title Basic token\n@dev Basic version of StandardToken, with no allowances.",
            "fullyImplemented": true,
            "id": 339,
            "linearizedBaseContracts": [
              339,
              31
            ],
            "name": "BasicToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 252,
                "libraryName": {
                  "contractScope": null,
                  "id": 250,
                  "name": "SafeMath",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 247,
                  "src": "4318:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_SafeMath_$247",
                    "typeString": "library SafeMath"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "4312:27:0",
                "typeName": {
                  "id": 251,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4331:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                }
              },
              {
                "constant": false,
                "id": 256,
                "name": "balances",
                "nodeType": "VariableDeclaration",
                "scope": 339,
                "src": "4345:45:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                  "typeString": "mapping(address => uint256)"
                },
                "typeName": {
                  "id": 255,
                  "keyType": {
                    "id": 253,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "4353:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "4345:27:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                    "typeString": "mapping(address => uint256)"
                  },
                  "valueType": {
                    "id": 254,
                    "name": "uint256",
                    "nodeType": "ElementaryTypeName",
                    "src": "4364:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    }
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "constant": false,
                "id": 258,
                "name": "totalSupply_",
                "nodeType": "VariableDeclaration",
                "scope": 339,
                "src": "4397:29:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                },
                "typeName": {
                  "id": 257,
                  "name": "uint256",
                  "nodeType": "ElementaryTypeName",
                  "src": "4397:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint256",
                    "typeString": "uint256"
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 265,
                  "nodeType": "Block",
                  "src": "4545:32:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 263,
                        "name": "totalSupply_",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 258,
                        "src": "4559:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 262,
                      "id": 264,
                      "nodeType": "Return",
                      "src": "4552:19:0"
                    }
                  ]
                },
                "documentation": "@dev Total number of tokens in existence",
                "id": 266,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "totalSupply",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 259,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "4512:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 262,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 261,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 266,
                      "src": "4536:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 260,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4536:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4535:9:0"
                },
                "scope": 339,
                "src": "4492:85:0",
                "stateMutability": "view",
                "superFunction": 6,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 325,
                  "nodeType": "Block",
                  "src": "4807:260:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 281,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 276,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 270,
                              "src": "4822:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 277,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 256,
                                "src": "4832:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 280,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 278,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 920,
                                  "src": "4841:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 279,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "4841:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4832:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "4822:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 275,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            923,
                            924
                          ],
                          "referencedDeclaration": 923,
                          "src": "4814:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 282,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4814:39:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 283,
                      "nodeType": "ExpressionStatement",
                      "src": "4814:39:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 289,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 285,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 268,
                              "src": "4868:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 287,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "4883:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 286,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "4875:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 288,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "4875:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "4868:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 284,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            923,
                            924
                          ],
                          "referencedDeclaration": 923,
                          "src": "4860:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 290,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "4860:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 291,
                      "nodeType": "ExpressionStatement",
                      "src": "4860:26:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 303,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 292,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 256,
                            "src": "4895:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 295,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 293,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 920,
                              "src": "4904:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 294,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "4904:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "4895:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 301,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 270,
                              "src": "4943:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 296,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 256,
                                "src": "4918:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 299,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 297,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 920,
                                  "src": "4927:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 298,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "4927:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4918:20:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 300,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 222,
                            "src": "4918:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 302,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4918:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4895:55:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 304,
                      "nodeType": "ExpressionStatement",
                      "src": "4895:55:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 314,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 305,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 256,
                            "src": "4957:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 307,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 306,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 268,
                            "src": "4966:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "4957:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 312,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 270,
                              "src": "4991:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 308,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 256,
                                "src": "4973:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 310,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 309,
                                "name": "_to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 268,
                                "src": "4982:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "4973:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 311,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 246,
                            "src": "4973:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 313,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "4973:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "4957:41:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 315,
                      "nodeType": "ExpressionStatement",
                      "src": "4957:41:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 317,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 920,
                              "src": "5019:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 318,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "5019:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 319,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 268,
                            "src": "5031:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 320,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 270,
                            "src": "5036:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 316,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30,
                          "src": "5010:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 321,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "5010:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 322,
                      "nodeType": "EmitStatement",
                      "src": "5005:38:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 323,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "5057:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 274,
                      "id": 324,
                      "nodeType": "Return",
                      "src": "5050:11:0"
                    }
                  ]
                },
                "documentation": "@dev Transfer token for a specified address\n@param _to The address to transfer to.\n@param _value The amount to be transferred.",
                "id": 326,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 271,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 268,
                      "name": "_to",
                      "nodeType": "VariableDeclaration",
                      "scope": 326,
                      "src": "4756:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 267,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "4756:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 270,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 326,
                      "src": "4769:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 269,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "4769:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4755:29:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 274,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 273,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 326,
                      "src": "4801:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 272,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "4801:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "4800:6:0"
                },
                "scope": 339,
                "src": "4738:329:0",
                "stateMutability": "nonpayable",
                "superFunction": 22,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 337,
                  "nodeType": "Block",
                  "src": "5341:36:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "id": 333,
                          "name": "balances",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 256,
                          "src": "5355:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 335,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 334,
                          "name": "_owner",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 328,
                          "src": "5364:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "5355:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 332,
                      "id": 336,
                      "nodeType": "Return",
                      "src": "5348:23:0"
                    }
                  ]
                },
                "documentation": "@dev Gets the balance of the specified address.\n@param _owner The address to query the the balance of.\n@return An uint256 representing the amount owned by the passed address.",
                "id": 338,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "balanceOf",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 329,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 328,
                      "name": "_owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 338,
                      "src": "5295:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 327,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "5295:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5294:16:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 332,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 331,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 338,
                      "src": "5332:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 330,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "5332:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "5331:9:0"
                },
                "scope": 339,
                "src": "5276:101:0",
                "stateMutability": "view",
                "superFunction": 13,
                "visibility": "public"
              }
            ],
            "scope": 906,
            "src": "4273:1109:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 340,
                  "name": "ERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 155,
                  "src": "5682:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$155",
                    "typeString": "contract ERC20"
                  }
                },
                "id": 341,
                "nodeType": "InheritanceSpecifier",
                "src": "5682:5:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 342,
                  "name": "BasicToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 339,
                  "src": "5689:10:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_BasicToken_$339",
                    "typeString": "contract BasicToken"
                  }
                },
                "id": 343,
                "nodeType": "InheritanceSpecifier",
                "src": "5689:10:0"
              }
            ],
            "contractDependencies": [
              31,
              155,
              339
            ],
            "contractKind": "contract",
            "documentation": "@title Standard ERC20 token\n\n * @dev Implementation of the basic standard token.\nhttps://github.com/ethereum/EIPs/issues/20\nBased on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol",
            "fullyImplemented": true,
            "id": 582,
            "linearizedBaseContracts": [
              582,
              339,
              155,
              31
            ],
            "name": "StandardToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 349,
                "name": "allowed",
                "nodeType": "VariableDeclaration",
                "scope": 582,
                "src": "5707:66:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                  "typeString": "mapping(address => mapping(address => uint256))"
                },
                "typeName": {
                  "id": 348,
                  "keyType": {
                    "id": 344,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "5716:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "5707:49:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "valueType": {
                    "id": 347,
                    "keyType": {
                      "id": 345,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "5736:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "5727:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 346,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "5747:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  }
                },
                "value": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 434,
                  "nodeType": "Block",
                  "src": "6180:366:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 365,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 361,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 355,
                              "src": "6195:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 362,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 256,
                                "src": "6205:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 364,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 363,
                                "name": "_from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 351,
                                "src": "6214:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6205:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6195:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 360,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            923,
                            924
                          ],
                          "referencedDeclaration": 923,
                          "src": "6187:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 366,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6187:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 367,
                      "nodeType": "ExpressionStatement",
                      "src": "6187:34:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 376,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 369,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 355,
                              "src": "6236:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 370,
                                  "name": "allowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 349,
                                  "src": "6246:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 372,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 371,
                                  "name": "_from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 351,
                                  "src": "6254:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6246:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 375,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 373,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 920,
                                  "src": "6261:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 374,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "6261:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6246:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "6236:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 368,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            923,
                            924
                          ],
                          "referencedDeclaration": 923,
                          "src": "6228:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 377,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6228:45:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 378,
                      "nodeType": "ExpressionStatement",
                      "src": "6228:45:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 384,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 380,
                              "name": "_to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 353,
                              "src": "6288:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "!=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "hexValue": "30",
                                  "id": 382,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "6303:1:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  },
                                  "value": "0"
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_rational_0_by_1",
                                    "typeString": "int_const 0"
                                  }
                                ],
                                "id": 381,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "nodeType": "ElementaryTypeNameExpression",
                                "src": "6295:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_type$_t_address_$",
                                  "typeString": "type(address)"
                                },
                                "typeName": "address"
                              },
                              "id": 383,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "typeConversion",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "6295:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "6288:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 379,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            923,
                            924
                          ],
                          "referencedDeclaration": 923,
                          "src": "6280:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 385,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6280:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 386,
                      "nodeType": "ExpressionStatement",
                      "src": "6280:26:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 396,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 387,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 256,
                            "src": "6315:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 389,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 388,
                            "name": "_from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 351,
                            "src": "6324:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "6315:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 394,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 355,
                              "src": "6353:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 390,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 256,
                                "src": "6333:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 392,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 391,
                                "name": "_from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 351,
                                "src": "6342:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6333:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 393,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 222,
                            "src": "6333:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 395,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6333:27:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6315:45:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 397,
                      "nodeType": "ExpressionStatement",
                      "src": "6315:45:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 407,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 398,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 256,
                            "src": "6367:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 400,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 399,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 353,
                            "src": "6376:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "6367:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 405,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 355,
                              "src": "6401:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 401,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 256,
                                "src": "6383:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 403,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 402,
                                "name": "_to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 353,
                                "src": "6392:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6383:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 404,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 246,
                            "src": "6383:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 406,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6383:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6367:41:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 408,
                      "nodeType": "ExpressionStatement",
                      "src": "6367:41:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 424,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 409,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 349,
                              "src": "6415:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 413,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 410,
                              "name": "_from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 351,
                              "src": "6423:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "6415:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 414,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 411,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 920,
                              "src": "6430:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 412,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "6430:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "6415:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 422,
                              "name": "_value",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 355,
                              "src": "6475:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 415,
                                  "name": "allowed",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 349,
                                  "src": "6444:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 417,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 416,
                                  "name": "_from",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 351,
                                  "src": "6452:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "6444:14:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 420,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 418,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 920,
                                  "src": "6459:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 419,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "6459:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "6444:26:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 421,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sub",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 222,
                            "src": "6444:30:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 423,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "6444:38:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "6415:67:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 425,
                      "nodeType": "ExpressionStatement",
                      "src": "6415:67:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 427,
                            "name": "_from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 351,
                            "src": "6503:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 428,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 353,
                            "src": "6510:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 429,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 355,
                            "src": "6515:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 426,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30,
                          "src": "6494:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 430,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "6494:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 431,
                      "nodeType": "EmitStatement",
                      "src": "6489:33:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 432,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "6536:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 359,
                      "id": 433,
                      "nodeType": "Return",
                      "src": "6529:11:0"
                    }
                  ]
                },
                "documentation": "@dev Transfer tokens from one address to another\n@param _from address The address which you want to send tokens from\n@param _to address The address which you want to transfer to\n@param _value uint256 the amount of tokens to be transferred",
                "id": 435,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "transferFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 356,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 351,
                      "name": "_from",
                      "nodeType": "VariableDeclaration",
                      "scope": 435,
                      "src": "6087:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 350,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6087:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 353,
                      "name": "_to",
                      "nodeType": "VariableDeclaration",
                      "scope": 435,
                      "src": "6107:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 352,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "6107:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 355,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 435,
                      "src": "6125:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 354,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6125:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6080:64:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 359,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 358,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 435,
                      "src": "6171:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 357,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "6171:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6170:6:0"
                },
                "scope": 582,
                "src": "6059:487:0",
                "stateMutability": "nonpayable",
                "superFunction": 137,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 462,
                  "nodeType": "Block",
                  "src": "7248:119:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 451,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 444,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 349,
                              "src": "7255:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 448,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 445,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 920,
                                "src": "7263:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 446,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "7263:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "7255:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 449,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 447,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 437,
                            "src": "7275:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "7255:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 450,
                          "name": "_value",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 439,
                          "src": "7287:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "7255:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 452,
                      "nodeType": "ExpressionStatement",
                      "src": "7255:38:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 454,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 920,
                              "src": "7314:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 455,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "7314:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 456,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 437,
                            "src": "7326:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 457,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 439,
                            "src": "7336:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 453,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 154,
                          "src": "7305:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 458,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "7305:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 459,
                      "nodeType": "EmitStatement",
                      "src": "7300:43:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 460,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "7357:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 443,
                      "id": 461,
                      "nodeType": "Return",
                      "src": "7350:11:0"
                    }
                  ]
                },
                "documentation": "@dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.\nBeware that changing an allowance with this method brings the risk that someone may use both the old\nand the new allowance by unfortunate transaction ordering. One possible solution to mitigate this\nrace condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:\nhttps://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n@param _spender The address which will spend the funds.\n@param _value The amount of tokens to be spent.",
                "id": 463,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "approve",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 440,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 437,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 463,
                      "src": "7192:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 436,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7192:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 439,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 463,
                      "src": "7210:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 438,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7210:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7191:34:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 443,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 442,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 463,
                      "src": "7242:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 441,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "7242:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7241:6:0"
                },
                "scope": 582,
                "src": "7175:192:0",
                "stateMutability": "nonpayable",
                "superFunction": 146,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 478,
                  "nodeType": "Block",
                  "src": "7811:45:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 472,
                            "name": "allowed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 349,
                            "src": "7825:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                              "typeString": "mapping(address => mapping(address => uint256))"
                            }
                          },
                          "id": 474,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 473,
                            "name": "_owner",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 465,
                            "src": "7833:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "7825:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 476,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 475,
                          "name": "_spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 467,
                          "src": "7841:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "7825:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 471,
                      "id": 477,
                      "nodeType": "Return",
                      "src": "7818:32:0"
                    }
                  ]
                },
                "documentation": "@dev Function to check the amount of tokens that an owner allowed to a spender.\n@param _owner address The address which owns the funds.\n@param _spender address The address which will spend the funds.\n@return A uint256 specifying the amount of tokens still available for the spender.",
                "id": 479,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "allowance",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 468,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 465,
                      "name": "_owner",
                      "nodeType": "VariableDeclaration",
                      "scope": 479,
                      "src": "7719:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 464,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7719:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 467,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 479,
                      "src": "7740:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 466,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "7740:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7712:50:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 471,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 470,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 479,
                      "src": "7799:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 469,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7799:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7798:9:0"
                },
                "scope": 582,
                "src": "7694:162:0",
                "stateMutability": "view",
                "superFunction": 126,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 520,
                  "nodeType": "Block",
                  "src": "8434:192:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 504,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 488,
                              "name": "allowed",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 349,
                              "src": "8441:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 492,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 489,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 920,
                                "src": "8449:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 490,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "8449:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8441:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 493,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 491,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 481,
                            "src": "8461:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "8441:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "components": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 501,
                                  "name": "_addedValue",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 483,
                                  "src": "8516:11:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "baseExpression": {
                                      "argumentTypes": null,
                                      "id": 494,
                                      "name": "allowed",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 349,
                                      "src": "8482:7:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                        "typeString": "mapping(address => mapping(address => uint256))"
                                      }
                                    },
                                    "id": 497,
                                    "indexExpression": {
                                      "argumentTypes": null,
                                      "expression": {
                                        "argumentTypes": null,
                                        "id": 495,
                                        "name": "msg",
                                        "nodeType": "Identifier",
                                        "overloadedDeclarations": [],
                                        "referencedDeclaration": 920,
                                        "src": "8490:3:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_magic_message",
                                          "typeString": "msg"
                                        }
                                      },
                                      "id": 496,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": false,
                                      "lValueRequested": false,
                                      "memberName": "sender",
                                      "nodeType": "MemberAccess",
                                      "referencedDeclaration": null,
                                      "src": "8490:10:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_address",
                                        "typeString": "address"
                                      }
                                    },
                                    "isConstant": false,
                                    "isLValue": true,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "nodeType": "IndexAccess",
                                    "src": "8482:19:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                      "typeString": "mapping(address => uint256)"
                                    }
                                  },
                                  "id": 499,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "id": 498,
                                    "name": "_spender",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 481,
                                    "src": "8502:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "8482:29:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "id": 500,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "add",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 246,
                                "src": "8482:33:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                  "typeString": "function (uint256,uint256) pure returns (uint256)"
                                }
                              },
                              "id": 502,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "8482:46:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "id": 503,
                          "isConstant": false,
                          "isInlineArray": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "TupleExpression",
                          "src": "8473:56:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "8441:88:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 505,
                      "nodeType": "ExpressionStatement",
                      "src": "8441:88:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 507,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 920,
                              "src": "8550:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 508,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "8550:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 509,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 481,
                            "src": "8562:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 510,
                                "name": "allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 349,
                                "src": "8572:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 513,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 511,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 920,
                                  "src": "8580:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 512,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "8580:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "8572:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 515,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 514,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 481,
                              "src": "8592:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "8572:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 506,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 154,
                          "src": "8541:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 516,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "8541:61:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 517,
                      "nodeType": "EmitStatement",
                      "src": "8536:66:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 518,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "8616:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 487,
                      "id": 519,
                      "nodeType": "Return",
                      "src": "8609:11:0"
                    }
                  ]
                },
                "documentation": "@dev Increase the amount of tokens that an owner allowed to a spender.\napprove should be called when allowed[_spender] == 0. To increment\nallowed value is better to use this function to avoid 2 calls (and wait until\nthe first transaction is mined)\nFrom MonolithDAO Token.sol\n@param _spender The address which will spend the funds.\n@param _addedValue The amount of tokens to increase the allowance by.",
                "id": 521,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "increaseApproval",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 484,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 481,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 521,
                      "src": "8351:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 480,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "8351:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 483,
                      "name": "_addedValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 521,
                      "src": "8374:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 482,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "8374:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8344:54:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 487,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 486,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 521,
                      "src": "8425:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 485,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "8425:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "8424:6:0"
                },
                "scope": 582,
                "src": "8319:307:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 580,
                  "nodeType": "Block",
                  "src": "9214:327:0",
                  "statements": [
                    {
                      "assignments": [
                        531
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 531,
                          "name": "oldValue",
                          "nodeType": "VariableDeclaration",
                          "scope": 581,
                          "src": "9221:16:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 530,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "9221:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 538,
                      "initialValue": {
                        "argumentTypes": null,
                        "baseExpression": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 532,
                            "name": "allowed",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 349,
                            "src": "9240:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                              "typeString": "mapping(address => mapping(address => uint256))"
                            }
                          },
                          "id": 535,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 533,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 920,
                              "src": "9248:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 534,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "9248:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "9240:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                            "typeString": "mapping(address => uint256)"
                          }
                        },
                        "id": 537,
                        "indexExpression": {
                          "argumentTypes": null,
                          "id": 536,
                          "name": "_spender",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 523,
                          "src": "9260:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "isConstant": false,
                        "isLValue": true,
                        "isPure": false,
                        "lValueRequested": false,
                        "nodeType": "IndexAccess",
                        "src": "9240:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "9221:48:0"
                    },
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 541,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 539,
                          "name": "_subtractedValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 525,
                          "src": "9280:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": ">=",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 540,
                          "name": "oldValue",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 531,
                          "src": "9300:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "9280:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 564,
                        "nodeType": "Block",
                        "src": "9366:79:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 562,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 552,
                                    "name": "allowed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 349,
                                    "src": "9375:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(address => uint256))"
                                    }
                                  },
                                  "id": 556,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 553,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 920,
                                      "src": "9383:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 554,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "9383:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "9375:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 557,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 555,
                                  "name": "_spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 523,
                                  "src": "9395:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "9375:29:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "arguments": [
                                  {
                                    "argumentTypes": null,
                                    "id": 560,
                                    "name": "_subtractedValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 525,
                                    "src": "9420:16:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": [
                                    {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 558,
                                    "name": "oldValue",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 531,
                                    "src": "9407:8:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_uint256",
                                      "typeString": "uint256"
                                    }
                                  },
                                  "id": 559,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "sub",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 222,
                                  "src": "9407:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                                    "typeString": "function (uint256,uint256) pure returns (uint256)"
                                  }
                                },
                                "id": 561,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "kind": "functionCall",
                                "lValueRequested": false,
                                "names": [],
                                "nodeType": "FunctionCall",
                                "src": "9407:30:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "9375:62:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 563,
                            "nodeType": "ExpressionStatement",
                            "src": "9375:62:0"
                          }
                        ]
                      },
                      "id": 565,
                      "nodeType": "IfStatement",
                      "src": "9276:169:0",
                      "trueBody": {
                        "id": 551,
                        "nodeType": "Block",
                        "src": "9310:50:0",
                        "statements": [
                          {
                            "expression": {
                              "argumentTypes": null,
                              "id": 549,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftHandSide": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "baseExpression": {
                                    "argumentTypes": null,
                                    "id": 542,
                                    "name": "allowed",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 349,
                                    "src": "9319:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                      "typeString": "mapping(address => mapping(address => uint256))"
                                    }
                                  },
                                  "id": 546,
                                  "indexExpression": {
                                    "argumentTypes": null,
                                    "expression": {
                                      "argumentTypes": null,
                                      "id": 543,
                                      "name": "msg",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 920,
                                      "src": "9327:3:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_magic_message",
                                        "typeString": "msg"
                                      }
                                    },
                                    "id": 544,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": false,
                                    "lValueRequested": false,
                                    "memberName": "sender",
                                    "nodeType": "MemberAccess",
                                    "referencedDeclaration": null,
                                    "src": "9327:10:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_address",
                                      "typeString": "address"
                                    }
                                  },
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "nodeType": "IndexAccess",
                                  "src": "9319:19:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                    "typeString": "mapping(address => uint256)"
                                  }
                                },
                                "id": 547,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "id": 545,
                                  "name": "_spender",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 523,
                                  "src": "9339:8:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": true,
                                "nodeType": "IndexAccess",
                                "src": "9319:29:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "Assignment",
                              "operator": "=",
                              "rightHandSide": {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 548,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "9351:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              },
                              "src": "9319:33:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 550,
                            "nodeType": "ExpressionStatement",
                            "src": "9319:33:0"
                          }
                        ]
                      }
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 567,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 920,
                              "src": "9465:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 568,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "9465:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 569,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 523,
                            "src": "9477:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 570,
                                "name": "allowed",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 349,
                                "src": "9487:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                  "typeString": "mapping(address => mapping(address => uint256))"
                                }
                              },
                              "id": 573,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 571,
                                  "name": "msg",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 920,
                                  "src": "9495:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_message",
                                    "typeString": "msg"
                                  }
                                },
                                "id": 572,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "sender",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "9495:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "9487:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                "typeString": "mapping(address => uint256)"
                              }
                            },
                            "id": 575,
                            "indexExpression": {
                              "argumentTypes": null,
                              "id": 574,
                              "name": "_spender",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 523,
                              "src": "9507:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "9487:29:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 566,
                          "name": "Approval",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 154,
                          "src": "9456:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 576,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "9456:61:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 577,
                      "nodeType": "EmitStatement",
                      "src": "9451:66:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 578,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "9531:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 529,
                      "id": 579,
                      "nodeType": "Return",
                      "src": "9524:11:0"
                    }
                  ]
                },
                "documentation": "@dev Decrease the amount of tokens that an owner allowed to a spender.\napprove should be called when allowed[_spender] == 0. To decrement\nallowed value is better to use this function to avoid 2 calls (and wait until\nthe first transaction is mined)\nFrom MonolithDAO Token.sol\n@param _spender The address which will spend the funds.\n@param _subtractedValue The amount of tokens to decrease the allowance by.",
                "id": 581,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "decreaseApproval",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 526,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 523,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 581,
                      "src": "9126:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 522,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "9126:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 525,
                      "name": "_subtractedValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 581,
                      "src": "9149:24:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 524,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "9149:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "9119:59:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 529,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 528,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 581,
                      "src": "9205:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 527,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "9205:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "9204:6:0"
                },
                "scope": 582,
                "src": "9094:447:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 906,
            "src": "5656:3890:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 583,
                  "name": "ERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 155,
                  "src": "9827:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_ERC20_$155",
                    "typeString": "contract ERC20"
                  }
                },
                "id": 584,
                "nodeType": "InheritanceSpecifier",
                "src": "9827:5:0"
              }
            ],
            "contractDependencies": [
              31,
              155
            ],
            "contractKind": "contract",
            "documentation": "@title DetailedERC20 token\n@dev The decimals are only for visualization purposes.\nAll the operations are done using the smallest and indivisible token unit,\njust as on Ethereum all the operations are done in wei.",
            "fullyImplemented": false,
            "id": 613,
            "linearizedBaseContracts": [
              613,
              155,
              31
            ],
            "name": "DetailedERC20",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": false,
                "id": 586,
                "name": "name",
                "nodeType": "VariableDeclaration",
                "scope": 613,
                "src": "9838:18:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 585,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "9838:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 588,
                "name": "symbol",
                "nodeType": "VariableDeclaration",
                "scope": 613,
                "src": "9861:20:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_storage",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 587,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "9861:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 590,
                "name": "decimals",
                "nodeType": "VariableDeclaration",
                "scope": 613,
                "src": "9886:21:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                },
                "typeName": {
                  "id": 589,
                  "name": "uint8",
                  "nodeType": "ElementaryTypeName",
                  "src": "9886:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 611,
                  "nodeType": "Block",
                  "src": "9980:75:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 601,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 599,
                          "name": "name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 586,
                          "src": "9987:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 600,
                          "name": "_name",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 592,
                          "src": "9994:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "src": "9987:12:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "id": 602,
                      "nodeType": "ExpressionStatement",
                      "src": "9987:12:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 605,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 603,
                          "name": "symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 588,
                          "src": "10006:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_storage",
                            "typeString": "string storage ref"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 604,
                          "name": "_symbol",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 594,
                          "src": "10015:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_string_memory_ptr",
                            "typeString": "string memory"
                          }
                        },
                        "src": "10006:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage",
                          "typeString": "string storage ref"
                        }
                      },
                      "id": 606,
                      "nodeType": "ExpressionStatement",
                      "src": "10006:16:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 609,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 607,
                          "name": "decimals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 590,
                          "src": "10029:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 608,
                          "name": "_decimals",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 596,
                          "src": "10040:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          }
                        },
                        "src": "10029:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "id": 610,
                      "nodeType": "ExpressionStatement",
                      "src": "10029:20:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 612,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 597,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 592,
                      "name": "_name",
                      "nodeType": "VariableDeclaration",
                      "scope": 612,
                      "src": "9926:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 591,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "9926:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 594,
                      "name": "_symbol",
                      "nodeType": "VariableDeclaration",
                      "scope": 612,
                      "src": "9940:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 593,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "9940:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 596,
                      "name": "_decimals",
                      "nodeType": "VariableDeclaration",
                      "scope": 612,
                      "src": "9956:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 595,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "9956:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "9925:47:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 598,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "9980:0:0"
                },
                "scope": 613,
                "src": "9914:141:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 906,
            "src": "9801:257:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 614,
                  "name": "StandardToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 582,
                  "src": "10317:13:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_StandardToken_$582",
                    "typeString": "contract StandardToken"
                  }
                },
                "id": 615,
                "nodeType": "InheritanceSpecifier",
                "src": "10317:13:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 616,
                  "name": "Ownable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 115,
                  "src": "10332:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Ownable_$115",
                    "typeString": "contract Ownable"
                  }
                },
                "id": 617,
                "nodeType": "InheritanceSpecifier",
                "src": "10332:7:0"
              }
            ],
            "contractDependencies": [
              115,
              31,
              155,
              339,
              582
            ],
            "contractKind": "contract",
            "documentation": "@title Mintable token\n@dev Simple ERC20 Token example, with mintable token creation\nBased on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol",
            "fullyImplemented": true,
            "id": 715,
            "linearizedBaseContracts": [
              715,
              115,
              582,
              339,
              155,
              31
            ],
            "name": "MintableToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "anonymous": false,
                "documentation": null,
                "id": 623,
                "name": "Mint",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 622,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 619,
                      "indexed": true,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 623,
                      "src": "10356:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 618,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10356:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 621,
                      "indexed": false,
                      "name": "amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 623,
                      "src": "10376:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 620,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10376:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "10355:36:0"
                },
                "src": "10345:47:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 625,
                "name": "MintFinished",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 624,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10414:2:0"
                },
                "src": "10396:21:0"
              },
              {
                "constant": false,
                "id": 628,
                "name": "mintingFinished",
                "nodeType": "VariableDeclaration",
                "scope": 715,
                "src": "10423:35:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 626,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "10423:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "66616c7365",
                  "id": 627,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "bool",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "10453:5:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "value": "false"
                },
                "visibility": "public"
              },
              {
                "body": {
                  "id": 636,
                  "nodeType": "Block",
                  "src": "10486:46:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 632,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "10501:16:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 631,
                              "name": "mintingFinished",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 628,
                              "src": "10502:15:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 630,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            923,
                            924
                          ],
                          "referencedDeclaration": 923,
                          "src": "10493:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 633,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10493:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 634,
                      "nodeType": "ExpressionStatement",
                      "src": "10493:25:0"
                    },
                    {
                      "id": 635,
                      "nodeType": "PlaceholderStatement",
                      "src": "10525:1:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 637,
                "name": "canMint",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 629,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10483:2:0"
                },
                "src": "10467:65:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 647,
                  "nodeType": "Block",
                  "src": "10567:49:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 643,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 640,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 920,
                                "src": "10582:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 641,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "10582:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 642,
                              "name": "owner",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 33,
                              "src": "10596:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "10582:19:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 639,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            923,
                            924
                          ],
                          "referencedDeclaration": 923,
                          "src": "10574:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 644,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "10574:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 645,
                      "nodeType": "ExpressionStatement",
                      "src": "10574:28:0"
                    },
                    {
                      "id": 646,
                      "nodeType": "PlaceholderStatement",
                      "src": "10609:1:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 648,
                "name": "hasMintPermission",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 638,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "10564:2:0"
                },
                "src": "10538:78:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 694,
                  "nodeType": "Block",
                  "src": "10990:196:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 666,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 661,
                          "name": "totalSupply_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 258,
                          "src": "10997:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 664,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 652,
                              "src": "11029:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "id": 662,
                              "name": "totalSupply_",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 258,
                              "src": "11012:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 663,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 246,
                            "src": "11012:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 665,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11012:25:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "10997:40:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 667,
                      "nodeType": "ExpressionStatement",
                      "src": "10997:40:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 677,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 668,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 256,
                            "src": "11044:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 670,
                          "indexExpression": {
                            "argumentTypes": null,
                            "id": 669,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 650,
                            "src": "11053:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "11044:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 675,
                              "name": "_amount",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 652,
                              "src": "11078:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "expression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "id": 671,
                                "name": "balances",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 256,
                                "src": "11060:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 673,
                              "indexExpression": {
                                "argumentTypes": null,
                                "id": 672,
                                "name": "_to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 650,
                                "src": "11069:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "11060:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "id": 674,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "add",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 246,
                            "src": "11060:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$returns$_t_uint256_$bound_to$_t_uint256_$",
                              "typeString": "function (uint256,uint256) pure returns (uint256)"
                            }
                          },
                          "id": 676,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "11060:26:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "11044:42:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 678,
                      "nodeType": "ExpressionStatement",
                      "src": "11044:42:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 680,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 650,
                            "src": "11103:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 681,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 652,
                            "src": "11108:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 679,
                          "name": "Mint",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 623,
                          "src": "11098:4:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,uint256)"
                          }
                        },
                        "id": 682,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11098:18:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 683,
                      "nodeType": "EmitStatement",
                      "src": "11093:23:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "hexValue": "30",
                                "id": 686,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "11145:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                },
                                "value": "0"
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_rational_0_by_1",
                                  "typeString": "int_const 0"
                                }
                              ],
                              "id": 685,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "11137:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_address_$",
                                "typeString": "type(address)"
                              },
                              "typeName": "address"
                            },
                            "id": 687,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "11137:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 688,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 650,
                            "src": "11149:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 689,
                            "name": "_amount",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 652,
                            "src": "11154:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 684,
                          "name": "Transfer",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 30,
                          "src": "11128:8:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$__$",
                            "typeString": "function (address,address,uint256)"
                          }
                        },
                        "id": 690,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11128:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 691,
                      "nodeType": "EmitStatement",
                      "src": "11123:39:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 692,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11176:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 660,
                      "id": 693,
                      "nodeType": "Return",
                      "src": "11169:11:0"
                    }
                  ]
                },
                "documentation": "@dev Function to mint tokens\n@param _to The address that will receive the minted tokens.\n@param _amount The amount of tokens to mint.\n@return A boolean that indicates if the operation was successful.",
                "id": 695,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 655,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 654,
                      "name": "hasMintPermission",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 648,
                      "src": "10936:17:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "10936:17:0"
                  },
                  {
                    "arguments": null,
                    "id": 657,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 656,
                      "name": "canMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 637,
                      "src": "10959:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "10959:7:0"
                  }
                ],
                "name": "mint",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 653,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 650,
                      "name": "_to",
                      "nodeType": "VariableDeclaration",
                      "scope": 695,
                      "src": "10880:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 649,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "10880:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 652,
                      "name": "_amount",
                      "nodeType": "VariableDeclaration",
                      "scope": 695,
                      "src": "10898:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 651,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "10898:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "10873:45:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 660,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 659,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 695,
                      "src": "10981:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 658,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "10981:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "10980:6:0"
                },
                "scope": 715,
                "src": "10860:326:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 713,
                  "nodeType": "Block",
                  "src": "11371:79:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 706,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 704,
                          "name": "mintingFinished",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 628,
                          "src": "11378:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 705,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "11396:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "11378:22:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 707,
                      "nodeType": "ExpressionStatement",
                      "src": "11378:22:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 708,
                          "name": "MintFinished",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 625,
                          "src": "11412:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 709,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11412:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 710,
                      "nodeType": "EmitStatement",
                      "src": "11407:19:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "hexValue": "74727565",
                        "id": 711,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "kind": "bool",
                        "lValueRequested": false,
                        "nodeType": "Literal",
                        "src": "11440:4:0",
                        "subdenomination": null,
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "value": "true"
                      },
                      "functionReturnParameters": 703,
                      "id": 712,
                      "nodeType": "Return",
                      "src": "11433:11:0"
                    }
                  ]
                },
                "documentation": "@dev Function to stop minting new tokens.\n@return True if the operation was successful.",
                "id": 714,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 698,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 697,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 63,
                      "src": "11338:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "11338:9:0"
                  },
                  {
                    "arguments": null,
                    "id": 700,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 699,
                      "name": "canMint",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 637,
                      "src": "11348:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "11348:7:0"
                  }
                ],
                "name": "finishMinting",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 696,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "11328:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 703,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 702,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 714,
                      "src": "11365:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 701,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "11365:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "11364:6:0"
                },
                "scope": 715,
                "src": "11306:144:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 906,
            "src": "10291:1162:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 716,
                  "name": "Ownable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 115,
                  "src": "11613:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Ownable_$115",
                    "typeString": "contract Ownable"
                  }
                },
                "id": 717,
                "nodeType": "InheritanceSpecifier",
                "src": "11613:7:0"
              }
            ],
            "contractDependencies": [
              115
            ],
            "contractKind": "contract",
            "documentation": "@title Pausable\n@dev Base contract which allows children to implement an emergency stop mechanism.",
            "fullyImplemented": true,
            "id": 772,
            "linearizedBaseContracts": [
              772,
              115
            ],
            "name": "Pausable",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "anonymous": false,
                "documentation": null,
                "id": 719,
                "name": "Pause",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 718,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "11637:2:0"
                },
                "src": "11626:14:0"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 721,
                "name": "Unpause",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 720,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "11657:2:0"
                },
                "src": "11644:16:0"
              },
              {
                "constant": false,
                "id": 724,
                "name": "paused",
                "nodeType": "VariableDeclaration",
                "scope": 772,
                "src": "11666:26:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bool",
                  "typeString": "bool"
                },
                "typeName": {
                  "id": 722,
                  "name": "bool",
                  "nodeType": "ElementaryTypeName",
                  "src": "11666:4:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "66616c7365",
                  "id": 723,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "bool",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "11687:5:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_bool",
                    "typeString": "bool"
                  },
                  "value": "false"
                },
                "visibility": "public"
              },
              {
                "body": {
                  "id": 732,
                  "nodeType": "Block",
                  "src": "11826:37:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 728,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "UnaryOperation",
                            "operator": "!",
                            "prefix": true,
                            "src": "11841:7:0",
                            "subExpression": {
                              "argumentTypes": null,
                              "id": 727,
                              "name": "paused",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 724,
                              "src": "11842:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 726,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            923,
                            924
                          ],
                          "referencedDeclaration": 923,
                          "src": "11833:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 729,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11833:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 730,
                      "nodeType": "ExpressionStatement",
                      "src": "11833:16:0"
                    },
                    {
                      "id": 731,
                      "nodeType": "PlaceholderStatement",
                      "src": "11856:1:0"
                    }
                  ]
                },
                "documentation": "@dev Modifier to make a function callable only when the contract is not paused.",
                "id": 733,
                "name": "whenNotPaused",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 725,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "11823:2:0"
                },
                "src": "11801:62:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 740,
                  "nodeType": "Block",
                  "src": "11987:36:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 736,
                            "name": "paused",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 724,
                            "src": "12002:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          ],
                          "id": 735,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            923,
                            924
                          ],
                          "referencedDeclaration": 923,
                          "src": "11994:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$returns$__$",
                            "typeString": "function (bool) pure"
                          }
                        },
                        "id": 737,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "11994:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 738,
                      "nodeType": "ExpressionStatement",
                      "src": "11994:15:0"
                    },
                    {
                      "id": 739,
                      "nodeType": "PlaceholderStatement",
                      "src": "12016:1:0"
                    }
                  ]
                },
                "documentation": "@dev Modifier to make a function callable only when the contract is paused.",
                "id": 741,
                "name": "whenPaused",
                "nodeType": "ModifierDefinition",
                "parameters": {
                  "id": 734,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "11984:2:0"
                },
                "src": "11965:58:0",
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 755,
                  "nodeType": "Block",
                  "src": "12155:45:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 750,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 748,
                          "name": "paused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 724,
                          "src": "12162:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "74727565",
                          "id": 749,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "12171:4:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "true"
                        },
                        "src": "12162:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 751,
                      "nodeType": "ExpressionStatement",
                      "src": "12162:13:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 752,
                          "name": "Pause",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 719,
                          "src": "12187:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 753,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12187:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 754,
                      "nodeType": "EmitStatement",
                      "src": "12182:12:0"
                    }
                  ]
                },
                "documentation": "@dev called by the owner to pause, triggers stopped state",
                "id": 756,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 744,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 743,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 63,
                      "src": "12131:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "12131:9:0"
                  },
                  {
                    "arguments": null,
                    "id": 746,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 745,
                      "name": "whenNotPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 733,
                      "src": "12141:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "12141:13:0"
                  }
                ],
                "name": "pause",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 742,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12121:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 747,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12155:0:0"
                },
                "scope": 772,
                "src": "12107:93:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 770,
                  "nodeType": "Block",
                  "src": "12334:48:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 765,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 763,
                          "name": "paused",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 724,
                          "src": "12341:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "66616c7365",
                          "id": 764,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "bool",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "12350:5:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          },
                          "value": "false"
                        },
                        "src": "12341:14:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "id": 766,
                      "nodeType": "ExpressionStatement",
                      "src": "12341:14:0"
                    },
                    {
                      "eventCall": {
                        "argumentTypes": null,
                        "arguments": [],
                        "expression": {
                          "argumentTypes": [],
                          "id": 767,
                          "name": "Unpause",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 721,
                          "src": "12367:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_event_nonpayable$__$returns$__$",
                            "typeString": "function ()"
                          }
                        },
                        "id": 768,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12367:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 769,
                      "nodeType": "EmitStatement",
                      "src": "12362:14:0"
                    }
                  ]
                },
                "documentation": "@dev called by the owner to unpause, returns to normal state",
                "id": 771,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 759,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 758,
                      "name": "onlyOwner",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 63,
                      "src": "12313:9:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "12313:9:0"
                  },
                  {
                    "arguments": null,
                    "id": 761,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 760,
                      "name": "whenPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 741,
                      "src": "12323:10:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "12323:10:0"
                  }
                ],
                "name": "unpause",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 757,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12303:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 762,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "12334:0:0"
                },
                "scope": 772,
                "src": "12287:95:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 906,
            "src": "11592:793:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 773,
                  "name": "StandardToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 582,
                  "src": "12513:13:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_StandardToken_$582",
                    "typeString": "contract StandardToken"
                  }
                },
                "id": 774,
                "nodeType": "InheritanceSpecifier",
                "src": "12513:13:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 775,
                  "name": "Pausable",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 772,
                  "src": "12528:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_Pausable_$772",
                    "typeString": "contract Pausable"
                  }
                },
                "id": 776,
                "nodeType": "InheritanceSpecifier",
                "src": "12528:8:0"
              }
            ],
            "contractDependencies": [
              115,
              31,
              155,
              339,
              582,
              772
            ],
            "contractKind": "contract",
            "documentation": "@title Pausable token\n@dev StandardToken modified with pausable transfers.*",
            "fullyImplemented": true,
            "id": 870,
            "linearizedBaseContracts": [
              870,
              772,
              115,
              582,
              339,
              155,
              31
            ],
            "name": "PausableToken",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 793,
                  "nodeType": "Block",
                  "src": "12660:47:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 789,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 778,
                            "src": "12689:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 790,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 780,
                            "src": "12694:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 787,
                            "name": "super",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 952,
                            "src": "12674:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_super$_PausableToken_$870",
                              "typeString": "contract super PausableToken"
                            }
                          },
                          "id": 788,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transfer",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 326,
                          "src": "12674:14:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) returns (bool)"
                          }
                        },
                        "id": 791,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12674:27:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 786,
                      "id": 792,
                      "nodeType": "Return",
                      "src": "12667:34:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 794,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 783,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 782,
                      "name": "whenNotPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 733,
                      "src": "12623:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "12623:13:0"
                  }
                ],
                "name": "transfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 781,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 778,
                      "name": "_to",
                      "nodeType": "VariableDeclaration",
                      "scope": 794,
                      "src": "12568:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 777,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12568:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 780,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 794,
                      "src": "12586:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 779,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12586:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "12561:44:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 786,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 785,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 794,
                      "src": "12651:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 784,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "12651:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "12650:6:0"
                },
                "scope": 870,
                "src": "12544:163:0",
                "stateMutability": "nonpayable",
                "superFunction": 326,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 814,
                  "nodeType": "Block",
                  "src": "12853:58:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 809,
                            "name": "_from",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 796,
                            "src": "12886:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 810,
                            "name": "_to",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 798,
                            "src": "12893:3:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 811,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 800,
                            "src": "12898:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 807,
                            "name": "super",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 952,
                            "src": "12867:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_super$_PausableToken_$870",
                              "typeString": "contract super PausableToken"
                            }
                          },
                          "id": 808,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "transferFrom",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 435,
                          "src": "12867:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,address,uint256) returns (bool)"
                          }
                        },
                        "id": 812,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12867:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 806,
                      "id": 813,
                      "nodeType": "Return",
                      "src": "12860:45:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 815,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 803,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 802,
                      "name": "whenNotPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 733,
                      "src": "12816:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "12816:13:0"
                  }
                ],
                "name": "transferFrom",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 801,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 796,
                      "name": "_from",
                      "nodeType": "VariableDeclaration",
                      "scope": 815,
                      "src": "12741:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 795,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12741:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 798,
                      "name": "_to",
                      "nodeType": "VariableDeclaration",
                      "scope": 815,
                      "src": "12761:11:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 797,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12761:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 800,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 815,
                      "src": "12779:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 799,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12779:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "12734:64:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 806,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 805,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 815,
                      "src": "12844:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 804,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "12844:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "12843:6:0"
                },
                "scope": 870,
                "src": "12713:198:0",
                "stateMutability": "nonpayable",
                "superFunction": 435,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 832,
                  "nodeType": "Block",
                  "src": "13037:51:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 828,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 817,
                            "src": "13065:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 829,
                            "name": "_value",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 819,
                            "src": "13075:6:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 826,
                            "name": "super",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 952,
                            "src": "13051:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_super$_PausableToken_$870",
                              "typeString": "contract super PausableToken"
                            }
                          },
                          "id": 827,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "approve",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 463,
                          "src": "13051:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) returns (bool)"
                          }
                        },
                        "id": 830,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13051:31:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 825,
                      "id": 831,
                      "nodeType": "Return",
                      "src": "13044:38:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 833,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 822,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 821,
                      "name": "whenNotPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 733,
                      "src": "13000:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "13000:13:0"
                  }
                ],
                "name": "approve",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 820,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 817,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 833,
                      "src": "12940:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 816,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "12940:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 819,
                      "name": "_value",
                      "nodeType": "VariableDeclaration",
                      "scope": 833,
                      "src": "12963:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 818,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12963:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "12933:49:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 825,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 824,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 833,
                      "src": "13028:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 823,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "13028:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13027:6:0"
                },
                "scope": 870,
                "src": "12917:171:0",
                "stateMutability": "nonpayable",
                "superFunction": 463,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 850,
                  "nodeType": "Block",
                  "src": "13233:65:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 846,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 835,
                            "src": "13270:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 847,
                            "name": "_addedValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 837,
                            "src": "13280:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 844,
                            "name": "super",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 952,
                            "src": "13247:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_super$_PausableToken_$870",
                              "typeString": "contract super PausableToken"
                            }
                          },
                          "id": 845,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "increaseApproval",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 521,
                          "src": "13247:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) returns (bool)"
                          }
                        },
                        "id": 848,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13247:45:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 843,
                      "id": 849,
                      "nodeType": "Return",
                      "src": "13240:52:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 851,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 840,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 839,
                      "name": "whenNotPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 733,
                      "src": "13188:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "13188:13:0"
                  }
                ],
                "name": "increaseApproval",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 838,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 835,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 851,
                      "src": "13126:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 834,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "13126:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 837,
                      "name": "_addedValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 851,
                      "src": "13149:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 836,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "13149:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13119:51:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 843,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 842,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 851,
                      "src": "13216:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 841,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "13216:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13215:14:0"
                },
                "scope": 870,
                "src": "13094:204:0",
                "stateMutability": "nonpayable",
                "superFunction": 521,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 868,
                  "nodeType": "Block",
                  "src": "13448:70:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 864,
                            "name": "_spender",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 853,
                            "src": "13485:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 865,
                            "name": "_subtractedValue",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 855,
                            "src": "13495:16:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 862,
                            "name": "super",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 952,
                            "src": "13462:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_super$_PausableToken_$870",
                              "typeString": "contract super PausableToken"
                            }
                          },
                          "id": 863,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "decreaseApproval",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 581,
                          "src": "13462:22:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_nonpayable$_t_address_$_t_uint256_$returns$_t_bool_$",
                            "typeString": "function (address,uint256) returns (bool)"
                          }
                        },
                        "id": 866,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13462:50:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 861,
                      "id": 867,
                      "nodeType": "Return",
                      "src": "13455:57:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 869,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": null,
                    "id": 858,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 857,
                      "name": "whenNotPaused",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 733,
                      "src": "13403:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_modifier$__$",
                        "typeString": "modifier ()"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "13403:13:0"
                  }
                ],
                "name": "decreaseApproval",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 856,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 853,
                      "name": "_spender",
                      "nodeType": "VariableDeclaration",
                      "scope": 869,
                      "src": "13336:16:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 852,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "13336:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 855,
                      "name": "_subtractedValue",
                      "nodeType": "VariableDeclaration",
                      "scope": 869,
                      "src": "13359:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 854,
                        "name": "uint",
                        "nodeType": "ElementaryTypeName",
                        "src": "13359:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13329:56:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 861,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 860,
                      "name": "success",
                      "nodeType": "VariableDeclaration",
                      "scope": 869,
                      "src": "13431:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 859,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "13431:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13430:14:0"
                },
                "scope": 870,
                "src": "13304:214:0",
                "stateMutability": "nonpayable",
                "superFunction": 581,
                "visibility": "public"
              }
            ],
            "scope": 906,
            "src": "12487:1034:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 871,
                  "name": "MintableToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 715,
                  "src": "13543:13:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_MintableToken_$715",
                    "typeString": "contract MintableToken"
                  }
                },
                "id": 872,
                "nodeType": "InheritanceSpecifier",
                "src": "13543:13:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 873,
                  "name": "PausableToken",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 870,
                  "src": "13558:13:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_PausableToken_$870",
                    "typeString": "contract PausableToken"
                  }
                },
                "id": 874,
                "nodeType": "InheritanceSpecifier",
                "src": "13558:13:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 875,
                  "name": "DetailedERC20",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 613,
                  "src": "13573:13:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_DetailedERC20_$613",
                    "typeString": "contract DetailedERC20"
                  }
                },
                "id": 876,
                "nodeType": "InheritanceSpecifier",
                "src": "13573:13:0"
              }
            ],
            "contractDependencies": [
              115,
              31,
              155,
              339,
              582,
              613,
              715,
              772,
              870
            ],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 905,
            "linearizedBaseContracts": [
              905,
              613,
              870,
              772,
              715,
              115,
              582,
              339,
              155,
              31
            ],
            "name": "COT",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "body": {
                  "id": 903,
                  "nodeType": "Block",
                  "src": "13747:155:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 894,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 892,
                          "name": "totalSupply_",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 258,
                          "src": "13793:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 893,
                          "name": "_totalSuply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 884,
                          "src": "13808:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "13793:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 895,
                      "nodeType": "ExpressionStatement",
                      "src": "13793:26:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 901,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 896,
                            "name": "balances",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 256,
                            "src": "13860:8:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 899,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 897,
                              "name": "msg",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 920,
                              "src": "13869:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_magic_message",
                                "typeString": "msg"
                              }
                            },
                            "id": 898,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "sender",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "13869:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "13860:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 900,
                          "name": "_totalSuply",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 884,
                          "src": "13883:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "13860:34:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 902,
                      "nodeType": "ExpressionStatement",
                      "src": "13860:34:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 904,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [
                      {
                        "argumentTypes": null,
                        "id": 887,
                        "name": "_name",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 878,
                        "src": "13699:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 888,
                        "name": "_symbol",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 880,
                        "src": "13706:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_memory_ptr",
                          "typeString": "string memory"
                        }
                      },
                      {
                        "argumentTypes": null,
                        "id": 889,
                        "name": "_decimals",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 882,
                        "src": "13715:9:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      }
                    ],
                    "id": 890,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 886,
                      "name": "DetailedERC20",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 613,
                      "src": "13685:13:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_DetailedERC20_$613_$",
                        "typeString": "type(contract DetailedERC20)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "13685:40:0"
                  }
                ],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 885,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 878,
                      "name": "_name",
                      "nodeType": "VariableDeclaration",
                      "scope": 904,
                      "src": "13608:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 877,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "13608:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 880,
                      "name": "_symbol",
                      "nodeType": "VariableDeclaration",
                      "scope": 904,
                      "src": "13622:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_string_memory_ptr",
                        "typeString": "string"
                      },
                      "typeName": {
                        "id": 879,
                        "name": "string",
                        "nodeType": "ElementaryTypeName",
                        "src": "13622:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_string_storage_ptr",
                          "typeString": "string"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 882,
                      "name": "_decimals",
                      "nodeType": "VariableDeclaration",
                      "scope": 904,
                      "src": "13638:15:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint8",
                        "typeString": "uint8"
                      },
                      "typeName": {
                        "id": 881,
                        "name": "uint8",
                        "nodeType": "ElementaryTypeName",
                        "src": "13638:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 884,
                      "name": "_totalSuply",
                      "nodeType": "VariableDeclaration",
                      "scope": 904,
                      "src": "13655:19:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 883,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13655:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13607:68:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 891,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "13747:0:0"
                },
                "scope": 905,
                "src": "13596:306:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 906,
            "src": "13527:378:0"
          }
        ],
        "src": "71:13834:0"
      },
      "id": 0
    }
  }
}