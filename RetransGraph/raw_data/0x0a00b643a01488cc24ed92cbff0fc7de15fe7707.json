{
  "contracts": {
    "reentrancy.sol": {
      "DolaCore": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH3 0x11 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 MLOAD PUSH1 0x20 DUP1 PUSH3 0x1082 DUP4 CODECOPY DUP2 ADD DUP1 PUSH1 0x40 MSTORE PUSH3 0x33 SWAP2 SWAP1 DUP2 ADD SWAP1 PUSH3 0x335 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x454950373132446F6D61696E2800000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x737472696E67206E616D652C0000000000000000000000000000000000000000 PUSH1 0x2D DUP4 ADD MSTORE PUSH32 0x737472696E672076657273696F6E2C0000000000000000000000000000000000 PUSH1 0x39 DUP4 ADD MSTORE PUSH32 0x6164647265737320766572696679696E67436F6E747261637400000000000000 PUSH1 0x48 DUP4 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x61 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x42 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x62 SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 DUP3 SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x13B JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x11A JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 DUP3 DUP6 ADD DUP6 MSTORE PUSH1 0x9 DUP1 DUP5 MSTORE PUSH32 0x446F6C6120436F72650000000000000000000000000000000000000000000000 SWAP3 DUP5 ADD SWAP3 DUP4 MSTORE SWAP5 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP SWAP1 SWAP3 DUP4 SWAP3 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x1C5 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x1A4 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 DUP3 DUP6 ADD DUP6 MSTORE PUSH1 0x1 DUP1 DUP5 MSTORE PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 SWAP3 DUP5 ADD SWAP3 DUP4 MSTORE SWAP5 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP SWAP1 SWAP3 DUP4 SWAP3 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x24F JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x22E JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 SUB DUP2 KECCAK256 PUSH3 0x28A SWAP8 SWAP7 SWAP6 POP SWAP4 POP ADDRESS SWAP3 ADD SWAP1 POP PUSH3 0x37A JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH3 0x2CA JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH3 0x2A9 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 PUSH1 0x0 SSTORE POP POP PUSH1 0x1 DUP1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB NOT AND PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP4 SWAP1 SWAP4 AND SWAP3 SWAP1 SWAP3 OR SWAP1 SWAP2 SSTORE POP PUSH3 0x3CF JUMP JUMPDEST PUSH1 0x0 PUSH3 0x32E DUP3 MLOAD PUSH3 0x3C0 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x20 DUP3 DUP5 SUB SLT ISZERO PUSH3 0x348 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH3 0x356 DUP5 DUP5 PUSH3 0x320 JUMP JUMPDEST SWAP5 SWAP4 POP POP POP POP JUMP JUMPDEST PUSH3 0x369 DUP2 PUSH3 0x3C0 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH3 0x369 DUP2 PUSH3 0x3CC JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH3 0x38A DUP3 DUP8 PUSH3 0x36F JUMP JUMPDEST PUSH3 0x399 PUSH1 0x20 DUP4 ADD DUP7 PUSH3 0x36F JUMP JUMPDEST PUSH3 0x3A8 PUSH1 0x40 DUP4 ADD DUP6 PUSH3 0x36F JUMP JUMPDEST PUSH3 0x3B7 PUSH1 0x60 DUP4 ADD DUP5 PUSH3 0x35E JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0xCA3 DUP1 PUSH3 0x3DF PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x6C JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0xBDF5300 DUP2 EQ PUSH2 0x71 JUMPI DUP1 PUSH4 0xD755EF7 EQ PUSH2 0x9C JUMPI DUP1 PUSH4 0x2624B2D9 EQ PUSH2 0xBE JUMPI DUP1 PUSH4 0x72FE4CEB EQ PUSH2 0xE0 JUMPI DUP1 PUSH4 0xE306F779 EQ PUSH2 0x100 JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x7D JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x86 PUSH2 0x115 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x93 SWAP2 SWAP1 PUSH2 0xB5F JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xA8 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xBC PUSH2 0xB7 CALLDATASIZE PUSH1 0x4 PUSH2 0xA10 JUMP JUMPDEST PUSH2 0x124 JUMP JUMPDEST STOP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xCA JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x371 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x93 SWAP2 SWAP1 PUSH2 0xB6D JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0xEC JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0xFB CALLDATASIZE PUSH1 0x4 PUSH2 0x9D6 JUMP JUMPDEST PUSH2 0x4A7 JUMP JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x10C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0xD3 PUSH2 0x4C4 JUMP JUMPDEST PUSH1 0x1 SLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND DUP2 JUMP JUMPDEST PUSH1 0xA0 DUP3 ADD MLOAD DUP3 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x60 DUP9 ADD MLOAD SWAP1 SWAP5 AND DUP4 MSTORE SWAP3 SWAP1 MSTORE SWAP1 DUP2 KECCAK256 SLOAD SWAP1 SWAP2 DUP3 SWAP2 GT ISZERO PUSH2 0x186 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17D SWAP1 PUSH2 0xBE9 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 REVERT JUMPDEST PUSH1 0x60 DUP5 ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND CALLER EQ PUSH2 0x1B5 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17D SWAP1 PUSH2 0xBE9 JUMP JUMPDEST PUSH2 0x1BE DUP5 PUSH2 0x4CA JUMP JUMPDEST SWAP2 POP PUSH2 0x1CF DUP3 DUP6 PUSH1 0x0 ADD MLOAD DUP6 PUSH2 0x78E JUMP JUMPDEST ISZERO ISZERO PUSH2 0x1F0 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17D SWAP1 PUSH2 0xBD9 JUMP JUMPDEST POP PUSH1 0x1 SLOAD PUSH32 0x23B872DD00000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND PUSH1 0x60 PUSH1 0x4 PUSH1 0x24 CALLDATACOPY PUSH1 0x20 PUSH1 0x0 PUSH1 0x64 PUSH1 0x20 PUSH1 0x0 DUP6 GAS CALL PUSH1 0x0 DUP1 MLOAD GT PUSH1 0x20 RETURNDATASIZE EQ AND RETURNDATASIZE ISZERO OR DUP2 AND SWAP1 POP DUP1 ISZERO ISZERO PUSH2 0x2A7 JUMPI PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST PUSH1 0x40 PUSH1 0x64 PUSH1 0x44 CALLDATACOPY PUSH1 0x20 PUSH1 0x0 PUSH1 0x64 PUSH1 0x20 PUSH1 0x0 DUP7 GAS CALL SWAP1 POP PUSH1 0x0 DUP1 MLOAD GT PUSH1 0x20 RETURNDATASIZE EQ AND RETURNDATASIZE ISZERO OR DUP2 AND SWAP1 POP DUP1 ISZERO ISZERO PUSH2 0x32F JUMPI PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL PUSH1 0x0 MSTORE PUSH29 0x2000000000000000000000000000000000000000000000000000000000 PUSH1 0x20 MSTORE PUSH29 0xF5452414E534645525F4641494C454400000000000000000000000000 PUSH1 0x40 MSTORE PUSH1 0x0 PUSH1 0x60 MSTORE PUSH1 0x64 PUSH1 0x0 REVERT JUMPDEST POP POP POP POP PUSH1 0xA0 DUP2 ADD MLOAD DUP2 MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP1 DUP2 AND PUSH1 0x0 SWAP1 DUP2 MSTORE PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x40 DUP1 DUP4 KECCAK256 PUSH1 0x60 SWAP1 SWAP7 ADD MLOAD SWAP1 SWAP4 AND DUP3 MSTORE SWAP4 SWAP1 SWAP4 MSTORE SWAP1 SWAP2 KECCAK256 PUSH1 0x1 SWAP1 SWAP2 ADD SWAP1 SSTORE JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x454950373132446F6D61696E2800000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x737472696E67206E616D652C0000000000000000000000000000000000000000 PUSH1 0x2D DUP4 ADD MSTORE PUSH32 0x737472696E672076657273696F6E2C0000000000000000000000000000000000 PUSH1 0x39 DUP4 ADD MSTORE PUSH32 0x6164647265737320766572696679696E67436F6E747261637400000000000000 PUSH1 0x48 DUP4 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x61 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x42 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x62 SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 DUP3 SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x477 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x458 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 JUMP JUMPDEST PUSH1 0x2 PUSH1 0x20 SWAP1 DUP2 MSTORE PUSH1 0x0 SWAP3 DUP4 MSTORE PUSH1 0x40 DUP1 DUP5 KECCAK256 SWAP1 SWAP2 MSTORE SWAP1 DUP3 MSTORE SWAP1 KECCAK256 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x5472616E73666572526571756573742800000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x616464726573732073656E646572416464726573732C00000000000000000000 PUSH1 0x30 DUP4 ADD MSTORE PUSH32 0x61646472657373207265636569766572416464726573732C0000000000000000 PUSH1 0x46 DUP4 ADD MSTORE PUSH32 0x75696E743235362076616C75652C000000000000000000000000000000000000 PUSH1 0x5E DUP4 ADD MSTORE PUSH32 0x616464726573732072656C61796572416464726573732C000000000000000000 PUSH1 0x6C DUP4 ADD MSTORE PUSH32 0x75696E743235362072656C617965724665652C00000000000000000000000000 PUSH1 0x83 DUP4 ADD MSTORE PUSH32 0x75696E743235362073616C742C00000000000000000000000000000000000000 PUSH1 0x96 DUP4 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0xA3 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x84 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0xA4 SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD PUSH1 0x0 SWAP4 DUP5 SWAP4 DUP5 SWAP4 SWAP1 SWAP3 DUP3 SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x648 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x629 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 PUSH1 0x1F NOT DUP11 ADD DUP1 MLOAD DUP3 DUP3 MSTORE PUSH1 0xE0 DUP3 KECCAK256 SWAP2 MSTORE DUP5 MLOAD DUP1 DUP7 ADD DUP7 MSTORE PUSH1 0x2 DUP1 DUP3 MSTORE PUSH32 0x1901000000000000000000000000000000000000000000000000000000000000 DUP3 DUP7 ADD SWAP1 DUP2 MSTORE PUSH1 0x0 SLOAD SWAP8 MLOAD SWAP5 SWAP12 POP SWAP3 SWAP10 POP SWAP1 SWAP8 POP SWAP5 SWAP6 POP DUP8 SWAP5 SWAP2 SWAP1 SWAP3 ADD SWAP3 POP DUP3 SWAP2 SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x6F2 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x6D3 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE SWAP3 ADD SWAP5 DUP6 MSTORE POP DUP4 DUP2 ADD SWAP3 SWAP1 SWAP3 MSTORE POP PUSH1 0x40 DUP1 MLOAD DUP1 DUP5 SUB DUP4 ADD DUP2 MSTORE SWAP3 DUP2 ADD SWAP1 DUP2 SWAP1 MSTORE DUP3 MLOAD SWAP3 SWAP4 POP SWAP2 DUP3 SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x75A JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x73B JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 SWAP8 SWAP7 POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x0 DUP1 PUSH1 0x0 DUP6 MLOAD PUSH1 0x41 EQ ISZERO ISZERO PUSH2 0x7BC JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17D SWAP1 PUSH2 0xBB9 JUMP JUMPDEST DUP6 PUSH1 0x40 DUP2 MLOAD DUP2 LT ISZERO ISZERO PUSH2 0x7CB JUMPI INVALID JUMPDEST ADD PUSH1 0x20 ADD MLOAD PUSH32 0x100000000000000000000000000000000000000000000000000000000000000 SWAP1 DUP2 SWAP1 DIV DUP2 MUL DIV SWAP4 POP PUSH2 0x80B DUP7 PUSH1 0x0 PUSH4 0xFFFFFFFF PUSH2 0x88E AND JUMP JUMPDEST SWAP3 POP PUSH2 0x81E DUP7 PUSH1 0x20 PUSH4 0xFFFFFFFF PUSH2 0x88E AND JUMP JUMPDEST SWAP2 POP PUSH1 0x1 DUP9 DUP6 DUP6 DUP6 PUSH1 0x40 MLOAD PUSH1 0x0 DUP2 MSTORE PUSH1 0x20 ADD PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD PUSH2 0x843 SWAP5 SWAP4 SWAP3 SWAP2 SWAP1 PUSH2 0xB7B JUMP JUMPDEST PUSH1 0x20 PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 SUB SWAP1 DUP1 DUP5 SUB SWAP1 PUSH1 0x0 DUP7 GAS CALL ISZERO DUP1 ISZERO PUSH2 0x867 JUMPI RETURNDATASIZE PUSH1 0x0 DUP1 RETURNDATACOPY RETURNDATASIZE PUSH1 0x0 REVERT JUMPDEST POP POP PUSH1 0x40 MLOAD PUSH1 0x1F NOT ADD MLOAD PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB SWAP9 DUP10 AND SWAP9 AND SWAP8 SWAP1 SWAP8 EQ SWAP9 SWAP8 POP POP POP POP POP POP POP POP JUMP JUMPDEST PUSH1 0x0 DUP2 PUSH1 0x20 ADD DUP4 MLOAD LT ISZERO ISZERO ISZERO PUSH2 0x8B9 JUMPI PUSH1 0x40 MLOAD PUSH1 0xE5 PUSH1 0x2 EXP PUSH3 0x461BCD MUL DUP2 MSTORE PUSH1 0x4 ADD PUSH2 0x17D SWAP1 PUSH2 0xBC9 JUMP JUMPDEST POP PUSH1 0x20 DUP2 DUP4 ADD DUP2 ADD MLOAD SWAP2 ADD SWAP1 JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D8 DUP3 CALLDATALOAD PUSH2 0xC48 JUMP JUMPDEST SWAP4 SWAP3 POP POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0x1F DUP3 ADD DUP4 SGT PUSH2 0x8F0 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST DUP2 CALLDATALOAD PUSH2 0x903 PUSH2 0x8FE DUP3 PUSH2 0xC20 JUMP JUMPDEST PUSH2 0xBF9 JUMP JUMPDEST SWAP2 POP DUP1 DUP3 MSTORE PUSH1 0x20 DUP4 ADD PUSH1 0x20 DUP4 ADD DUP6 DUP4 DUP4 ADD GT ISZERO PUSH2 0x91F JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x92A DUP4 DUP3 DUP5 PUSH2 0xC5D JUMP JUMPDEST POP POP POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH1 0xC0 DUP3 DUP5 SUB SLT ISZERO PUSH2 0x945 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0x94F PUSH1 0xC0 PUSH2 0xBF9 JUMP JUMPDEST SWAP1 POP PUSH1 0x0 PUSH2 0x95D DUP5 DUP5 PUSH2 0x8CC JUMP JUMPDEST DUP3 MSTORE POP PUSH1 0x20 PUSH2 0x96E DUP5 DUP5 DUP4 ADD PUSH2 0x8CC JUMP JUMPDEST PUSH1 0x20 DUP4 ADD MSTORE POP PUSH1 0x40 PUSH2 0x982 DUP5 DUP3 DUP6 ADD PUSH2 0x9CA JUMP JUMPDEST PUSH1 0x40 DUP4 ADD MSTORE POP PUSH1 0x60 PUSH2 0x996 DUP5 DUP3 DUP6 ADD PUSH2 0x8CC JUMP JUMPDEST PUSH1 0x60 DUP4 ADD MSTORE POP PUSH1 0x80 PUSH2 0x9AA DUP5 DUP3 DUP6 ADD PUSH2 0x9CA JUMP JUMPDEST PUSH1 0x80 DUP4 ADD MSTORE POP PUSH1 0xA0 PUSH2 0x9BE DUP5 DUP3 DUP6 ADD PUSH2 0x9CA JUMP JUMPDEST PUSH1 0xA0 DUP4 ADD MSTORE POP SWAP3 SWAP2 POP POP JUMP JUMPDEST PUSH1 0x0 PUSH2 0x8D8 DUP3 CALLDATALOAD PUSH2 0xC54 JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0x40 DUP4 DUP6 SUB SLT ISZERO PUSH2 0x9E9 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0x9F5 DUP6 DUP6 PUSH2 0x8CC JUMP JUMPDEST SWAP3 POP POP PUSH1 0x20 PUSH2 0xA06 DUP6 DUP3 DUP7 ADD PUSH2 0x8CC JUMP JUMPDEST SWAP2 POP POP SWAP3 POP SWAP3 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 DUP1 PUSH1 0xE0 DUP4 DUP6 SUB SLT ISZERO PUSH2 0xA23 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x0 PUSH2 0xA2F DUP6 DUP6 PUSH2 0x933 JUMP JUMPDEST SWAP3 POP POP PUSH1 0xC0 DUP4 ADD CALLDATALOAD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT ISZERO PUSH2 0xA4C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH2 0xA06 DUP6 DUP3 DUP7 ADD PUSH2 0x8DF JUMP JUMPDEST PUSH2 0xA61 DUP2 PUSH2 0xC48 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0xA61 DUP2 PUSH2 0xC54 JUMP JUMPDEST PUSH1 0x12 DUP2 MSTORE PUSH32 0x4C454E4754485F36355F52455155495245440000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0x26 DUP2 MSTORE PUSH32 0x475245415445525F4F525F455155414C5F544F5F33325F4C454E4754485F5245 PUSH1 0x20 DUP3 ADD MSTORE PUSH32 0x5155495245440000000000000000000000000000000000000000000000000000 PUSH1 0x40 DUP3 ADD MSTORE PUSH1 0x60 ADD SWAP1 JUMP JUMPDEST PUSH1 0x19 DUP2 MSTORE PUSH32 0x494E56414C49445F524551554553545F5349474E415455524500000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH1 0xF DUP2 MSTORE PUSH32 0x524551554553545F494E56414C49440000000000000000000000000000000000 PUSH1 0x20 DUP3 ADD MSTORE PUSH1 0x40 ADD SWAP1 JUMP JUMPDEST PUSH2 0xA61 DUP2 PUSH2 0xC57 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x8C6 DUP3 DUP5 PUSH2 0xA58 JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x8C6 DUP3 DUP5 PUSH2 0xA67 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0xB89 DUP3 DUP8 PUSH2 0xA67 JUMP JUMPDEST PUSH2 0xB96 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0xB56 JUMP JUMPDEST PUSH2 0xBA3 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0xA67 JUMP JUMPDEST PUSH2 0xBB0 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0xA67 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8C6 DUP2 PUSH2 0xA70 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8C6 DUP2 PUSH2 0xAA0 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8C6 DUP2 PUSH2 0xAF6 JUMP JUMPDEST PUSH1 0x20 DUP1 DUP3 MSTORE DUP2 ADD PUSH2 0x8C6 DUP2 PUSH2 0xB26 JUMP JUMPDEST PUSH1 0x40 MLOAD DUP2 DUP2 ADD PUSH8 0xFFFFFFFFFFFFFFFF DUP2 GT DUP3 DUP3 LT OR ISZERO PUSH2 0xC18 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST PUSH1 0x40 MSTORE SWAP2 SWAP1 POP JUMP JUMPDEST PUSH1 0x0 PUSH8 0xFFFFFFFFFFFFFFFF DUP3 GT ISZERO PUSH2 0xC37 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x20 PUSH1 0x1F SWAP2 SWAP1 SWAP2 ADD PUSH1 0x1F NOT AND ADD SWAP1 JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH1 0xFF AND SWAP1 JUMP JUMPDEST DUP3 DUP2 DUP4 CALLDATACOPY POP PUSH1 0x0 SWAP2 ADD MSTORE JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 LOG0 PUSH21 0xD79737F4EEB026666990A96225C4827976E4C62219 GASLIMIT 0xe1 EQ DUP16 0xd6 0xe1 0xba 0xf7 CALLVALUE PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
            "sourceMap": "2860:3145:0:-;;;3147:106;8:9:-1;5:2;;;30:1;27;20:12;5:2;3147:106:0;;;;;;;;;;;;;;;;;;;;;;1042:132;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1042:132:0;;;;;;;;1032:143;;1042:132;;;;;1032:143;;;;1042:132;1032:143;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1032:143:0;;;;;;;;;;;;1902:18;;;;;;;;;;;;;;;;1886:36;;1032:143;;-1:-1:-1;1032:143:0;;-1:-1:-1;1886:36:0;;;;-1:-1:-1;1902:18:0;1886:36;1902:18;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1886:36:0;;;;;;;;;;;;1949:21;;;;;274:1:-1;1949:21:0;;;;;;;;;;1933:39;;1886:36;;-1:-1:-1;1886:36:0;;-1:-1:-1;1933:39:0;;;;-1:-1:-1;274:1;1933:39:0;1949:21;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1933:39:0;;;;;;;;;;;1819:186;;;;-1:-1:-1;1933:39:0;-1:-1:-1;1991:4:0;;1819:186;;-1:-1:-1;1819:186:0;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1819:186:0;;;1809:197;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;1809:197:0;;;;;;;;;;-1:-1:-1;1788:218:0;-1:-1:-1;;274:1;3218:29:0;;-1:-1:-1;;;;;;3218:29:0;-1:-1:-1;;;;;3218:29:0;;;;;;;;;;;-1:-1:-1;2860:3145:0;;5:122:-1;;83:39;114:6;108:13;83:39;;;74:48;68:59;-1:-1;;;68:59;134:263;;249:2;237:9;228:7;224:23;220:32;217:2;;;265:1;262;255:12;217:2;300:1;317:64;373:7;353:9;317:64;;;307:74;211:186;-1:-1;;;;211:186;404:110;477:31;502:5;477:31;;;472:3;465:44;459:55;;;521:110;594:31;619:5;594:31;;638:497;830:3;815:19;;845:61;819:9;879:6;845:61;;;917:62;975:2;964:9;960:18;951:6;917:62;;;990;1048:2;1037:9;1033:18;1024:6;990:62;;;1063;1121:2;1110:9;1106:18;1097:6;1063:62;;;801:334;;;;;;;;1142:128;-1:-1;;;;;1211:54;;1194:76;1277:79;1346:5;1329:27;;2860:3145:0;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"TOKEN_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"components\":[{\"name\":\"senderAddress\",\"type\":\"address\"},{\"name\":\"receiverAddress\",\"type\":\"address\"},{\"name\":\"value\",\"type\":\"uint256\"},{\"name\":\"relayerAddress\",\"type\":\"address\"},{\"name\":\"relayerFee\",\"type\":\"uint256\"},{\"name\":\"salt\",\"type\":\"uint256\"}],\"name\":\"request\",\"type\":\"tuple\"},{\"name\":\"signature\",\"type\":\"bytes\"}],\"name\":\"executeTransfer\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"address\"}],\"name\":\"requestEpoch\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EIP712_DOMAIN_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"name\":\"_tokenAddress\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"to\",\"type\":\"address\"}],\"name\":\"TransferRequestFilled\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"DolaCore\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-12-12\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.25;\\n\\npragma experimental ABIEncoderV2;\\n\\n\\n\\ncontract LibSignatureValidation {\\n\\n\\n\\n  using LibBytes for bytes;\\n\\n\\n\\n  function isValidSignature(bytes32 hash, address signerAddress, bytes memory signature) internal pure returns (bool) {\\n\\n    require(signature.length == 65, \\\"LENGTH_65_REQUIRED\\\");\\n\\n    uint8 v = uint8(signature[64]);\\n\\n    bytes32 r = signature.readBytes32(0);\\n\\n    bytes32 s = signature.readBytes32(32);\\n\\n    address recovered = ecrecover(hash, v, r, s);\\n\\n    return signerAddress == recovered;\\n\\n  }\\n\\n}\\n\\n\\n\\ncontract LibTransferRequest {\\n\\n\\n\\n  // EIP191 header for EIP712 prefix\\n\\n  string constant internal EIP191_HEADER = \\\"\\\\x19\\\\x01\\\";\\n\\n  // EIP712 Domain Name value\\n\\n  string constant internal EIP712_DOMAIN_NAME = \\\"Dola Core\\\";\\n\\n  // EIP712 Domain Version value\\n\\n  string constant internal EIP712_DOMAIN_VERSION = \\\"1\\\";\\n\\n  // Hash of the EIP712 Domain Separator Schema\\n\\n  bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\\n\\n    \\\"EIP712Domain(\\\",\\n\\n    \\\"string name,\\\",\\n\\n    \\\"string version,\\\",\\n\\n    \\\"address verifyingContract\\\",\\n\\n    \\\")\\\"\\n\\n  ));\\n\\n\\n\\n  // Hash of the EIP712 Domain Separator data\\n\\n  bytes32 public EIP712_DOMAIN_HASH;\\n\\n\\n\\n  bytes32 constant internal EIP712_TRANSFER_REQUEST_TYPE_HASH = keccak256(abi.encodePacked(\\n\\n    \\\"TransferRequest(\\\",\\n\\n    \\\"address senderAddress,\\\",\\n\\n    \\\"address receiverAddress,\\\",\\n\\n    \\\"uint256 value,\\\",\\n\\n    \\\"address relayerAddress,\\\",\\n\\n    \\\"uint256 relayerFee,\\\",\\n\\n    \\\"uint256 salt,\\\",\\n\\n    \\\")\\\"\\n\\n  ));\\n\\n\\n\\n  struct TransferRequest {\\n\\n    address senderAddress;\\n\\n    address receiverAddress;\\n\\n    uint256 value;\\n\\n    address relayerAddress;\\n\\n    uint256 relayerFee;\\n\\n    uint256 salt;\\n\\n  }\\n\\n\\n\\n  constructor() public {\\n\\n    EIP712_DOMAIN_HASH = keccak256(abi.encode(\\n\\n        EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n\\n        keccak256(bytes(EIP712_DOMAIN_NAME)),\\n\\n        keccak256(bytes(EIP712_DOMAIN_VERSION)),\\n\\n        address(this)\\n\\n      ));\\n\\n  }\\n\\n\\n\\n  function hashTransferRequest(TransferRequest memory request) internal view returns (bytes32) {\\n\\n    bytes32 typeHash = EIP712_TRANSFER_REQUEST_TYPE_HASH;\\n\\n    bytes32 hashStruct;\\n\\n\\n\\n    // assembly shorthand for:\\n\\n    // bytes32 hashStruct = keccak256(abi.encode(\\n\\n    //    EIP712_TRANSFER_REQUEST_TYPE_HASH,\\n\\n    //    request.senderAddress,\\n\\n    //    request.receiverAddress,\\n\\n    //    request.value,\\n\\n    //    request.relayerAddress,\\n\\n    //    request.relayerFee,\\n\\n    //    request.salt));\\n\\n    assembly {\\n\\n      // Back up select memory\\n\\n      let temp1 := mload(sub(request, 32))\\n\\n\\n\\n      mstore(sub(request, 32), typeHash)\\n\\n      hashStruct := keccak256(sub(request, 32), 224)\\n\\n\\n\\n      mstore(sub(request, 32), temp1)\\n\\n    }\\n\\n    return keccak256(abi.encodePacked(EIP191_HEADER, EIP712_DOMAIN_HASH, hashStruct));\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\ncontract DolaCore is LibTransferRequest, LibSignatureValidation {\\n\\n\\n\\n  using LibBytes for bytes;\\n\\n\\n\\n  address public TOKEN_ADDRESS;\\n\\n  mapping (address => mapping (address => uint256)) public requestEpoch;\\n\\n\\n\\n  event TransferRequestFilled(address indexed from, address indexed to);\\n\\n\\n\\n  constructor (address _tokenAddress) public LibTransferRequest() {\\n\\n    TOKEN_ADDRESS = _tokenAddress;\\n\\n  }\\n\\n\\n\\n  function executeTransfer(TransferRequest memory request, bytes memory signature) public {\\n\\n    // make sure the request hasn't been sent already\\n\\n    require(requestEpoch[request.senderAddress][request.relayerAddress] <= request.salt, \\\"REQUEST_INVALID\\\");\\n\\n    // Validate the sender is allowed to execute this transfer\\n\\n    require(request.relayerAddress == msg.sender, \\\"REQUEST_INVALID\\\");\\n\\n    // Validate the sender's signature\\n\\n    bytes32 requestHash = hashTransferRequest(request);\\n\\n    require(isValidSignature(requestHash, request.senderAddress, signature), \\\"INVALID_REQUEST_SIGNATURE\\\");\\n\\n\\n\\n    address tokenAddress = TOKEN_ADDRESS;\\n\\n    assembly {\\n\\n      mstore(32, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n\\n      calldatacopy(36, 4, 96)\\n\\n      let success := call(\\n\\n        gas,            // forward all gas\\n\\n        tokenAddress,   // call address of token contract\\n\\n        0,              // don't send any ETH\\n\\n        32,              // pointer to start of input\\n\\n        100,            // length of input\\n\\n        0,            // write output to far position\\n\\n        32              // output size should be 32 bytes\\n\\n      )\\n\\n      success := and(success, or(\\n\\n          iszero(returndatasize),\\n\\n          and(\\n\\n            eq(returndatasize, 32),\\n\\n            gt(mload(0), 0)\\n\\n          )\\n\\n        ))\\n\\n      if iszero(success) {\\n\\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\\n\\n        mstore(96, 0)\\n\\n        revert(0, 100)\\n\\n      }\\n\\n      calldatacopy(68, 100, 64)\\n\\n      success := call(\\n\\n        gas,            // forward all gas\\n\\n        tokenAddress,   // call address of token contract\\n\\n        0,              // don't send any ETH\\n\\n        32,              // pointer to start of input\\n\\n        100,            // length of input\\n\\n        0,            // write output over input\\n\\n        32              // output size should be 32 bytes\\n\\n      )\\n\\n      success := and(success, or(\\n\\n          iszero(returndatasize),\\n\\n          and(\\n\\n            eq(returndatasize, 32),\\n\\n            gt(mload(0), 0)\\n\\n          )\\n\\n        ))\\n\\n      if iszero(success) {\\n\\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\\n\\n        mstore(96, 0)\\n\\n        revert(0, 100)\\n\\n      }\\n\\n    }\\n\\n\\n\\n    requestEpoch[request.senderAddress][request.relayerAddress] = request.salt + 1;\\n\\n  }\\n\\n}\\n\\n\\n\\nlibrary LibBytes {\\n\\n\\n\\n    using LibBytes for bytes;\\n\\n\\n\\n    /// @dev Gets the memory address for a byte array.\\n\\n    /// @param input Byte array to lookup.\\n\\n    /// @return memoryAddress Memory address of byte array. This\\n\\n    ///         points to the header of the byte array which contains\\n\\n    ///         the length.\\n\\n    function rawAddress(bytes memory input)\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 memoryAddress)\\n\\n    {\\n\\n        assembly {\\n\\n            memoryAddress := input\\n\\n        }\\n\\n        return memoryAddress;\\n\\n    }\\n\\n\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n\\n    /// @param input Byte array to lookup.\\n\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n\\n    function contentAddress(bytes memory input)\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 memoryAddress)\\n\\n    {\\n\\n        assembly {\\n\\n            memoryAddress := add(input, 32)\\n\\n        }\\n\\n        return memoryAddress;\\n\\n    }\\n\\n\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n\\n    /// @param dest memory address to copy bytes to.\\n\\n    /// @param source memory address to copy bytes from.\\n\\n    /// @param length number of bytes to copy.\\n\\n    function memCopy(\\n\\n        uint256 dest,\\n\\n        uint256 source,\\n\\n        uint256 length\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        if (length < 32) {\\n\\n            // Handle a partial word by reading destination and masking\\n\\n            // off the bits we are interested in.\\n\\n            // This correctly handles overlap, zero lengths and source == dest\\n\\n            assembly {\\n\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n\\n                let s := and(mload(source), not(mask))\\n\\n                let d := and(mload(dest), mask)\\n\\n                mstore(dest, or(s, d))\\n\\n            }\\n\\n        } else {\\n\\n            // Skip the O(length) loop when source == dest.\\n\\n            if (source == dest) {\\n\\n                return;\\n\\n            }\\n\\n\\n\\n            // For large copies we copy whole words at a time. The final\\n\\n            // word is aligned to the end of the range (instead of after the\\n\\n            // previous) to handle partial words. So a copy will look like this:\\n\\n            //\\n\\n            //  ####\\n\\n            //      ####\\n\\n            //          ####\\n\\n            //            ####\\n\\n            //\\n\\n            // We handle overlap in the source and destination range by\\n\\n            // changing the copying direction. This prevents us from\\n\\n            // overwriting parts of source that we still need to copy.\\n\\n            //\\n\\n            // This correctly handles source == dest\\n\\n            //\\n\\n            if (source > dest) {\\n\\n                assembly {\\n\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n\\n                    // is easier to compare with in the loop, and these\\n\\n                    // are also the addresses we need for copying the\\n\\n                    // last bytes.\\n\\n                    length := sub(length, 32)\\n\\n                    let sEnd := add(source, length)\\n\\n                    let dEnd := add(dest, length)\\n\\n\\n\\n                    // Remember the last 32 bytes of source\\n\\n                    // This needs to be done here and not after the loop\\n\\n                    // because we may have overwritten the last bytes in\\n\\n                    // source already due to overlap.\\n\\n                    let last := mload(sEnd)\\n\\n\\n\\n                    // Copy whole words front to back\\n\\n                    // Note: the first check is always true,\\n\\n                    // this could have been a do-while loop.\\n\\n                    // solhint-disable-next-line no-empty-blocks\\n\\n                    for {} lt(source, sEnd) {} {\\n\\n                        mstore(dest, mload(source))\\n\\n                        source := add(source, 32)\\n\\n                        dest := add(dest, 32)\\n\\n                    }\\n\\n\\n\\n                    // Write the last 32 bytes\\n\\n                    mstore(dEnd, last)\\n\\n                }\\n\\n            } else {\\n\\n                assembly {\\n\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n\\n                    // are the starting points when copying a word at the end.\\n\\n                    length := sub(length, 32)\\n\\n                    let sEnd := add(source, length)\\n\\n                    let dEnd := add(dest, length)\\n\\n\\n\\n                    // Remember the first 32 bytes of source\\n\\n                    // This needs to be done here and not after the loop\\n\\n                    // because we may have overwritten the first bytes in\\n\\n                    // source already due to overlap.\\n\\n                    let first := mload(source)\\n\\n\\n\\n                    // Copy whole words back to front\\n\\n                    // We use a signed comparisson here to allow dEnd to become\\n\\n                    // negative (happens when source and dest < 32). Valid\\n\\n                    // addresses in local memory will never be larger than\\n\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n\\n                    // Note: the first check is always true,\\n\\n                    // this could have been a do-while loop.\\n\\n                    // solhint-disable-next-line no-empty-blocks\\n\\n                    for {} slt(dest, dEnd) {} {\\n\\n                        mstore(dEnd, mload(sEnd))\\n\\n                        sEnd := sub(sEnd, 32)\\n\\n                        dEnd := sub(dEnd, 32)\\n\\n                    }\\n\\n\\n\\n                    // Write the first 32 bytes\\n\\n                    mstore(dest, first)\\n\\n                }\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Returns a slices from a byte array.\\n\\n    /// @param b The byte array to take a slice from.\\n\\n    /// @param from The starting index for the slice (inclusive).\\n\\n    /// @param to The final index for the slice (exclusive).\\n\\n    /// @return result The slice containing bytes at indices [from, to)\\n\\n    function slice(\\n\\n        bytes memory b,\\n\\n        uint256 from,\\n\\n        uint256 to\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        require(\\n\\n            from <= to,\\n\\n            \\\"FROM_LESS_THAN_TO_REQUIRED\\\"\\n\\n        );\\n\\n        require(\\n\\n            to < b.length,\\n\\n            \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Create a new bytes structure and copy contents\\n\\n        result = new bytes(to - from);\\n\\n        memCopy(\\n\\n            result.contentAddress(),\\n\\n            b.contentAddress() + from,\\n\\n            result.length);\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n\\n    /// @param from The starting index for the slice (inclusive).\\n\\n    /// @param to The final index for the slice (exclusive).\\n\\n    /// @return result The slice containing bytes at indices [from, to)\\n\\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\\n\\n    function sliceDestructive(\\n\\n        bytes memory b,\\n\\n        uint256 from,\\n\\n        uint256 to\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        require(\\n\\n            from <= to,\\n\\n            \\\"FROM_LESS_THAN_TO_REQUIRED\\\"\\n\\n        );\\n\\n        require(\\n\\n            to < b.length,\\n\\n            \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n\\n        assembly {\\n\\n            result := add(b, from)\\n\\n            mstore(result, sub(to, from))\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n\\n    /// @param b Byte array that will be modified.\\n\\n    /// @return The byte that was popped off.\\n\\n    function popLastByte(bytes memory b)\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes1 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length > 0,\\n\\n            \\\"GREATER_THAN_ZERO_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Store last byte.\\n\\n        result = b[b.length - 1];\\n\\n\\n\\n        assembly {\\n\\n            // Decrement length of byte array.\\n\\n            let newLen := sub(mload(b), 1)\\n\\n            mstore(b, newLen)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\\n\\n    /// @param b Byte array that will be modified.\\n\\n    /// @return The 20 byte address that was popped off.\\n\\n    function popLast20Bytes(bytes memory b)\\n\\n        internal\\n\\n        pure\\n\\n        returns (address result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= 20,\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Store last 20 bytes.\\n\\n        result = readAddress(b, b.length - 20);\\n\\n\\n\\n        assembly {\\n\\n            // Subtract 20 from byte array length.\\n\\n            let newLen := sub(mload(b), 20)\\n\\n            mstore(b, newLen)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Tests equality of two byte arrays.\\n\\n    /// @param lhs First byte array to compare.\\n\\n    /// @param rhs Second byte array to compare.\\n\\n    /// @return True if arrays are the same. False otherwise.\\n\\n    function equals(\\n\\n        bytes memory lhs,\\n\\n        bytes memory rhs\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bool equal)\\n\\n    {\\n\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n\\n        // We early exit on unequal lengths, but keccak would also correctly\\n\\n        // handle this.\\n\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n\\n    }\\n\\n\\n\\n    /// @dev Reads an address from a position in a byte array.\\n\\n    /// @param b Byte array containing an address.\\n\\n    /// @param index Index in byte array of address.\\n\\n    /// @return address from byte array.\\n\\n    function readAddress(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (address result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 20,  // 20 is length of address\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Add offset to index:\\n\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n\\n        index += 20;\\n\\n\\n\\n        // Read address from array memory\\n\\n        assembly {\\n\\n            // 1. Add index to address of bytes array\\n\\n            // 2. Load 32-byte word from memory\\n\\n            // 3. Apply 20-byte mask to obtain address\\n\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert address into.\\n\\n    /// @param index Index in byte array of address.\\n\\n    /// @param input Address to put into byte array.\\n\\n    function writeAddress(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        address input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 20,  // 20 is length of address\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Add offset to index:\\n\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n\\n        index += 20;\\n\\n\\n\\n        // Store address into array memory\\n\\n        assembly {\\n\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n\\n\\n            // 1. Add index to address of bytes array\\n\\n            // 2. Load 32-byte word from memory\\n\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n\\n            let neighbors := and(\\n\\n                mload(add(b, index)),\\n\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n\\n            )\\n\\n\\n\\n            // Make sure input address is clean.\\n\\n            // (Solidity does not guarantee this)\\n\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n\\n\\n            // Store the neighbors and address into memory\\n\\n            mstore(add(b, index), xor(input, neighbors))\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a bytes32 value.\\n\\n    /// @param index Index in byte array of bytes32 value.\\n\\n    /// @return bytes32 value from byte array.\\n\\n    function readBytes32(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes32 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 32,\\n\\n            \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n\\n        index += 32;\\n\\n\\n\\n        // Read the bytes32 from array memory\\n\\n        assembly {\\n\\n            result := mload(add(b, index))\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input bytes32 to put into byte array.\\n\\n    function writeBytes32(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        bytes32 input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 32,\\n\\n            \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n\\n        index += 32;\\n\\n\\n\\n        // Read the bytes32 from array memory\\n\\n        assembly {\\n\\n            mstore(add(b, index), input)\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a uint256 value.\\n\\n    /// @param index Index in byte array of uint256 value.\\n\\n    /// @return uint256 value from byte array.\\n\\n    function readUint256(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 result)\\n\\n    {\\n\\n        return uint256(readBytes32(b, index));\\n\\n    }\\n\\n\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input uint256 to put into byte array.\\n\\n    function writeUint256(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        uint256 input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        writeBytes32(b, index, bytes32(input));\\n\\n    }\\n\\n\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a bytes4 value.\\n\\n    /// @param index Index in byte array of bytes4 value.\\n\\n    /// @return bytes4 value from byte array.\\n\\n    function readBytes4(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes4 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 4,\\n\\n            \\\"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n        assembly {\\n\\n            result := mload(add(b, 32))\\n\\n            // Solidity does not require us to clean the trailing bytes.\\n\\n            // We do it anyway\\n\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Reads nested bytes from a specific position.\\n\\n    /// @dev NOTE: the returned value overlaps with the input value.\\n\\n    ///            Both should be treated as immutable.\\n\\n    /// @param b Byte array containing nested bytes.\\n\\n    /// @param index Index of nested bytes.\\n\\n    /// @return result Nested bytes.\\n\\n    function readBytesWithLength(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        // Read length of nested bytes\\n\\n        uint256 nestedBytesLength = readUint256(b, index);\\n\\n        index += 32;\\n\\n\\n\\n        // Assert length of <b> is valid, given\\n\\n        // length of nested bytes\\n\\n        require(\\n\\n            b.length >= index + nestedBytesLength,\\n\\n            \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Return a pointer to the byte array as it exists inside `b`\\n\\n        assembly {\\n\\n            result := add(b, index)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Inserts bytes at a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input bytes to insert.\\n\\n    function writeBytesWithLength(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        bytes memory input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        // Assert length of <b> is valid, given\\n\\n        // length of input\\n\\n        require(\\n\\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\\n\\n            \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Copy <input> into <b>\\n\\n        memCopy(\\n\\n            b.contentAddress() + index,\\n\\n            input.rawAddress(), // includes length of <input>\\n\\n            input.length + 32   // +32 bytes to store <input> length\\n\\n        );\\n\\n    }\\n\\n\\n\\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\\n\\n    /// @param dest Byte array that will be overwritten with source bytes.\\n\\n    /// @param source Byte array to copy onto dest bytes.\\n\\n    function deepCopyBytes(\\n\\n        bytes memory dest,\\n\\n        bytes memory source\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        uint256 sourceLen = source.length;\\n\\n        // Dest length must be >= source length, or some bytes would not be copied.\\n\\n        require(\\n\\n            dest.length >= sourceLen,\\n\\n            \\\"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n        memCopy(\\n\\n            dest.contentAddress(),\\n\\n            source.contentAddress(),\\n\\n            sourceLen\\n\\n        );\\n\\n    }\\n\\n}\",\"keccak256\":\"0x60c88337663b53dfb75dc43a53ed27d5ec2a198489c19caf51be647f0489acf0\"}},\"version\":1}"
      },
      "LibBytes": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "605a602c600b82828239805160001a60731460008114601c57601e565bfe5b5030600052607381538281f30073000000000000000000000000000000000000000030146080604052600080fd00a265627a7a72305820f5a2cf5b3a352a8be183bfe094e58c3ba61369bbb746f408ab63ab5c7b51c9eb6c6578706572696d656e74616cf50037",
            "opcodes": "PUSH1 0x5A PUSH1 0x2C PUSH1 0xB DUP3 DUP3 DUP3 CODECOPY DUP1 MLOAD PUSH1 0x0 BYTE PUSH1 0x73 EQ PUSH1 0x0 DUP2 EQ PUSH1 0x1C JUMPI PUSH1 0x1E JUMP JUMPDEST INVALID JUMPDEST POP ADDRESS PUSH1 0x0 MSTORE PUSH1 0x73 DUP2 MSTORE8 DUP3 DUP2 RETURN STOP PUSH20 0x0 ADDRESS EQ PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 0xf5 LOG2 0xcf JUMPDEST GASPRICE CALLDATALOAD 0x2a DUP12 0xe1 DUP4 0xbf 0xe0 SWAP5 0xe5 DUP13 EXTCODESIZE 0xa6 SGT PUSH10 0xBBB746F408AB63AB5C7B MLOAD 0xc9 0xeb PUSH13 0x6578706572696D656E74616CF5 STOP CALLDATACOPY ",
            "sourceMap": "6009:18560:0:-;;132:2:-1;166:7;155:9;146:7;137:37;252:7;246:14;243:1;238:23;232:4;229:33;270:1;265:20;;;;222:63;;265:20;274:9;222:63;;298:9;295:1;288:20;328:4;319:7;311:22;352:7;343;336:24"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"LibBytes\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-12-12\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.25;\\n\\npragma experimental ABIEncoderV2;\\n\\n\\n\\ncontract LibSignatureValidation {\\n\\n\\n\\n  using LibBytes for bytes;\\n\\n\\n\\n  function isValidSignature(bytes32 hash, address signerAddress, bytes memory signature) internal pure returns (bool) {\\n\\n    require(signature.length == 65, \\\"LENGTH_65_REQUIRED\\\");\\n\\n    uint8 v = uint8(signature[64]);\\n\\n    bytes32 r = signature.readBytes32(0);\\n\\n    bytes32 s = signature.readBytes32(32);\\n\\n    address recovered = ecrecover(hash, v, r, s);\\n\\n    return signerAddress == recovered;\\n\\n  }\\n\\n}\\n\\n\\n\\ncontract LibTransferRequest {\\n\\n\\n\\n  // EIP191 header for EIP712 prefix\\n\\n  string constant internal EIP191_HEADER = \\\"\\\\x19\\\\x01\\\";\\n\\n  // EIP712 Domain Name value\\n\\n  string constant internal EIP712_DOMAIN_NAME = \\\"Dola Core\\\";\\n\\n  // EIP712 Domain Version value\\n\\n  string constant internal EIP712_DOMAIN_VERSION = \\\"1\\\";\\n\\n  // Hash of the EIP712 Domain Separator Schema\\n\\n  bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\\n\\n    \\\"EIP712Domain(\\\",\\n\\n    \\\"string name,\\\",\\n\\n    \\\"string version,\\\",\\n\\n    \\\"address verifyingContract\\\",\\n\\n    \\\")\\\"\\n\\n  ));\\n\\n\\n\\n  // Hash of the EIP712 Domain Separator data\\n\\n  bytes32 public EIP712_DOMAIN_HASH;\\n\\n\\n\\n  bytes32 constant internal EIP712_TRANSFER_REQUEST_TYPE_HASH = keccak256(abi.encodePacked(\\n\\n    \\\"TransferRequest(\\\",\\n\\n    \\\"address senderAddress,\\\",\\n\\n    \\\"address receiverAddress,\\\",\\n\\n    \\\"uint256 value,\\\",\\n\\n    \\\"address relayerAddress,\\\",\\n\\n    \\\"uint256 relayerFee,\\\",\\n\\n    \\\"uint256 salt,\\\",\\n\\n    \\\")\\\"\\n\\n  ));\\n\\n\\n\\n  struct TransferRequest {\\n\\n    address senderAddress;\\n\\n    address receiverAddress;\\n\\n    uint256 value;\\n\\n    address relayerAddress;\\n\\n    uint256 relayerFee;\\n\\n    uint256 salt;\\n\\n  }\\n\\n\\n\\n  constructor() public {\\n\\n    EIP712_DOMAIN_HASH = keccak256(abi.encode(\\n\\n        EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n\\n        keccak256(bytes(EIP712_DOMAIN_NAME)),\\n\\n        keccak256(bytes(EIP712_DOMAIN_VERSION)),\\n\\n        address(this)\\n\\n      ));\\n\\n  }\\n\\n\\n\\n  function hashTransferRequest(TransferRequest memory request) internal view returns (bytes32) {\\n\\n    bytes32 typeHash = EIP712_TRANSFER_REQUEST_TYPE_HASH;\\n\\n    bytes32 hashStruct;\\n\\n\\n\\n    // assembly shorthand for:\\n\\n    // bytes32 hashStruct = keccak256(abi.encode(\\n\\n    //    EIP712_TRANSFER_REQUEST_TYPE_HASH,\\n\\n    //    request.senderAddress,\\n\\n    //    request.receiverAddress,\\n\\n    //    request.value,\\n\\n    //    request.relayerAddress,\\n\\n    //    request.relayerFee,\\n\\n    //    request.salt));\\n\\n    assembly {\\n\\n      // Back up select memory\\n\\n      let temp1 := mload(sub(request, 32))\\n\\n\\n\\n      mstore(sub(request, 32), typeHash)\\n\\n      hashStruct := keccak256(sub(request, 32), 224)\\n\\n\\n\\n      mstore(sub(request, 32), temp1)\\n\\n    }\\n\\n    return keccak256(abi.encodePacked(EIP191_HEADER, EIP712_DOMAIN_HASH, hashStruct));\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\ncontract DolaCore is LibTransferRequest, LibSignatureValidation {\\n\\n\\n\\n  using LibBytes for bytes;\\n\\n\\n\\n  address public TOKEN_ADDRESS;\\n\\n  mapping (address => mapping (address => uint256)) public requestEpoch;\\n\\n\\n\\n  event TransferRequestFilled(address indexed from, address indexed to);\\n\\n\\n\\n  constructor (address _tokenAddress) public LibTransferRequest() {\\n\\n    TOKEN_ADDRESS = _tokenAddress;\\n\\n  }\\n\\n\\n\\n  function executeTransfer(TransferRequest memory request, bytes memory signature) public {\\n\\n    // make sure the request hasn't been sent already\\n\\n    require(requestEpoch[request.senderAddress][request.relayerAddress] <= request.salt, \\\"REQUEST_INVALID\\\");\\n\\n    // Validate the sender is allowed to execute this transfer\\n\\n    require(request.relayerAddress == msg.sender, \\\"REQUEST_INVALID\\\");\\n\\n    // Validate the sender's signature\\n\\n    bytes32 requestHash = hashTransferRequest(request);\\n\\n    require(isValidSignature(requestHash, request.senderAddress, signature), \\\"INVALID_REQUEST_SIGNATURE\\\");\\n\\n\\n\\n    address tokenAddress = TOKEN_ADDRESS;\\n\\n    assembly {\\n\\n      mstore(32, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n\\n      calldatacopy(36, 4, 96)\\n\\n      let success := call(\\n\\n        gas,            // forward all gas\\n\\n        tokenAddress,   // call address of token contract\\n\\n        0,              // don't send any ETH\\n\\n        32,              // pointer to start of input\\n\\n        100,            // length of input\\n\\n        0,            // write output to far position\\n\\n        32              // output size should be 32 bytes\\n\\n      )\\n\\n      success := and(success, or(\\n\\n          iszero(returndatasize),\\n\\n          and(\\n\\n            eq(returndatasize, 32),\\n\\n            gt(mload(0), 0)\\n\\n          )\\n\\n        ))\\n\\n      if iszero(success) {\\n\\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\\n\\n        mstore(96, 0)\\n\\n        revert(0, 100)\\n\\n      }\\n\\n      calldatacopy(68, 100, 64)\\n\\n      success := call(\\n\\n        gas,            // forward all gas\\n\\n        tokenAddress,   // call address of token contract\\n\\n        0,              // don't send any ETH\\n\\n        32,              // pointer to start of input\\n\\n        100,            // length of input\\n\\n        0,            // write output over input\\n\\n        32              // output size should be 32 bytes\\n\\n      )\\n\\n      success := and(success, or(\\n\\n          iszero(returndatasize),\\n\\n          and(\\n\\n            eq(returndatasize, 32),\\n\\n            gt(mload(0), 0)\\n\\n          )\\n\\n        ))\\n\\n      if iszero(success) {\\n\\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\\n\\n        mstore(96, 0)\\n\\n        revert(0, 100)\\n\\n      }\\n\\n    }\\n\\n\\n\\n    requestEpoch[request.senderAddress][request.relayerAddress] = request.salt + 1;\\n\\n  }\\n\\n}\\n\\n\\n\\nlibrary LibBytes {\\n\\n\\n\\n    using LibBytes for bytes;\\n\\n\\n\\n    /// @dev Gets the memory address for a byte array.\\n\\n    /// @param input Byte array to lookup.\\n\\n    /// @return memoryAddress Memory address of byte array. This\\n\\n    ///         points to the header of the byte array which contains\\n\\n    ///         the length.\\n\\n    function rawAddress(bytes memory input)\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 memoryAddress)\\n\\n    {\\n\\n        assembly {\\n\\n            memoryAddress := input\\n\\n        }\\n\\n        return memoryAddress;\\n\\n    }\\n\\n\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n\\n    /// @param input Byte array to lookup.\\n\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n\\n    function contentAddress(bytes memory input)\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 memoryAddress)\\n\\n    {\\n\\n        assembly {\\n\\n            memoryAddress := add(input, 32)\\n\\n        }\\n\\n        return memoryAddress;\\n\\n    }\\n\\n\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n\\n    /// @param dest memory address to copy bytes to.\\n\\n    /// @param source memory address to copy bytes from.\\n\\n    /// @param length number of bytes to copy.\\n\\n    function memCopy(\\n\\n        uint256 dest,\\n\\n        uint256 source,\\n\\n        uint256 length\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        if (length < 32) {\\n\\n            // Handle a partial word by reading destination and masking\\n\\n            // off the bits we are interested in.\\n\\n            // This correctly handles overlap, zero lengths and source == dest\\n\\n            assembly {\\n\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n\\n                let s := and(mload(source), not(mask))\\n\\n                let d := and(mload(dest), mask)\\n\\n                mstore(dest, or(s, d))\\n\\n            }\\n\\n        } else {\\n\\n            // Skip the O(length) loop when source == dest.\\n\\n            if (source == dest) {\\n\\n                return;\\n\\n            }\\n\\n\\n\\n            // For large copies we copy whole words at a time. The final\\n\\n            // word is aligned to the end of the range (instead of after the\\n\\n            // previous) to handle partial words. So a copy will look like this:\\n\\n            //\\n\\n            //  ####\\n\\n            //      ####\\n\\n            //          ####\\n\\n            //            ####\\n\\n            //\\n\\n            // We handle overlap in the source and destination range by\\n\\n            // changing the copying direction. This prevents us from\\n\\n            // overwriting parts of source that we still need to copy.\\n\\n            //\\n\\n            // This correctly handles source == dest\\n\\n            //\\n\\n            if (source > dest) {\\n\\n                assembly {\\n\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n\\n                    // is easier to compare with in the loop, and these\\n\\n                    // are also the addresses we need for copying the\\n\\n                    // last bytes.\\n\\n                    length := sub(length, 32)\\n\\n                    let sEnd := add(source, length)\\n\\n                    let dEnd := add(dest, length)\\n\\n\\n\\n                    // Remember the last 32 bytes of source\\n\\n                    // This needs to be done here and not after the loop\\n\\n                    // because we may have overwritten the last bytes in\\n\\n                    // source already due to overlap.\\n\\n                    let last := mload(sEnd)\\n\\n\\n\\n                    // Copy whole words front to back\\n\\n                    // Note: the first check is always true,\\n\\n                    // this could have been a do-while loop.\\n\\n                    // solhint-disable-next-line no-empty-blocks\\n\\n                    for {} lt(source, sEnd) {} {\\n\\n                        mstore(dest, mload(source))\\n\\n                        source := add(source, 32)\\n\\n                        dest := add(dest, 32)\\n\\n                    }\\n\\n\\n\\n                    // Write the last 32 bytes\\n\\n                    mstore(dEnd, last)\\n\\n                }\\n\\n            } else {\\n\\n                assembly {\\n\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n\\n                    // are the starting points when copying a word at the end.\\n\\n                    length := sub(length, 32)\\n\\n                    let sEnd := add(source, length)\\n\\n                    let dEnd := add(dest, length)\\n\\n\\n\\n                    // Remember the first 32 bytes of source\\n\\n                    // This needs to be done here and not after the loop\\n\\n                    // because we may have overwritten the first bytes in\\n\\n                    // source already due to overlap.\\n\\n                    let first := mload(source)\\n\\n\\n\\n                    // Copy whole words back to front\\n\\n                    // We use a signed comparisson here to allow dEnd to become\\n\\n                    // negative (happens when source and dest < 32). Valid\\n\\n                    // addresses in local memory will never be larger than\\n\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n\\n                    // Note: the first check is always true,\\n\\n                    // this could have been a do-while loop.\\n\\n                    // solhint-disable-next-line no-empty-blocks\\n\\n                    for {} slt(dest, dEnd) {} {\\n\\n                        mstore(dEnd, mload(sEnd))\\n\\n                        sEnd := sub(sEnd, 32)\\n\\n                        dEnd := sub(dEnd, 32)\\n\\n                    }\\n\\n\\n\\n                    // Write the first 32 bytes\\n\\n                    mstore(dest, first)\\n\\n                }\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Returns a slices from a byte array.\\n\\n    /// @param b The byte array to take a slice from.\\n\\n    /// @param from The starting index for the slice (inclusive).\\n\\n    /// @param to The final index for the slice (exclusive).\\n\\n    /// @return result The slice containing bytes at indices [from, to)\\n\\n    function slice(\\n\\n        bytes memory b,\\n\\n        uint256 from,\\n\\n        uint256 to\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        require(\\n\\n            from <= to,\\n\\n            \\\"FROM_LESS_THAN_TO_REQUIRED\\\"\\n\\n        );\\n\\n        require(\\n\\n            to < b.length,\\n\\n            \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Create a new bytes structure and copy contents\\n\\n        result = new bytes(to - from);\\n\\n        memCopy(\\n\\n            result.contentAddress(),\\n\\n            b.contentAddress() + from,\\n\\n            result.length);\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n\\n    /// @param from The starting index for the slice (inclusive).\\n\\n    /// @param to The final index for the slice (exclusive).\\n\\n    /// @return result The slice containing bytes at indices [from, to)\\n\\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\\n\\n    function sliceDestructive(\\n\\n        bytes memory b,\\n\\n        uint256 from,\\n\\n        uint256 to\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        require(\\n\\n            from <= to,\\n\\n            \\\"FROM_LESS_THAN_TO_REQUIRED\\\"\\n\\n        );\\n\\n        require(\\n\\n            to < b.length,\\n\\n            \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n\\n        assembly {\\n\\n            result := add(b, from)\\n\\n            mstore(result, sub(to, from))\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n\\n    /// @param b Byte array that will be modified.\\n\\n    /// @return The byte that was popped off.\\n\\n    function popLastByte(bytes memory b)\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes1 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length > 0,\\n\\n            \\\"GREATER_THAN_ZERO_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Store last byte.\\n\\n        result = b[b.length - 1];\\n\\n\\n\\n        assembly {\\n\\n            // Decrement length of byte array.\\n\\n            let newLen := sub(mload(b), 1)\\n\\n            mstore(b, newLen)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\\n\\n    /// @param b Byte array that will be modified.\\n\\n    /// @return The 20 byte address that was popped off.\\n\\n    function popLast20Bytes(bytes memory b)\\n\\n        internal\\n\\n        pure\\n\\n        returns (address result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= 20,\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Store last 20 bytes.\\n\\n        result = readAddress(b, b.length - 20);\\n\\n\\n\\n        assembly {\\n\\n            // Subtract 20 from byte array length.\\n\\n            let newLen := sub(mload(b), 20)\\n\\n            mstore(b, newLen)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Tests equality of two byte arrays.\\n\\n    /// @param lhs First byte array to compare.\\n\\n    /// @param rhs Second byte array to compare.\\n\\n    /// @return True if arrays are the same. False otherwise.\\n\\n    function equals(\\n\\n        bytes memory lhs,\\n\\n        bytes memory rhs\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bool equal)\\n\\n    {\\n\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n\\n        // We early exit on unequal lengths, but keccak would also correctly\\n\\n        // handle this.\\n\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n\\n    }\\n\\n\\n\\n    /// @dev Reads an address from a position in a byte array.\\n\\n    /// @param b Byte array containing an address.\\n\\n    /// @param index Index in byte array of address.\\n\\n    /// @return address from byte array.\\n\\n    function readAddress(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (address result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 20,  // 20 is length of address\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Add offset to index:\\n\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n\\n        index += 20;\\n\\n\\n\\n        // Read address from array memory\\n\\n        assembly {\\n\\n            // 1. Add index to address of bytes array\\n\\n            // 2. Load 32-byte word from memory\\n\\n            // 3. Apply 20-byte mask to obtain address\\n\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert address into.\\n\\n    /// @param index Index in byte array of address.\\n\\n    /// @param input Address to put into byte array.\\n\\n    function writeAddress(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        address input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 20,  // 20 is length of address\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Add offset to index:\\n\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n\\n        index += 20;\\n\\n\\n\\n        // Store address into array memory\\n\\n        assembly {\\n\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n\\n\\n            // 1. Add index to address of bytes array\\n\\n            // 2. Load 32-byte word from memory\\n\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n\\n            let neighbors := and(\\n\\n                mload(add(b, index)),\\n\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n\\n            )\\n\\n\\n\\n            // Make sure input address is clean.\\n\\n            // (Solidity does not guarantee this)\\n\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n\\n\\n            // Store the neighbors and address into memory\\n\\n            mstore(add(b, index), xor(input, neighbors))\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a bytes32 value.\\n\\n    /// @param index Index in byte array of bytes32 value.\\n\\n    /// @return bytes32 value from byte array.\\n\\n    function readBytes32(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes32 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 32,\\n\\n            \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n\\n        index += 32;\\n\\n\\n\\n        // Read the bytes32 from array memory\\n\\n        assembly {\\n\\n            result := mload(add(b, index))\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input bytes32 to put into byte array.\\n\\n    function writeBytes32(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        bytes32 input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 32,\\n\\n            \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n\\n        index += 32;\\n\\n\\n\\n        // Read the bytes32 from array memory\\n\\n        assembly {\\n\\n            mstore(add(b, index), input)\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a uint256 value.\\n\\n    /// @param index Index in byte array of uint256 value.\\n\\n    /// @return uint256 value from byte array.\\n\\n    function readUint256(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 result)\\n\\n    {\\n\\n        return uint256(readBytes32(b, index));\\n\\n    }\\n\\n\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input uint256 to put into byte array.\\n\\n    function writeUint256(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        uint256 input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        writeBytes32(b, index, bytes32(input));\\n\\n    }\\n\\n\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a bytes4 value.\\n\\n    /// @param index Index in byte array of bytes4 value.\\n\\n    /// @return bytes4 value from byte array.\\n\\n    function readBytes4(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes4 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 4,\\n\\n            \\\"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n        assembly {\\n\\n            result := mload(add(b, 32))\\n\\n            // Solidity does not require us to clean the trailing bytes.\\n\\n            // We do it anyway\\n\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Reads nested bytes from a specific position.\\n\\n    /// @dev NOTE: the returned value overlaps with the input value.\\n\\n    ///            Both should be treated as immutable.\\n\\n    /// @param b Byte array containing nested bytes.\\n\\n    /// @param index Index of nested bytes.\\n\\n    /// @return result Nested bytes.\\n\\n    function readBytesWithLength(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        // Read length of nested bytes\\n\\n        uint256 nestedBytesLength = readUint256(b, index);\\n\\n        index += 32;\\n\\n\\n\\n        // Assert length of <b> is valid, given\\n\\n        // length of nested bytes\\n\\n        require(\\n\\n            b.length >= index + nestedBytesLength,\\n\\n            \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Return a pointer to the byte array as it exists inside `b`\\n\\n        assembly {\\n\\n            result := add(b, index)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Inserts bytes at a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input bytes to insert.\\n\\n    function writeBytesWithLength(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        bytes memory input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        // Assert length of <b> is valid, given\\n\\n        // length of input\\n\\n        require(\\n\\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\\n\\n            \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Copy <input> into <b>\\n\\n        memCopy(\\n\\n            b.contentAddress() + index,\\n\\n            input.rawAddress(), // includes length of <input>\\n\\n            input.length + 32   // +32 bytes to store <input> length\\n\\n        );\\n\\n    }\\n\\n\\n\\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\\n\\n    /// @param dest Byte array that will be overwritten with source bytes.\\n\\n    /// @param source Byte array to copy onto dest bytes.\\n\\n    function deepCopyBytes(\\n\\n        bytes memory dest,\\n\\n        bytes memory source\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        uint256 sourceLen = source.length;\\n\\n        // Dest length must be >= source length, or some bytes would not be copied.\\n\\n        require(\\n\\n            dest.length >= sourceLen,\\n\\n            \\\"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n        memCopy(\\n\\n            dest.contentAddress(),\\n\\n            source.contentAddress(),\\n\\n            sourceLen\\n\\n        );\\n\\n    }\\n\\n}\",\"keccak256\":\"0x60c88337663b53dfb75dc43a53ed27d5ec2a198489c19caf51be647f0489acf0\"}},\"version\":1}"
      },
      "LibSignatureValidation": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "6080604052348015600f57600080fd5b50604380601d6000396000f3006080604052600080fd00a265627a7a723058209dc6d404d64d38225ea6c71682909347a46318710d3ed7bc874772898171108b6c6578706572696d656e74616cf50037",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH1 0xF JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x43 DUP1 PUSH1 0x1D PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x0 DUP1 REVERT STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 SWAP14 0xc6 0xd4 DIV 0xd6 0x4d CODESIZE 0x22 0x5e 0xa6 0xc7 AND DUP3 SWAP1 SWAP4 0x47 LOG4 PUSH4 0x18710D3E 0xd7 0xbc DUP8 0x47 PUSH19 0x898171108B6C6578706572696D656E74616CF5 STOP CALLDATACOPY ",
            "sourceMap": "134:470:0:-;;;;8:9:-1;5:2;;;30:1;27;20:12;5:2;134:470:0;;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"LibSignatureValidation\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-12-12\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.25;\\n\\npragma experimental ABIEncoderV2;\\n\\n\\n\\ncontract LibSignatureValidation {\\n\\n\\n\\n  using LibBytes for bytes;\\n\\n\\n\\n  function isValidSignature(bytes32 hash, address signerAddress, bytes memory signature) internal pure returns (bool) {\\n\\n    require(signature.length == 65, \\\"LENGTH_65_REQUIRED\\\");\\n\\n    uint8 v = uint8(signature[64]);\\n\\n    bytes32 r = signature.readBytes32(0);\\n\\n    bytes32 s = signature.readBytes32(32);\\n\\n    address recovered = ecrecover(hash, v, r, s);\\n\\n    return signerAddress == recovered;\\n\\n  }\\n\\n}\\n\\n\\n\\ncontract LibTransferRequest {\\n\\n\\n\\n  // EIP191 header for EIP712 prefix\\n\\n  string constant internal EIP191_HEADER = \\\"\\\\x19\\\\x01\\\";\\n\\n  // EIP712 Domain Name value\\n\\n  string constant internal EIP712_DOMAIN_NAME = \\\"Dola Core\\\";\\n\\n  // EIP712 Domain Version value\\n\\n  string constant internal EIP712_DOMAIN_VERSION = \\\"1\\\";\\n\\n  // Hash of the EIP712 Domain Separator Schema\\n\\n  bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\\n\\n    \\\"EIP712Domain(\\\",\\n\\n    \\\"string name,\\\",\\n\\n    \\\"string version,\\\",\\n\\n    \\\"address verifyingContract\\\",\\n\\n    \\\")\\\"\\n\\n  ));\\n\\n\\n\\n  // Hash of the EIP712 Domain Separator data\\n\\n  bytes32 public EIP712_DOMAIN_HASH;\\n\\n\\n\\n  bytes32 constant internal EIP712_TRANSFER_REQUEST_TYPE_HASH = keccak256(abi.encodePacked(\\n\\n    \\\"TransferRequest(\\\",\\n\\n    \\\"address senderAddress,\\\",\\n\\n    \\\"address receiverAddress,\\\",\\n\\n    \\\"uint256 value,\\\",\\n\\n    \\\"address relayerAddress,\\\",\\n\\n    \\\"uint256 relayerFee,\\\",\\n\\n    \\\"uint256 salt,\\\",\\n\\n    \\\")\\\"\\n\\n  ));\\n\\n\\n\\n  struct TransferRequest {\\n\\n    address senderAddress;\\n\\n    address receiverAddress;\\n\\n    uint256 value;\\n\\n    address relayerAddress;\\n\\n    uint256 relayerFee;\\n\\n    uint256 salt;\\n\\n  }\\n\\n\\n\\n  constructor() public {\\n\\n    EIP712_DOMAIN_HASH = keccak256(abi.encode(\\n\\n        EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n\\n        keccak256(bytes(EIP712_DOMAIN_NAME)),\\n\\n        keccak256(bytes(EIP712_DOMAIN_VERSION)),\\n\\n        address(this)\\n\\n      ));\\n\\n  }\\n\\n\\n\\n  function hashTransferRequest(TransferRequest memory request) internal view returns (bytes32) {\\n\\n    bytes32 typeHash = EIP712_TRANSFER_REQUEST_TYPE_HASH;\\n\\n    bytes32 hashStruct;\\n\\n\\n\\n    // assembly shorthand for:\\n\\n    // bytes32 hashStruct = keccak256(abi.encode(\\n\\n    //    EIP712_TRANSFER_REQUEST_TYPE_HASH,\\n\\n    //    request.senderAddress,\\n\\n    //    request.receiverAddress,\\n\\n    //    request.value,\\n\\n    //    request.relayerAddress,\\n\\n    //    request.relayerFee,\\n\\n    //    request.salt));\\n\\n    assembly {\\n\\n      // Back up select memory\\n\\n      let temp1 := mload(sub(request, 32))\\n\\n\\n\\n      mstore(sub(request, 32), typeHash)\\n\\n      hashStruct := keccak256(sub(request, 32), 224)\\n\\n\\n\\n      mstore(sub(request, 32), temp1)\\n\\n    }\\n\\n    return keccak256(abi.encodePacked(EIP191_HEADER, EIP712_DOMAIN_HASH, hashStruct));\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\ncontract DolaCore is LibTransferRequest, LibSignatureValidation {\\n\\n\\n\\n  using LibBytes for bytes;\\n\\n\\n\\n  address public TOKEN_ADDRESS;\\n\\n  mapping (address => mapping (address => uint256)) public requestEpoch;\\n\\n\\n\\n  event TransferRequestFilled(address indexed from, address indexed to);\\n\\n\\n\\n  constructor (address _tokenAddress) public LibTransferRequest() {\\n\\n    TOKEN_ADDRESS = _tokenAddress;\\n\\n  }\\n\\n\\n\\n  function executeTransfer(TransferRequest memory request, bytes memory signature) public {\\n\\n    // make sure the request hasn't been sent already\\n\\n    require(requestEpoch[request.senderAddress][request.relayerAddress] <= request.salt, \\\"REQUEST_INVALID\\\");\\n\\n    // Validate the sender is allowed to execute this transfer\\n\\n    require(request.relayerAddress == msg.sender, \\\"REQUEST_INVALID\\\");\\n\\n    // Validate the sender's signature\\n\\n    bytes32 requestHash = hashTransferRequest(request);\\n\\n    require(isValidSignature(requestHash, request.senderAddress, signature), \\\"INVALID_REQUEST_SIGNATURE\\\");\\n\\n\\n\\n    address tokenAddress = TOKEN_ADDRESS;\\n\\n    assembly {\\n\\n      mstore(32, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n\\n      calldatacopy(36, 4, 96)\\n\\n      let success := call(\\n\\n        gas,            // forward all gas\\n\\n        tokenAddress,   // call address of token contract\\n\\n        0,              // don't send any ETH\\n\\n        32,              // pointer to start of input\\n\\n        100,            // length of input\\n\\n        0,            // write output to far position\\n\\n        32              // output size should be 32 bytes\\n\\n      )\\n\\n      success := and(success, or(\\n\\n          iszero(returndatasize),\\n\\n          and(\\n\\n            eq(returndatasize, 32),\\n\\n            gt(mload(0), 0)\\n\\n          )\\n\\n        ))\\n\\n      if iszero(success) {\\n\\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\\n\\n        mstore(96, 0)\\n\\n        revert(0, 100)\\n\\n      }\\n\\n      calldatacopy(68, 100, 64)\\n\\n      success := call(\\n\\n        gas,            // forward all gas\\n\\n        tokenAddress,   // call address of token contract\\n\\n        0,              // don't send any ETH\\n\\n        32,              // pointer to start of input\\n\\n        100,            // length of input\\n\\n        0,            // write output over input\\n\\n        32              // output size should be 32 bytes\\n\\n      )\\n\\n      success := and(success, or(\\n\\n          iszero(returndatasize),\\n\\n          and(\\n\\n            eq(returndatasize, 32),\\n\\n            gt(mload(0), 0)\\n\\n          )\\n\\n        ))\\n\\n      if iszero(success) {\\n\\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\\n\\n        mstore(96, 0)\\n\\n        revert(0, 100)\\n\\n      }\\n\\n    }\\n\\n\\n\\n    requestEpoch[request.senderAddress][request.relayerAddress] = request.salt + 1;\\n\\n  }\\n\\n}\\n\\n\\n\\nlibrary LibBytes {\\n\\n\\n\\n    using LibBytes for bytes;\\n\\n\\n\\n    /// @dev Gets the memory address for a byte array.\\n\\n    /// @param input Byte array to lookup.\\n\\n    /// @return memoryAddress Memory address of byte array. This\\n\\n    ///         points to the header of the byte array which contains\\n\\n    ///         the length.\\n\\n    function rawAddress(bytes memory input)\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 memoryAddress)\\n\\n    {\\n\\n        assembly {\\n\\n            memoryAddress := input\\n\\n        }\\n\\n        return memoryAddress;\\n\\n    }\\n\\n\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n\\n    /// @param input Byte array to lookup.\\n\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n\\n    function contentAddress(bytes memory input)\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 memoryAddress)\\n\\n    {\\n\\n        assembly {\\n\\n            memoryAddress := add(input, 32)\\n\\n        }\\n\\n        return memoryAddress;\\n\\n    }\\n\\n\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n\\n    /// @param dest memory address to copy bytes to.\\n\\n    /// @param source memory address to copy bytes from.\\n\\n    /// @param length number of bytes to copy.\\n\\n    function memCopy(\\n\\n        uint256 dest,\\n\\n        uint256 source,\\n\\n        uint256 length\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        if (length < 32) {\\n\\n            // Handle a partial word by reading destination and masking\\n\\n            // off the bits we are interested in.\\n\\n            // This correctly handles overlap, zero lengths and source == dest\\n\\n            assembly {\\n\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n\\n                let s := and(mload(source), not(mask))\\n\\n                let d := and(mload(dest), mask)\\n\\n                mstore(dest, or(s, d))\\n\\n            }\\n\\n        } else {\\n\\n            // Skip the O(length) loop when source == dest.\\n\\n            if (source == dest) {\\n\\n                return;\\n\\n            }\\n\\n\\n\\n            // For large copies we copy whole words at a time. The final\\n\\n            // word is aligned to the end of the range (instead of after the\\n\\n            // previous) to handle partial words. So a copy will look like this:\\n\\n            //\\n\\n            //  ####\\n\\n            //      ####\\n\\n            //          ####\\n\\n            //            ####\\n\\n            //\\n\\n            // We handle overlap in the source and destination range by\\n\\n            // changing the copying direction. This prevents us from\\n\\n            // overwriting parts of source that we still need to copy.\\n\\n            //\\n\\n            // This correctly handles source == dest\\n\\n            //\\n\\n            if (source > dest) {\\n\\n                assembly {\\n\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n\\n                    // is easier to compare with in the loop, and these\\n\\n                    // are also the addresses we need for copying the\\n\\n                    // last bytes.\\n\\n                    length := sub(length, 32)\\n\\n                    let sEnd := add(source, length)\\n\\n                    let dEnd := add(dest, length)\\n\\n\\n\\n                    // Remember the last 32 bytes of source\\n\\n                    // This needs to be done here and not after the loop\\n\\n                    // because we may have overwritten the last bytes in\\n\\n                    // source already due to overlap.\\n\\n                    let last := mload(sEnd)\\n\\n\\n\\n                    // Copy whole words front to back\\n\\n                    // Note: the first check is always true,\\n\\n                    // this could have been a do-while loop.\\n\\n                    // solhint-disable-next-line no-empty-blocks\\n\\n                    for {} lt(source, sEnd) {} {\\n\\n                        mstore(dest, mload(source))\\n\\n                        source := add(source, 32)\\n\\n                        dest := add(dest, 32)\\n\\n                    }\\n\\n\\n\\n                    // Write the last 32 bytes\\n\\n                    mstore(dEnd, last)\\n\\n                }\\n\\n            } else {\\n\\n                assembly {\\n\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n\\n                    // are the starting points when copying a word at the end.\\n\\n                    length := sub(length, 32)\\n\\n                    let sEnd := add(source, length)\\n\\n                    let dEnd := add(dest, length)\\n\\n\\n\\n                    // Remember the first 32 bytes of source\\n\\n                    // This needs to be done here and not after the loop\\n\\n                    // because we may have overwritten the first bytes in\\n\\n                    // source already due to overlap.\\n\\n                    let first := mload(source)\\n\\n\\n\\n                    // Copy whole words back to front\\n\\n                    // We use a signed comparisson here to allow dEnd to become\\n\\n                    // negative (happens when source and dest < 32). Valid\\n\\n                    // addresses in local memory will never be larger than\\n\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n\\n                    // Note: the first check is always true,\\n\\n                    // this could have been a do-while loop.\\n\\n                    // solhint-disable-next-line no-empty-blocks\\n\\n                    for {} slt(dest, dEnd) {} {\\n\\n                        mstore(dEnd, mload(sEnd))\\n\\n                        sEnd := sub(sEnd, 32)\\n\\n                        dEnd := sub(dEnd, 32)\\n\\n                    }\\n\\n\\n\\n                    // Write the first 32 bytes\\n\\n                    mstore(dest, first)\\n\\n                }\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Returns a slices from a byte array.\\n\\n    /// @param b The byte array to take a slice from.\\n\\n    /// @param from The starting index for the slice (inclusive).\\n\\n    /// @param to The final index for the slice (exclusive).\\n\\n    /// @return result The slice containing bytes at indices [from, to)\\n\\n    function slice(\\n\\n        bytes memory b,\\n\\n        uint256 from,\\n\\n        uint256 to\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        require(\\n\\n            from <= to,\\n\\n            \\\"FROM_LESS_THAN_TO_REQUIRED\\\"\\n\\n        );\\n\\n        require(\\n\\n            to < b.length,\\n\\n            \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Create a new bytes structure and copy contents\\n\\n        result = new bytes(to - from);\\n\\n        memCopy(\\n\\n            result.contentAddress(),\\n\\n            b.contentAddress() + from,\\n\\n            result.length);\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n\\n    /// @param from The starting index for the slice (inclusive).\\n\\n    /// @param to The final index for the slice (exclusive).\\n\\n    /// @return result The slice containing bytes at indices [from, to)\\n\\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\\n\\n    function sliceDestructive(\\n\\n        bytes memory b,\\n\\n        uint256 from,\\n\\n        uint256 to\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        require(\\n\\n            from <= to,\\n\\n            \\\"FROM_LESS_THAN_TO_REQUIRED\\\"\\n\\n        );\\n\\n        require(\\n\\n            to < b.length,\\n\\n            \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n\\n        assembly {\\n\\n            result := add(b, from)\\n\\n            mstore(result, sub(to, from))\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n\\n    /// @param b Byte array that will be modified.\\n\\n    /// @return The byte that was popped off.\\n\\n    function popLastByte(bytes memory b)\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes1 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length > 0,\\n\\n            \\\"GREATER_THAN_ZERO_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Store last byte.\\n\\n        result = b[b.length - 1];\\n\\n\\n\\n        assembly {\\n\\n            // Decrement length of byte array.\\n\\n            let newLen := sub(mload(b), 1)\\n\\n            mstore(b, newLen)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\\n\\n    /// @param b Byte array that will be modified.\\n\\n    /// @return The 20 byte address that was popped off.\\n\\n    function popLast20Bytes(bytes memory b)\\n\\n        internal\\n\\n        pure\\n\\n        returns (address result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= 20,\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Store last 20 bytes.\\n\\n        result = readAddress(b, b.length - 20);\\n\\n\\n\\n        assembly {\\n\\n            // Subtract 20 from byte array length.\\n\\n            let newLen := sub(mload(b), 20)\\n\\n            mstore(b, newLen)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Tests equality of two byte arrays.\\n\\n    /// @param lhs First byte array to compare.\\n\\n    /// @param rhs Second byte array to compare.\\n\\n    /// @return True if arrays are the same. False otherwise.\\n\\n    function equals(\\n\\n        bytes memory lhs,\\n\\n        bytes memory rhs\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bool equal)\\n\\n    {\\n\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n\\n        // We early exit on unequal lengths, but keccak would also correctly\\n\\n        // handle this.\\n\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n\\n    }\\n\\n\\n\\n    /// @dev Reads an address from a position in a byte array.\\n\\n    /// @param b Byte array containing an address.\\n\\n    /// @param index Index in byte array of address.\\n\\n    /// @return address from byte array.\\n\\n    function readAddress(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (address result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 20,  // 20 is length of address\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Add offset to index:\\n\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n\\n        index += 20;\\n\\n\\n\\n        // Read address from array memory\\n\\n        assembly {\\n\\n            // 1. Add index to address of bytes array\\n\\n            // 2. Load 32-byte word from memory\\n\\n            // 3. Apply 20-byte mask to obtain address\\n\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert address into.\\n\\n    /// @param index Index in byte array of address.\\n\\n    /// @param input Address to put into byte array.\\n\\n    function writeAddress(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        address input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 20,  // 20 is length of address\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Add offset to index:\\n\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n\\n        index += 20;\\n\\n\\n\\n        // Store address into array memory\\n\\n        assembly {\\n\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n\\n\\n            // 1. Add index to address of bytes array\\n\\n            // 2. Load 32-byte word from memory\\n\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n\\n            let neighbors := and(\\n\\n                mload(add(b, index)),\\n\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n\\n            )\\n\\n\\n\\n            // Make sure input address is clean.\\n\\n            // (Solidity does not guarantee this)\\n\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n\\n\\n            // Store the neighbors and address into memory\\n\\n            mstore(add(b, index), xor(input, neighbors))\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a bytes32 value.\\n\\n    /// @param index Index in byte array of bytes32 value.\\n\\n    /// @return bytes32 value from byte array.\\n\\n    function readBytes32(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes32 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 32,\\n\\n            \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n\\n        index += 32;\\n\\n\\n\\n        // Read the bytes32 from array memory\\n\\n        assembly {\\n\\n            result := mload(add(b, index))\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input bytes32 to put into byte array.\\n\\n    function writeBytes32(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        bytes32 input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 32,\\n\\n            \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n\\n        index += 32;\\n\\n\\n\\n        // Read the bytes32 from array memory\\n\\n        assembly {\\n\\n            mstore(add(b, index), input)\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a uint256 value.\\n\\n    /// @param index Index in byte array of uint256 value.\\n\\n    /// @return uint256 value from byte array.\\n\\n    function readUint256(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 result)\\n\\n    {\\n\\n        return uint256(readBytes32(b, index));\\n\\n    }\\n\\n\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input uint256 to put into byte array.\\n\\n    function writeUint256(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        uint256 input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        writeBytes32(b, index, bytes32(input));\\n\\n    }\\n\\n\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a bytes4 value.\\n\\n    /// @param index Index in byte array of bytes4 value.\\n\\n    /// @return bytes4 value from byte array.\\n\\n    function readBytes4(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes4 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 4,\\n\\n            \\\"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n        assembly {\\n\\n            result := mload(add(b, 32))\\n\\n            // Solidity does not require us to clean the trailing bytes.\\n\\n            // We do it anyway\\n\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Reads nested bytes from a specific position.\\n\\n    /// @dev NOTE: the returned value overlaps with the input value.\\n\\n    ///            Both should be treated as immutable.\\n\\n    /// @param b Byte array containing nested bytes.\\n\\n    /// @param index Index of nested bytes.\\n\\n    /// @return result Nested bytes.\\n\\n    function readBytesWithLength(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        // Read length of nested bytes\\n\\n        uint256 nestedBytesLength = readUint256(b, index);\\n\\n        index += 32;\\n\\n\\n\\n        // Assert length of <b> is valid, given\\n\\n        // length of nested bytes\\n\\n        require(\\n\\n            b.length >= index + nestedBytesLength,\\n\\n            \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Return a pointer to the byte array as it exists inside `b`\\n\\n        assembly {\\n\\n            result := add(b, index)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Inserts bytes at a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input bytes to insert.\\n\\n    function writeBytesWithLength(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        bytes memory input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        // Assert length of <b> is valid, given\\n\\n        // length of input\\n\\n        require(\\n\\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\\n\\n            \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Copy <input> into <b>\\n\\n        memCopy(\\n\\n            b.contentAddress() + index,\\n\\n            input.rawAddress(), // includes length of <input>\\n\\n            input.length + 32   // +32 bytes to store <input> length\\n\\n        );\\n\\n    }\\n\\n\\n\\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\\n\\n    /// @param dest Byte array that will be overwritten with source bytes.\\n\\n    /// @param source Byte array to copy onto dest bytes.\\n\\n    function deepCopyBytes(\\n\\n        bytes memory dest,\\n\\n        bytes memory source\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        uint256 sourceLen = source.length;\\n\\n        // Dest length must be >= source length, or some bytes would not be copied.\\n\\n        require(\\n\\n            dest.length >= sourceLen,\\n\\n            \\\"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n        memCopy(\\n\\n            dest.contentAddress(),\\n\\n            source.contentAddress(),\\n\\n            sourceLen\\n\\n        );\\n\\n    }\\n\\n}\",\"keccak256\":\"0x60c88337663b53dfb75dc43a53ed27d5ec2a198489c19caf51be647f0489acf0\"}},\"version\":1}"
      },
      "LibTransferRequest": {
        "evm": {
          "bytecode": {
            "linkReferences": {},
            "object": "608060405234801561001057600080fd5b50604080517f454950373132446f6d61696e28000000000000000000000000000000000000006020808301919091527f737472696e67206e616d652c0000000000000000000000000000000000000000602d8301527f737472696e672076657273696f6e2c000000000000000000000000000000000060398301527f6164647265737320766572696679696e67436f6e74726163740000000000000060488301527f2900000000000000000000000000000000000000000000000000000000000000606183015282516042818403018152606290920192839052815191929182918401908083835b602083106101175780518252601f1990920191602091820191016100f8565b51815160209384036101000a600019018019909216911617905260408051929094018290038220828501855260098084527f446f6c6120436f72650000000000000000000000000000000000000000000000928401928352945190965091945090928392508083835b6020831061019f5780518252601f199092019160209182019101610180565b51815160209384036101000a600019018019909216911617905260408051929094018290038220828501855260018084527f3100000000000000000000000000000000000000000000000000000000000000928401928352945190965091945090928392508083835b602083106102275780518252601f199092019160209182019101610208565b51815160209384036101000a600019018019909216911617905260405191909301819003812061026097969550935030920190506102eb565b6040516020818303038152906040526040518082805190602001908083835b6020831061029e5780518252601f19909201916020918201910161027f565b5181516020939093036101000a6000190180199091169216919091179052604051920182900390912060005550610338915050565b6102dc81610329565b82525050565b6102dc81610335565b608081016102f982876102e2565b61030660208301866102e2565b61031360408301856102e2565b61032060608301846102d3565b95945050505050565b600160a060020a031690565b90565b61022c806103476000396000f30060806040526004361061004b5763ffffffff7c01000000000000000000000000000000000000000000000000000000006000350416632624b2d98114610050578063e306f7791461007b575b600080fd5b34801561005c57600080fd5b50610065610090565b60405161007291906101db565b60405180910390f35b34801561008757600080fd5b506100656101c6565b604080517f454950373132446f6d61696e28000000000000000000000000000000000000006020808301919091527f737472696e67206e616d652c0000000000000000000000000000000000000000602d8301527f737472696e672076657273696f6e2c000000000000000000000000000000000060398301527f6164647265737320766572696679696e67436f6e74726163740000000000000060488301527f2900000000000000000000000000000000000000000000000000000000000000606183015282516042818403018152606290920192839052815191929182918401908083835b602083106101965780518252601f199092019160209182019101610177565b6001836020036101000a038019825116818451168082178552505050505050905001915050604051809103902081565b60005481565b6101d5816101ef565b82525050565b602081016101e982846101cc565b92915050565b905600a265627a7a7230582097a50270667793d48aa6282db3f2d165892d34f157e191e7bde1aa2bbbed72946c6578706572696d656e74616cf50037",
            "opcodes": "PUSH1 0x80 PUSH1 0x40 MSTORE CALLVALUE DUP1 ISZERO PUSH2 0x10 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH1 0x40 DUP1 MLOAD PUSH32 0x454950373132446F6D61696E2800000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x737472696E67206E616D652C0000000000000000000000000000000000000000 PUSH1 0x2D DUP4 ADD MSTORE PUSH32 0x737472696E672076657273696F6E2C0000000000000000000000000000000000 PUSH1 0x39 DUP4 ADD MSTORE PUSH32 0x6164647265737320766572696679696E67436F6E747261637400000000000000 PUSH1 0x48 DUP4 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x61 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x42 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x62 SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 DUP3 SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x117 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0xF8 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 DUP3 DUP6 ADD DUP6 MSTORE PUSH1 0x9 DUP1 DUP5 MSTORE PUSH32 0x446F6C6120436F72650000000000000000000000000000000000000000000000 SWAP3 DUP5 ADD SWAP3 DUP4 MSTORE SWAP5 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP SWAP1 SWAP3 DUP4 SWAP3 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x19F JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x180 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 DUP1 MLOAD SWAP3 SWAP1 SWAP5 ADD DUP3 SWAP1 SUB DUP3 KECCAK256 DUP3 DUP6 ADD DUP6 MSTORE PUSH1 0x1 DUP1 DUP5 MSTORE PUSH32 0x3100000000000000000000000000000000000000000000000000000000000000 SWAP3 DUP5 ADD SWAP3 DUP4 MSTORE SWAP5 MLOAD SWAP1 SWAP7 POP SWAP2 SWAP5 POP SWAP1 SWAP3 DUP4 SWAP3 POP DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x227 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x208 JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 DUP5 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP3 AND SWAP2 AND OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP2 SWAP1 SWAP4 ADD DUP2 SWAP1 SUB DUP2 KECCAK256 PUSH2 0x260 SWAP8 SWAP7 SWAP6 POP SWAP4 POP ADDRESS SWAP3 ADD SWAP1 POP PUSH2 0x2EB JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH1 0x20 DUP2 DUP4 SUB SUB DUP2 MSTORE SWAP1 PUSH1 0x40 MSTORE PUSH1 0x40 MLOAD DUP1 DUP3 DUP1 MLOAD SWAP1 PUSH1 0x20 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x29E JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x27F JUMP JUMPDEST MLOAD DUP2 MLOAD PUSH1 0x20 SWAP4 SWAP1 SWAP4 SUB PUSH2 0x100 EXP PUSH1 0x0 NOT ADD DUP1 NOT SWAP1 SWAP2 AND SWAP3 AND SWAP2 SWAP1 SWAP2 OR SWAP1 MSTORE PUSH1 0x40 MLOAD SWAP3 ADD DUP3 SWAP1 SUB SWAP1 SWAP2 KECCAK256 PUSH1 0x0 SSTORE POP PUSH2 0x338 SWAP2 POP POP JUMP JUMPDEST PUSH2 0x2DC DUP2 PUSH2 0x329 JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH2 0x2DC DUP2 PUSH2 0x335 JUMP JUMPDEST PUSH1 0x80 DUP2 ADD PUSH2 0x2F9 DUP3 DUP8 PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0x306 PUSH1 0x20 DUP4 ADD DUP7 PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0x313 PUSH1 0x40 DUP4 ADD DUP6 PUSH2 0x2E2 JUMP JUMPDEST PUSH2 0x320 PUSH1 0x60 DUP4 ADD DUP5 PUSH2 0x2D3 JUMP JUMPDEST SWAP6 SWAP5 POP POP POP POP POP JUMP JUMPDEST PUSH1 0x1 PUSH1 0xA0 PUSH1 0x2 EXP SUB AND SWAP1 JUMP JUMPDEST SWAP1 JUMP JUMPDEST PUSH2 0x22C DUP1 PUSH2 0x347 PUSH1 0x0 CODECOPY PUSH1 0x0 RETURN STOP PUSH1 0x80 PUSH1 0x40 MSTORE PUSH1 0x4 CALLDATASIZE LT PUSH2 0x4B JUMPI PUSH4 0xFFFFFFFF PUSH29 0x100000000000000000000000000000000000000000000000000000000 PUSH1 0x0 CALLDATALOAD DIV AND PUSH4 0x2624B2D9 DUP2 EQ PUSH2 0x50 JUMPI DUP1 PUSH4 0xE306F779 EQ PUSH2 0x7B JUMPI JUMPDEST PUSH1 0x0 DUP1 REVERT JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x5C JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65 PUSH2 0x90 JUMP JUMPDEST PUSH1 0x40 MLOAD PUSH2 0x72 SWAP2 SWAP1 PUSH2 0x1DB JUMP JUMPDEST PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 RETURN JUMPDEST CALLVALUE DUP1 ISZERO PUSH2 0x87 JUMPI PUSH1 0x0 DUP1 REVERT JUMPDEST POP PUSH2 0x65 PUSH2 0x1C6 JUMP JUMPDEST PUSH1 0x40 DUP1 MLOAD PUSH32 0x454950373132446F6D61696E2800000000000000000000000000000000000000 PUSH1 0x20 DUP1 DUP4 ADD SWAP2 SWAP1 SWAP2 MSTORE PUSH32 0x737472696E67206E616D652C0000000000000000000000000000000000000000 PUSH1 0x2D DUP4 ADD MSTORE PUSH32 0x737472696E672076657273696F6E2C0000000000000000000000000000000000 PUSH1 0x39 DUP4 ADD MSTORE PUSH32 0x6164647265737320766572696679696E67436F6E747261637400000000000000 PUSH1 0x48 DUP4 ADD MSTORE PUSH32 0x2900000000000000000000000000000000000000000000000000000000000000 PUSH1 0x61 DUP4 ADD MSTORE DUP3 MLOAD PUSH1 0x42 DUP2 DUP5 SUB ADD DUP2 MSTORE PUSH1 0x62 SWAP1 SWAP3 ADD SWAP3 DUP4 SWAP1 MSTORE DUP2 MLOAD SWAP2 SWAP3 SWAP2 DUP3 SWAP2 DUP5 ADD SWAP1 DUP1 DUP4 DUP4 JUMPDEST PUSH1 0x20 DUP4 LT PUSH2 0x196 JUMPI DUP1 MLOAD DUP3 MSTORE PUSH1 0x1F NOT SWAP1 SWAP3 ADD SWAP2 PUSH1 0x20 SWAP2 DUP3 ADD SWAP2 ADD PUSH2 0x177 JUMP JUMPDEST PUSH1 0x1 DUP4 PUSH1 0x20 SUB PUSH2 0x100 EXP SUB DUP1 NOT DUP3 MLOAD AND DUP2 DUP5 MLOAD AND DUP1 DUP3 OR DUP6 MSTORE POP POP POP POP POP POP SWAP1 POP ADD SWAP2 POP POP PUSH1 0x40 MLOAD DUP1 SWAP2 SUB SWAP1 KECCAK256 DUP2 JUMP JUMPDEST PUSH1 0x0 SLOAD DUP2 JUMP JUMPDEST PUSH2 0x1D5 DUP2 PUSH2 0x1EF JUMP JUMPDEST DUP3 MSTORE POP POP JUMP JUMPDEST PUSH1 0x20 DUP2 ADD PUSH2 0x1E9 DUP3 DUP5 PUSH2 0x1CC JUMP JUMPDEST SWAP3 SWAP2 POP POP JUMP JUMPDEST SWAP1 JUMP STOP LOG2 PUSH6 0x627A7A723058 KECCAK256 SWAP8 0xa5 MUL PUSH17 0x667793D48AA6282DB3F2D165892D34F157 0xe1 SWAP2 0xe7 0xbd 0xe1 0xaa 0x2b 0xbb 0xed PUSH19 0x946C6578706572696D656E74616CF500370000 ",
            "sourceMap": "608:2248:0:-;;;1760:252;8:9:-1;5:2;;;30:1;27;20:12;5:2;-1:-1;1042:132:0;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;22:32:-1;26:21;;;22:32;6:49;;1042:132:0;;;;;;;;1032:143;;1042:132;;;;;1032:143;;;;1042:132;1032:143;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1032:143:0;;;;;;;;;;;;1902:18;;;;;;;;;;;;;;;;1886:36;;1032:143;;-1:-1:-1;1032:143:0;;-1:-1:-1;1886:36:0;;;;-1:-1:-1;1902:18:0;1886:36;1902:18;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1886:36:0;;;;;;;;;;;;1949:21;;;;;274:1:-1;1949:21:0;;;;;;;;;;1933:39;;1886:36;;-1:-1:-1;1886:36:0;;-1:-1:-1;1933:39:0;;;;-1:-1:-1;274:1;1933:39:0;1949:21;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;365:33;;1933:39:0;;;;;;;;;;;1819:186;;;;-1:-1:-1;1933:39:0;-1:-1:-1;1991:4:0;;1819:186;;-1:-1:-1;1819:186:0;;;;;49:4:-1;39:7;30;26:21;22:32;13:7;6:49;1819:186:0;;;1809:197;;;;;;;;;;;;;36:153:-1;66:2;58:11;;36:153;;176:10;;164:23;;-1:-1;;139:12;;;;98:2;89:12;;;;114;36:153;;;299:10;344;;263:2;259:12;;;;254:3;250:22;-1:-1;;246:30;311:9;;295:26;;;340:21;;377:20;;;;365:33;;1809:197:0;;;;;;;;;;-1:-1:-1;1788:218:0;-1:-1:-1;608:2248:0;;-1:-1:-1;;608:2248:0;5:110:-1;78:31;103:5;78:31;;;73:3;66:44;60:55;;;122:110;195:31;220:5;195:31;;239:497;431:3;416:19;;446:61;420:9;480:6;446:61;;;518:62;576:2;565:9;561:18;552:6;518:62;;;591;649:2;638:9;634:18;625:6;591:62;;;664;722:2;711:9;707:18;698:6;664:62;;;402:334;;;;;;;;743:128;-1:-1;;;;;812:54;;795:76;878:79;947:5;930:27;;608:2248:0;;;;;;"
          }
        },
        "metadata": "{\"compiler\":{\"version\":\"0.4.25+commit.59dbf8f1\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[],\"name\":\"EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"EIP712_DOMAIN_HASH\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"}],\"devdoc\":{\"methods\":{}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"reentrancy.sol\":\"LibTransferRequest\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"reentrancy.sol\":{\"content\":\"/**\\n\\n *Submitted for verification at Etherscan.io on 2018-12-12\\n\\n*/\\n\\n\\n\\npragma solidity ^0.4.25;\\n\\npragma experimental ABIEncoderV2;\\n\\n\\n\\ncontract LibSignatureValidation {\\n\\n\\n\\n  using LibBytes for bytes;\\n\\n\\n\\n  function isValidSignature(bytes32 hash, address signerAddress, bytes memory signature) internal pure returns (bool) {\\n\\n    require(signature.length == 65, \\\"LENGTH_65_REQUIRED\\\");\\n\\n    uint8 v = uint8(signature[64]);\\n\\n    bytes32 r = signature.readBytes32(0);\\n\\n    bytes32 s = signature.readBytes32(32);\\n\\n    address recovered = ecrecover(hash, v, r, s);\\n\\n    return signerAddress == recovered;\\n\\n  }\\n\\n}\\n\\n\\n\\ncontract LibTransferRequest {\\n\\n\\n\\n  // EIP191 header for EIP712 prefix\\n\\n  string constant internal EIP191_HEADER = \\\"\\\\x19\\\\x01\\\";\\n\\n  // EIP712 Domain Name value\\n\\n  string constant internal EIP712_DOMAIN_NAME = \\\"Dola Core\\\";\\n\\n  // EIP712 Domain Version value\\n\\n  string constant internal EIP712_DOMAIN_VERSION = \\\"1\\\";\\n\\n  // Hash of the EIP712 Domain Separator Schema\\n\\n  bytes32 public constant EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH = keccak256(abi.encodePacked(\\n\\n    \\\"EIP712Domain(\\\",\\n\\n    \\\"string name,\\\",\\n\\n    \\\"string version,\\\",\\n\\n    \\\"address verifyingContract\\\",\\n\\n    \\\")\\\"\\n\\n  ));\\n\\n\\n\\n  // Hash of the EIP712 Domain Separator data\\n\\n  bytes32 public EIP712_DOMAIN_HASH;\\n\\n\\n\\n  bytes32 constant internal EIP712_TRANSFER_REQUEST_TYPE_HASH = keccak256(abi.encodePacked(\\n\\n    \\\"TransferRequest(\\\",\\n\\n    \\\"address senderAddress,\\\",\\n\\n    \\\"address receiverAddress,\\\",\\n\\n    \\\"uint256 value,\\\",\\n\\n    \\\"address relayerAddress,\\\",\\n\\n    \\\"uint256 relayerFee,\\\",\\n\\n    \\\"uint256 salt,\\\",\\n\\n    \\\")\\\"\\n\\n  ));\\n\\n\\n\\n  struct TransferRequest {\\n\\n    address senderAddress;\\n\\n    address receiverAddress;\\n\\n    uint256 value;\\n\\n    address relayerAddress;\\n\\n    uint256 relayerFee;\\n\\n    uint256 salt;\\n\\n  }\\n\\n\\n\\n  constructor() public {\\n\\n    EIP712_DOMAIN_HASH = keccak256(abi.encode(\\n\\n        EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH,\\n\\n        keccak256(bytes(EIP712_DOMAIN_NAME)),\\n\\n        keccak256(bytes(EIP712_DOMAIN_VERSION)),\\n\\n        address(this)\\n\\n      ));\\n\\n  }\\n\\n\\n\\n  function hashTransferRequest(TransferRequest memory request) internal view returns (bytes32) {\\n\\n    bytes32 typeHash = EIP712_TRANSFER_REQUEST_TYPE_HASH;\\n\\n    bytes32 hashStruct;\\n\\n\\n\\n    // assembly shorthand for:\\n\\n    // bytes32 hashStruct = keccak256(abi.encode(\\n\\n    //    EIP712_TRANSFER_REQUEST_TYPE_HASH,\\n\\n    //    request.senderAddress,\\n\\n    //    request.receiverAddress,\\n\\n    //    request.value,\\n\\n    //    request.relayerAddress,\\n\\n    //    request.relayerFee,\\n\\n    //    request.salt));\\n\\n    assembly {\\n\\n      // Back up select memory\\n\\n      let temp1 := mload(sub(request, 32))\\n\\n\\n\\n      mstore(sub(request, 32), typeHash)\\n\\n      hashStruct := keccak256(sub(request, 32), 224)\\n\\n\\n\\n      mstore(sub(request, 32), temp1)\\n\\n    }\\n\\n    return keccak256(abi.encodePacked(EIP191_HEADER, EIP712_DOMAIN_HASH, hashStruct));\\n\\n  }\\n\\n\\n\\n\\n\\n\\n\\n}\\n\\n\\n\\ncontract DolaCore is LibTransferRequest, LibSignatureValidation {\\n\\n\\n\\n  using LibBytes for bytes;\\n\\n\\n\\n  address public TOKEN_ADDRESS;\\n\\n  mapping (address => mapping (address => uint256)) public requestEpoch;\\n\\n\\n\\n  event TransferRequestFilled(address indexed from, address indexed to);\\n\\n\\n\\n  constructor (address _tokenAddress) public LibTransferRequest() {\\n\\n    TOKEN_ADDRESS = _tokenAddress;\\n\\n  }\\n\\n\\n\\n  function executeTransfer(TransferRequest memory request, bytes memory signature) public {\\n\\n    // make sure the request hasn't been sent already\\n\\n    require(requestEpoch[request.senderAddress][request.relayerAddress] <= request.salt, \\\"REQUEST_INVALID\\\");\\n\\n    // Validate the sender is allowed to execute this transfer\\n\\n    require(request.relayerAddress == msg.sender, \\\"REQUEST_INVALID\\\");\\n\\n    // Validate the sender's signature\\n\\n    bytes32 requestHash = hashTransferRequest(request);\\n\\n    require(isValidSignature(requestHash, request.senderAddress, signature), \\\"INVALID_REQUEST_SIGNATURE\\\");\\n\\n\\n\\n    address tokenAddress = TOKEN_ADDRESS;\\n\\n    assembly {\\n\\n      mstore(32, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n\\n      calldatacopy(36, 4, 96)\\n\\n      let success := call(\\n\\n        gas,            // forward all gas\\n\\n        tokenAddress,   // call address of token contract\\n\\n        0,              // don't send any ETH\\n\\n        32,              // pointer to start of input\\n\\n        100,            // length of input\\n\\n        0,            // write output to far position\\n\\n        32              // output size should be 32 bytes\\n\\n      )\\n\\n      success := and(success, or(\\n\\n          iszero(returndatasize),\\n\\n          and(\\n\\n            eq(returndatasize, 32),\\n\\n            gt(mload(0), 0)\\n\\n          )\\n\\n        ))\\n\\n      if iszero(success) {\\n\\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\\n\\n        mstore(96, 0)\\n\\n        revert(0, 100)\\n\\n      }\\n\\n      calldatacopy(68, 100, 64)\\n\\n      success := call(\\n\\n        gas,            // forward all gas\\n\\n        tokenAddress,   // call address of token contract\\n\\n        0,              // don't send any ETH\\n\\n        32,              // pointer to start of input\\n\\n        100,            // length of input\\n\\n        0,            // write output over input\\n\\n        32              // output size should be 32 bytes\\n\\n      )\\n\\n      success := and(success, or(\\n\\n          iszero(returndatasize),\\n\\n          and(\\n\\n            eq(returndatasize, 32),\\n\\n            gt(mload(0), 0)\\n\\n          )\\n\\n        ))\\n\\n      if iszero(success) {\\n\\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\\n\\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\\n\\n        mstore(96, 0)\\n\\n        revert(0, 100)\\n\\n      }\\n\\n    }\\n\\n\\n\\n    requestEpoch[request.senderAddress][request.relayerAddress] = request.salt + 1;\\n\\n  }\\n\\n}\\n\\n\\n\\nlibrary LibBytes {\\n\\n\\n\\n    using LibBytes for bytes;\\n\\n\\n\\n    /// @dev Gets the memory address for a byte array.\\n\\n    /// @param input Byte array to lookup.\\n\\n    /// @return memoryAddress Memory address of byte array. This\\n\\n    ///         points to the header of the byte array which contains\\n\\n    ///         the length.\\n\\n    function rawAddress(bytes memory input)\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 memoryAddress)\\n\\n    {\\n\\n        assembly {\\n\\n            memoryAddress := input\\n\\n        }\\n\\n        return memoryAddress;\\n\\n    }\\n\\n\\n\\n    /// @dev Gets the memory address for the contents of a byte array.\\n\\n    /// @param input Byte array to lookup.\\n\\n    /// @return memoryAddress Memory address of the contents of the byte array.\\n\\n    function contentAddress(bytes memory input)\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 memoryAddress)\\n\\n    {\\n\\n        assembly {\\n\\n            memoryAddress := add(input, 32)\\n\\n        }\\n\\n        return memoryAddress;\\n\\n    }\\n\\n\\n\\n    /// @dev Copies `length` bytes from memory location `source` to `dest`.\\n\\n    /// @param dest memory address to copy bytes to.\\n\\n    /// @param source memory address to copy bytes from.\\n\\n    /// @param length number of bytes to copy.\\n\\n    function memCopy(\\n\\n        uint256 dest,\\n\\n        uint256 source,\\n\\n        uint256 length\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        if (length < 32) {\\n\\n            // Handle a partial word by reading destination and masking\\n\\n            // off the bits we are interested in.\\n\\n            // This correctly handles overlap, zero lengths and source == dest\\n\\n            assembly {\\n\\n                let mask := sub(exp(256, sub(32, length)), 1)\\n\\n                let s := and(mload(source), not(mask))\\n\\n                let d := and(mload(dest), mask)\\n\\n                mstore(dest, or(s, d))\\n\\n            }\\n\\n        } else {\\n\\n            // Skip the O(length) loop when source == dest.\\n\\n            if (source == dest) {\\n\\n                return;\\n\\n            }\\n\\n\\n\\n            // For large copies we copy whole words at a time. The final\\n\\n            // word is aligned to the end of the range (instead of after the\\n\\n            // previous) to handle partial words. So a copy will look like this:\\n\\n            //\\n\\n            //  ####\\n\\n            //      ####\\n\\n            //          ####\\n\\n            //            ####\\n\\n            //\\n\\n            // We handle overlap in the source and destination range by\\n\\n            // changing the copying direction. This prevents us from\\n\\n            // overwriting parts of source that we still need to copy.\\n\\n            //\\n\\n            // This correctly handles source == dest\\n\\n            //\\n\\n            if (source > dest) {\\n\\n                assembly {\\n\\n                    // We subtract 32 from `sEnd` and `dEnd` because it\\n\\n                    // is easier to compare with in the loop, and these\\n\\n                    // are also the addresses we need for copying the\\n\\n                    // last bytes.\\n\\n                    length := sub(length, 32)\\n\\n                    let sEnd := add(source, length)\\n\\n                    let dEnd := add(dest, length)\\n\\n\\n\\n                    // Remember the last 32 bytes of source\\n\\n                    // This needs to be done here and not after the loop\\n\\n                    // because we may have overwritten the last bytes in\\n\\n                    // source already due to overlap.\\n\\n                    let last := mload(sEnd)\\n\\n\\n\\n                    // Copy whole words front to back\\n\\n                    // Note: the first check is always true,\\n\\n                    // this could have been a do-while loop.\\n\\n                    // solhint-disable-next-line no-empty-blocks\\n\\n                    for {} lt(source, sEnd) {} {\\n\\n                        mstore(dest, mload(source))\\n\\n                        source := add(source, 32)\\n\\n                        dest := add(dest, 32)\\n\\n                    }\\n\\n\\n\\n                    // Write the last 32 bytes\\n\\n                    mstore(dEnd, last)\\n\\n                }\\n\\n            } else {\\n\\n                assembly {\\n\\n                    // We subtract 32 from `sEnd` and `dEnd` because those\\n\\n                    // are the starting points when copying a word at the end.\\n\\n                    length := sub(length, 32)\\n\\n                    let sEnd := add(source, length)\\n\\n                    let dEnd := add(dest, length)\\n\\n\\n\\n                    // Remember the first 32 bytes of source\\n\\n                    // This needs to be done here and not after the loop\\n\\n                    // because we may have overwritten the first bytes in\\n\\n                    // source already due to overlap.\\n\\n                    let first := mload(source)\\n\\n\\n\\n                    // Copy whole words back to front\\n\\n                    // We use a signed comparisson here to allow dEnd to become\\n\\n                    // negative (happens when source and dest < 32). Valid\\n\\n                    // addresses in local memory will never be larger than\\n\\n                    // 2**255, so they can be safely re-interpreted as signed.\\n\\n                    // Note: the first check is always true,\\n\\n                    // this could have been a do-while loop.\\n\\n                    // solhint-disable-next-line no-empty-blocks\\n\\n                    for {} slt(dest, dEnd) {} {\\n\\n                        mstore(dEnd, mload(sEnd))\\n\\n                        sEnd := sub(sEnd, 32)\\n\\n                        dEnd := sub(dEnd, 32)\\n\\n                    }\\n\\n\\n\\n                    // Write the first 32 bytes\\n\\n                    mstore(dest, first)\\n\\n                }\\n\\n            }\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Returns a slices from a byte array.\\n\\n    /// @param b The byte array to take a slice from.\\n\\n    /// @param from The starting index for the slice (inclusive).\\n\\n    /// @param to The final index for the slice (exclusive).\\n\\n    /// @return result The slice containing bytes at indices [from, to)\\n\\n    function slice(\\n\\n        bytes memory b,\\n\\n        uint256 from,\\n\\n        uint256 to\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        require(\\n\\n            from <= to,\\n\\n            \\\"FROM_LESS_THAN_TO_REQUIRED\\\"\\n\\n        );\\n\\n        require(\\n\\n            to < b.length,\\n\\n            \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Create a new bytes structure and copy contents\\n\\n        result = new bytes(to - from);\\n\\n        memCopy(\\n\\n            result.contentAddress(),\\n\\n            b.contentAddress() + from,\\n\\n            result.length);\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Returns a slice from a byte array without preserving the input.\\n\\n    /// @param b The byte array to take a slice from. Will be destroyed in the process.\\n\\n    /// @param from The starting index for the slice (inclusive).\\n\\n    /// @param to The final index for the slice (exclusive).\\n\\n    /// @return result The slice containing bytes at indices [from, to)\\n\\n    /// @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.\\n\\n    function sliceDestructive(\\n\\n        bytes memory b,\\n\\n        uint256 from,\\n\\n        uint256 to\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        require(\\n\\n            from <= to,\\n\\n            \\\"FROM_LESS_THAN_TO_REQUIRED\\\"\\n\\n        );\\n\\n        require(\\n\\n            to < b.length,\\n\\n            \\\"TO_LESS_THAN_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Create a new bytes structure around [from, to) in-place.\\n\\n        assembly {\\n\\n            result := add(b, from)\\n\\n            mstore(result, sub(to, from))\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Pops the last byte off of a byte array by modifying its length.\\n\\n    /// @param b Byte array that will be modified.\\n\\n    /// @return The byte that was popped off.\\n\\n    function popLastByte(bytes memory b)\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes1 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length > 0,\\n\\n            \\\"GREATER_THAN_ZERO_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Store last byte.\\n\\n        result = b[b.length - 1];\\n\\n\\n\\n        assembly {\\n\\n            // Decrement length of byte array.\\n\\n            let newLen := sub(mload(b), 1)\\n\\n            mstore(b, newLen)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Pops the last 20 bytes off of a byte array by modifying its length.\\n\\n    /// @param b Byte array that will be modified.\\n\\n    /// @return The 20 byte address that was popped off.\\n\\n    function popLast20Bytes(bytes memory b)\\n\\n        internal\\n\\n        pure\\n\\n        returns (address result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= 20,\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Store last 20 bytes.\\n\\n        result = readAddress(b, b.length - 20);\\n\\n\\n\\n        assembly {\\n\\n            // Subtract 20 from byte array length.\\n\\n            let newLen := sub(mload(b), 20)\\n\\n            mstore(b, newLen)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Tests equality of two byte arrays.\\n\\n    /// @param lhs First byte array to compare.\\n\\n    /// @param rhs Second byte array to compare.\\n\\n    /// @return True if arrays are the same. False otherwise.\\n\\n    function equals(\\n\\n        bytes memory lhs,\\n\\n        bytes memory rhs\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bool equal)\\n\\n    {\\n\\n        // Keccak gas cost is 30 + numWords * 6. This is a cheap way to compare.\\n\\n        // We early exit on unequal lengths, but keccak would also correctly\\n\\n        // handle this.\\n\\n        return lhs.length == rhs.length && keccak256(lhs) == keccak256(rhs);\\n\\n    }\\n\\n\\n\\n    /// @dev Reads an address from a position in a byte array.\\n\\n    /// @param b Byte array containing an address.\\n\\n    /// @param index Index in byte array of address.\\n\\n    /// @return address from byte array.\\n\\n    function readAddress(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (address result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 20,  // 20 is length of address\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Add offset to index:\\n\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n\\n        index += 20;\\n\\n\\n\\n        // Read address from array memory\\n\\n        assembly {\\n\\n            // 1. Add index to address of bytes array\\n\\n            // 2. Load 32-byte word from memory\\n\\n            // 3. Apply 20-byte mask to obtain address\\n\\n            result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Writes an address into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert address into.\\n\\n    /// @param index Index in byte array of address.\\n\\n    /// @param input Address to put into byte array.\\n\\n    function writeAddress(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        address input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 20,  // 20 is length of address\\n\\n            \\\"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Add offset to index:\\n\\n        // 1. Arrays are prefixed by 32-byte length parameter (add 32 to index)\\n\\n        // 2. Account for size difference between address length and 32-byte storage word (subtract 12 from index)\\n\\n        index += 20;\\n\\n\\n\\n        // Store address into array memory\\n\\n        assembly {\\n\\n            // The address occupies 20 bytes and mstore stores 32 bytes.\\n\\n            // First fetch the 32-byte word where we'll be storing the address, then\\n\\n            // apply a mask so we have only the bytes in the word that the address will not occupy.\\n\\n            // Then combine these bytes with the address and store the 32 bytes back to memory with mstore.\\n\\n\\n\\n            // 1. Add index to address of bytes array\\n\\n            // 2. Load 32-byte word from memory\\n\\n            // 3. Apply 12-byte mask to obtain extra bytes occupying word of memory where we'll store the address\\n\\n            let neighbors := and(\\n\\n                mload(add(b, index)),\\n\\n                0xffffffffffffffffffffffff0000000000000000000000000000000000000000\\n\\n            )\\n\\n\\n\\n            // Make sure input address is clean.\\n\\n            // (Solidity does not guarantee this)\\n\\n            input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\\n\\n\\n\\n            // Store the neighbors and address into memory\\n\\n            mstore(add(b, index), xor(input, neighbors))\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Reads a bytes32 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a bytes32 value.\\n\\n    /// @param index Index in byte array of bytes32 value.\\n\\n    /// @return bytes32 value from byte array.\\n\\n    function readBytes32(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes32 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 32,\\n\\n            \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n\\n        index += 32;\\n\\n\\n\\n        // Read the bytes32 from array memory\\n\\n        assembly {\\n\\n            result := mload(add(b, index))\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Writes a bytes32 into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input bytes32 to put into byte array.\\n\\n    function writeBytes32(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        bytes32 input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 32,\\n\\n            \\\"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Arrays are prefixed by a 256 bit length parameter\\n\\n        index += 32;\\n\\n\\n\\n        // Read the bytes32 from array memory\\n\\n        assembly {\\n\\n            mstore(add(b, index), input)\\n\\n        }\\n\\n    }\\n\\n\\n\\n    /// @dev Reads a uint256 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a uint256 value.\\n\\n    /// @param index Index in byte array of uint256 value.\\n\\n    /// @return uint256 value from byte array.\\n\\n    function readUint256(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (uint256 result)\\n\\n    {\\n\\n        return uint256(readBytes32(b, index));\\n\\n    }\\n\\n\\n\\n    /// @dev Writes a uint256 into a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input uint256 to put into byte array.\\n\\n    function writeUint256(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        uint256 input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        writeBytes32(b, index, bytes32(input));\\n\\n    }\\n\\n\\n\\n    /// @dev Reads an unpadded bytes4 value from a position in a byte array.\\n\\n    /// @param b Byte array containing a bytes4 value.\\n\\n    /// @param index Index in byte array of bytes4 value.\\n\\n    /// @return bytes4 value from byte array.\\n\\n    function readBytes4(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes4 result)\\n\\n    {\\n\\n        require(\\n\\n            b.length >= index + 4,\\n\\n            \\\"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n        assembly {\\n\\n            result := mload(add(b, 32))\\n\\n            // Solidity does not require us to clean the trailing bytes.\\n\\n            // We do it anyway\\n\\n            result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Reads nested bytes from a specific position.\\n\\n    /// @dev NOTE: the returned value overlaps with the input value.\\n\\n    ///            Both should be treated as immutable.\\n\\n    /// @param b Byte array containing nested bytes.\\n\\n    /// @param index Index of nested bytes.\\n\\n    /// @return result Nested bytes.\\n\\n    function readBytesWithLength(\\n\\n        bytes memory b,\\n\\n        uint256 index\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n        returns (bytes memory result)\\n\\n    {\\n\\n        // Read length of nested bytes\\n\\n        uint256 nestedBytesLength = readUint256(b, index);\\n\\n        index += 32;\\n\\n\\n\\n        // Assert length of <b> is valid, given\\n\\n        // length of nested bytes\\n\\n        require(\\n\\n            b.length >= index + nestedBytesLength,\\n\\n            \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Return a pointer to the byte array as it exists inside `b`\\n\\n        assembly {\\n\\n            result := add(b, index)\\n\\n        }\\n\\n        return result;\\n\\n    }\\n\\n\\n\\n    /// @dev Inserts bytes at a specific position in a byte array.\\n\\n    /// @param b Byte array to insert <input> into.\\n\\n    /// @param index Index in byte array of <input>.\\n\\n    /// @param input bytes to insert.\\n\\n    function writeBytesWithLength(\\n\\n        bytes memory b,\\n\\n        uint256 index,\\n\\n        bytes memory input\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        // Assert length of <b> is valid, given\\n\\n        // length of input\\n\\n        require(\\n\\n            b.length >= index + 32 + input.length,  // 32 bytes to store length\\n\\n            \\\"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n\\n\\n        // Copy <input> into <b>\\n\\n        memCopy(\\n\\n            b.contentAddress() + index,\\n\\n            input.rawAddress(), // includes length of <input>\\n\\n            input.length + 32   // +32 bytes to store <input> length\\n\\n        );\\n\\n    }\\n\\n\\n\\n    /// @dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\\n\\n    /// @param dest Byte array that will be overwritten with source bytes.\\n\\n    /// @param source Byte array to copy onto dest bytes.\\n\\n    function deepCopyBytes(\\n\\n        bytes memory dest,\\n\\n        bytes memory source\\n\\n    )\\n\\n        internal\\n\\n        pure\\n\\n    {\\n\\n        uint256 sourceLen = source.length;\\n\\n        // Dest length must be >= source length, or some bytes would not be copied.\\n\\n        require(\\n\\n            dest.length >= sourceLen,\\n\\n            \\\"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\\\"\\n\\n        );\\n\\n        memCopy(\\n\\n            dest.contentAddress(),\\n\\n            source.contentAddress(),\\n\\n            sourceLen\\n\\n        );\\n\\n    }\\n\\n}\",\"keccak256\":\"0x60c88337663b53dfb75dc43a53ed27d5ec2a198489c19caf51be647f0489acf0\"}},\"version\":1}"
      }
    }
  },
  "errors": [
    {
      "component": "general",
      "formattedMessage": "reentrancy.sol:11:1: Warning: Experimental features are turned on. Do not use experimental features on live deployments.\npragma experimental ABIEncoderV2;\n^-------------------------------^\n",
      "message": "Experimental features are turned on. Do not use experimental features on live deployments.",
      "severity": "warning",
      "sourceLocation": {
        "end": 130,
        "file": "reentrancy.sol",
        "start": 97
      },
      "type": "Warning"
    }
  ],
  "sources": {
    "reentrancy": {
      "ast": {
        "absolutePath": "reentrancy",
        "exportedSymbols": {
          "DolaCore": [
            263
          ],
          "LibBytes": [
            747
          ],
          "LibSignatureValidation": [
            61
          ],
          "LibTransferRequest": [
            164
          ]
        },
        "id": 748,
        "nodeType": "SourceUnit",
        "nodes": [
          {
            "id": 1,
            "literals": [
              "solidity",
              "^",
              "0.4",
              ".25"
            ],
            "nodeType": "PragmaDirective",
            "src": "71:24:0"
          },
          {
            "id": 2,
            "literals": [
              "experimental",
              "ABIEncoderV2"
            ],
            "nodeType": "PragmaDirective",
            "src": "97:33:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 61,
            "linearizedBaseContracts": [
              61
            ],
            "name": "LibSignatureValidation",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 5,
                "libraryName": {
                  "contractScope": null,
                  "id": 3,
                  "name": "LibBytes",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 747,
                  "src": "179:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_LibBytes_$747",
                    "typeString": "library LibBytes"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "173:25:0",
                "typeName": {
                  "id": 4,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "192:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                }
              },
              {
                "body": {
                  "id": 59,
                  "nodeType": "Block",
                  "src": "320:281:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 20,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 17,
                                "name": "signature",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 11,
                                "src": "335:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 18,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "335:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "3635",
                              "id": 19,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "355:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_65_by_1",
                                "typeString": "int_const 65"
                              },
                              "value": "65"
                            },
                            "src": "335:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "4c454e4754485f36355f5245515549524544",
                            "id": 21,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "359:20:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_024a7a66bc4464a7341baebd243328b46def44f6001996c320f7f7ea41913014",
                              "typeString": "literal_string \"LENGTH_65_REQUIRED\""
                            },
                            "value": "LENGTH_65_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_024a7a66bc4464a7341baebd243328b46def44f6001996c320f7f7ea41913014",
                              "typeString": "literal_string \"LENGTH_65_REQUIRED\""
                            }
                          ],
                          "id": 16,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "327:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 22,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "327:53:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 23,
                      "nodeType": "ExpressionStatement",
                      "src": "327:53:0"
                    },
                    {
                      "assignments": [
                        25
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 25,
                          "name": "v",
                          "nodeType": "VariableDeclaration",
                          "scope": 60,
                          "src": "387:7:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint8",
                            "typeString": "uint8"
                          },
                          "typeName": {
                            "id": 24,
                            "name": "uint8",
                            "nodeType": "ElementaryTypeName",
                            "src": "387:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 31,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 27,
                              "name": "signature",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 11,
                              "src": "403:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 29,
                            "indexExpression": {
                              "argumentTypes": null,
                              "hexValue": "3634",
                              "id": 28,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "413:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_64_by_1",
                                "typeString": "int_const 64"
                              },
                              "value": "64"
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "403:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes1",
                              "typeString": "bytes1"
                            }
                          ],
                          "id": 26,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "397:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint8_$",
                            "typeString": "type(uint8)"
                          },
                          "typeName": "uint8"
                        },
                        "id": 30,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "397:20:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint8",
                          "typeString": "uint8"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "387:30:0"
                    },
                    {
                      "assignments": [
                        33
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 33,
                          "name": "r",
                          "nodeType": "VariableDeclaration",
                          "scope": 60,
                          "src": "424:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "typeName": {
                            "id": 32,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "424:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 38,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "30",
                            "id": 36,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "458:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            },
                            "value": "0"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_0_by_1",
                              "typeString": "int_const 0"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 34,
                            "name": "signature",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "436:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 35,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "readBytes32",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 560,
                          "src": "436:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes memory,uint256) pure returns (bytes32)"
                          }
                        },
                        "id": 37,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "436:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "424:36:0"
                    },
                    {
                      "assignments": [
                        40
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 40,
                          "name": "s",
                          "nodeType": "VariableDeclaration",
                          "scope": 60,
                          "src": "467:9:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "typeName": {
                            "id": 39,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "467:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 45,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "hexValue": "3332",
                            "id": 43,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "501:2:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_32_by_1",
                              "typeString": "int_const 32"
                            },
                            "value": "32"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_rational_32_by_1",
                              "typeString": "int_const 32"
                            }
                          ],
                          "expression": {
                            "argumentTypes": null,
                            "id": 41,
                            "name": "signature",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 11,
                            "src": "479:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 42,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "memberName": "readBytes32",
                          "nodeType": "MemberAccess",
                          "referencedDeclaration": 560,
                          "src": "479:21:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$bound_to$_t_bytes_memory_ptr_$",
                            "typeString": "function (bytes memory,uint256) pure returns (bytes32)"
                          }
                        },
                        "id": 44,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "479:25:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "467:37:0"
                    },
                    {
                      "assignments": [
                        47
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 47,
                          "name": "recovered",
                          "nodeType": "VariableDeclaration",
                          "scope": 60,
                          "src": "511:17:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 46,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "511:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 54,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 49,
                            "name": "hash",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 7,
                            "src": "541:4:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 50,
                            "name": "v",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 25,
                            "src": "547:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 51,
                            "name": "r",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 33,
                            "src": "550:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 52,
                            "name": "s",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 40,
                            "src": "553:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_uint8",
                              "typeString": "uint8"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 48,
                          "name": "ecrecover",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 754,
                          "src": "531:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_ecrecover_pure$_t_bytes32_$_t_uint8_$_t_bytes32_$_t_bytes32_$returns$_t_address_$",
                            "typeString": "function (bytes32,uint8,bytes32,bytes32) pure returns (address)"
                          }
                        },
                        "id": 53,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "531:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "511:44:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        },
                        "id": 57,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 55,
                          "name": "signerAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 9,
                          "src": "569:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "==",
                        "rightExpression": {
                          "argumentTypes": null,
                          "id": 56,
                          "name": "recovered",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 47,
                          "src": "586:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "569:26:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 15,
                      "id": 58,
                      "nodeType": "Return",
                      "src": "562:33:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 60,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "isValidSignature",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 12,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 7,
                      "name": "hash",
                      "nodeType": "VariableDeclaration",
                      "scope": 60,
                      "src": "230:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 6,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "230:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 9,
                      "name": "signerAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 60,
                      "src": "244:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 8,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "244:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 11,
                      "name": "signature",
                      "nodeType": "VariableDeclaration",
                      "scope": 60,
                      "src": "267:22:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 10,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "267:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "229:61:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 15,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 14,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 60,
                      "src": "314:4:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 13,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "314:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "313:6:0"
                },
                "scope": 61,
                "src": "204:397:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 748,
            "src": "134:470:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 164,
            "linearizedBaseContracts": [
              164
            ],
            "name": "LibTransferRequest",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "constant": true,
                "id": 64,
                "name": "EIP191_HEADER",
                "nodeType": "VariableDeclaration",
                "scope": 164,
                "src": "681:51:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 62,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "681:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "1901",
                  "id": 63,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "722:10:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_301a50b291d33ce1e8e9064e3f6a6c51d902ec22892b50d58abf6357c6a45541",
                    "typeString": "literal_string \"\u0019\u0001\""
                  },
                  "value": "\u0019\u0001"
                },
                "visibility": "internal"
              },
              {
                "constant": true,
                "id": 67,
                "name": "EIP712_DOMAIN_NAME",
                "nodeType": "VariableDeclaration",
                "scope": 164,
                "src": "768:57:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 65,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "768:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "446f6c6120436f7265",
                  "id": 66,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "814:11:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_30d751f4005932b27e89fa07a75f353f46d6621f1427fbad10668d4130bd3ca4",
                    "typeString": "literal_string \"Dola Core\""
                  },
                  "value": "Dola Core"
                },
                "visibility": "internal"
              },
              {
                "constant": true,
                "id": 70,
                "name": "EIP712_DOMAIN_VERSION",
                "nodeType": "VariableDeclaration",
                "scope": 164,
                "src": "864:52:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_string_memory",
                  "typeString": "string"
                },
                "typeName": {
                  "id": 68,
                  "name": "string",
                  "nodeType": "ElementaryTypeName",
                  "src": "864:6:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_string_storage_ptr",
                    "typeString": "string"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "hexValue": "31",
                  "id": 69,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "string",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "913:3:0",
                  "subdenomination": null,
                  "typeDescriptions": {
                    "typeIdentifier": "t_stringliteral_c89efdaa54c0f20c7adf612882df0950f5a951637e0307cdcb4c672f298b8bc6",
                    "typeString": "literal_string \"1\""
                  },
                  "value": "1"
                },
                "visibility": "internal"
              },
              {
                "constant": true,
                "id": 82,
                "name": "EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH",
                "nodeType": "VariableDeclaration",
                "scope": 164,
                "src": "970:205:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 71,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "970:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "arguments": [
                    {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "454950373132446f6d61696e28",
                          "id": 75,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1065:15:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_de06c25f21a371a1bc92887b399d179e16db7e78ff9780730d4f2f1217f0227a",
                            "typeString": "literal_string \"EIP712Domain(\""
                          },
                          "value": "EIP712Domain("
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "737472696e67206e616d652c",
                          "id": 76,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1087:14:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_0376df606842aeeddf95ba5db6e827bf40e254b68db9531357ede6679d404597",
                            "typeString": "literal_string \"string name,\""
                          },
                          "value": "string name,"
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "737472696e672076657273696f6e2c",
                          "id": 77,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1108:17:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_59f8a695163fe72b45680abd680645bb66c8df0e236a50c4f8a610af2d5a606c",
                            "typeString": "literal_string \"string version,\""
                          },
                          "value": "string version,"
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "6164647265737320766572696679696e67436f6e7472616374",
                          "id": 78,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1132:27:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_40ab939a78baf41674810042aff4b66e1c8507c1fbb0af0c7e28dc4250f2dd9b",
                            "typeString": "literal_string \"address verifyingContract\""
                          },
                          "value": "address verifyingContract"
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "29",
                          "id": 79,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1166:3:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed",
                            "typeString": "literal_string \")\""
                          },
                          "value": ")"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_de06c25f21a371a1bc92887b399d179e16db7e78ff9780730d4f2f1217f0227a",
                            "typeString": "literal_string \"EIP712Domain(\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_0376df606842aeeddf95ba5db6e827bf40e254b68db9531357ede6679d404597",
                            "typeString": "literal_string \"string name,\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_59f8a695163fe72b45680abd680645bb66c8df0e236a50c4f8a610af2d5a606c",
                            "typeString": "literal_string \"string version,\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_40ab939a78baf41674810042aff4b66e1c8507c1fbb0af0c7e28dc4250f2dd9b",
                            "typeString": "literal_string \"address verifyingContract\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed",
                            "typeString": "literal_string \")\""
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 73,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 749,
                          "src": "1042:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 74,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "encodePacked",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1042:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 80,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1042:132:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    ],
                    "id": 72,
                    "name": "keccak256",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 756,
                    "src": "1032:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                      "typeString": "function () pure returns (bytes32)"
                    }
                  },
                  "id": 81,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "1032:143:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 84,
                "name": "EIP712_DOMAIN_HASH",
                "nodeType": "VariableDeclaration",
                "scope": 164,
                "src": "1229:33:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 83,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1229:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": true,
                "id": 99,
                "name": "EIP712_TRANSFER_REQUEST_TYPE_HASH",
                "nodeType": "VariableDeclaration",
                "scope": 164,
                "src": "1269:298:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                },
                "typeName": {
                  "id": 85,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1269:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "value": {
                  "argumentTypes": null,
                  "arguments": [
                    {
                      "argumentTypes": null,
                      "arguments": [
                        {
                          "argumentTypes": null,
                          "hexValue": "5472616e736665725265717565737428",
                          "id": 89,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1364:18:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_f7bc063914d08afa204d2f55267fc1c65b790448c8121d0927fb6965dd49c96c",
                            "typeString": "literal_string \"TransferRequest(\""
                          },
                          "value": "TransferRequest("
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "616464726573732073656e646572416464726573732c",
                          "id": 90,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1389:24:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_2b22b1cebda17126b7e2811dd8ebe1ddfe797a62c0da88b3560b631948c59023",
                            "typeString": "literal_string \"address senderAddress,\""
                          },
                          "value": "address senderAddress,"
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "61646472657373207265636569766572416464726573732c",
                          "id": 91,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1420:26:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_05f656ee08dccb10386ef937eb86f5e280442082d2de6a07952292344fe6d691",
                            "typeString": "literal_string \"address receiverAddress,\""
                          },
                          "value": "address receiverAddress,"
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "75696e743235362076616c75652c",
                          "id": 92,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1453:16:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_ce50160812b702c9ef79c4446ed108ab23862f593c81f88fa954652029bd21c1",
                            "typeString": "literal_string \"uint256 value,\""
                          },
                          "value": "uint256 value,"
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "616464726573732072656c61796572416464726573732c",
                          "id": 93,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1476:25:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_7a669c03059743476ee497d69da02523bbff8f3345190d3b95a156f3ebfe8f97",
                            "typeString": "literal_string \"address relayerAddress,\""
                          },
                          "value": "address relayerAddress,"
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "75696e743235362072656c617965724665652c",
                          "id": 94,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1508:21:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_e3b5c6aaae96b07295e441c8043cb0e3d951545e18a7eced176c13b1762df7d8",
                            "typeString": "literal_string \"uint256 relayerFee,\""
                          },
                          "value": "uint256 relayerFee,"
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "75696e743235362073616c742c",
                          "id": 95,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1536:15:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_7afce5645cc56fac870e2fe75e80ac27df3fcb6cd3912779279ab14e789c90b9",
                            "typeString": "literal_string \"uint256 salt,\""
                          },
                          "value": "uint256 salt,"
                        },
                        {
                          "argumentTypes": null,
                          "hexValue": "29",
                          "id": 96,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "string",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "1558:3:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed",
                            "typeString": "literal_string \")\""
                          },
                          "value": ")"
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_stringliteral_f7bc063914d08afa204d2f55267fc1c65b790448c8121d0927fb6965dd49c96c",
                            "typeString": "literal_string \"TransferRequest(\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_2b22b1cebda17126b7e2811dd8ebe1ddfe797a62c0da88b3560b631948c59023",
                            "typeString": "literal_string \"address senderAddress,\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_05f656ee08dccb10386ef937eb86f5e280442082d2de6a07952292344fe6d691",
                            "typeString": "literal_string \"address receiverAddress,\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_ce50160812b702c9ef79c4446ed108ab23862f593c81f88fa954652029bd21c1",
                            "typeString": "literal_string \"uint256 value,\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_7a669c03059743476ee497d69da02523bbff8f3345190d3b95a156f3ebfe8f97",
                            "typeString": "literal_string \"address relayerAddress,\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_e3b5c6aaae96b07295e441c8043cb0e3d951545e18a7eced176c13b1762df7d8",
                            "typeString": "literal_string \"uint256 relayerFee,\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_7afce5645cc56fac870e2fe75e80ac27df3fcb6cd3912779279ab14e789c90b9",
                            "typeString": "literal_string \"uint256 salt,\""
                          },
                          {
                            "typeIdentifier": "t_stringliteral_59d76dc3b33357eda30db1508968fbb18f21b9cd2442f1559b20154ddaa4d7ed",
                            "typeString": "literal_string \")\""
                          }
                        ],
                        "expression": {
                          "argumentTypes": null,
                          "id": 87,
                          "name": "abi",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 749,
                          "src": "1341:3:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_magic_abi",
                            "typeString": "abi"
                          }
                        },
                        "id": 88,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "memberName": "encodePacked",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "1341:16:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                          "typeString": "function () pure returns (bytes memory)"
                        }
                      },
                      "id": 97,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": true,
                      "kind": "functionCall",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1341:225:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    }
                  ],
                  "expression": {
                    "argumentTypes": [
                      {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes memory"
                      }
                    ],
                    "id": 86,
                    "name": "keccak256",
                    "nodeType": "Identifier",
                    "overloadedDeclarations": [],
                    "referencedDeclaration": 756,
                    "src": "1331:9:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                      "typeString": "function () pure returns (bytes32)"
                    }
                  },
                  "id": 98,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "functionCall",
                  "lValueRequested": false,
                  "names": [],
                  "nodeType": "FunctionCall",
                  "src": "1331:236:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "visibility": "internal"
              },
              {
                "canonicalName": "LibTransferRequest.TransferRequest",
                "id": 112,
                "members": [
                  {
                    "constant": false,
                    "id": 101,
                    "name": "senderAddress",
                    "nodeType": "VariableDeclaration",
                    "scope": 112,
                    "src": "1604:21:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 100,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1604:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 103,
                    "name": "receiverAddress",
                    "nodeType": "VariableDeclaration",
                    "scope": 112,
                    "src": "1632:23:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 102,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1632:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 105,
                    "name": "value",
                    "nodeType": "VariableDeclaration",
                    "scope": 112,
                    "src": "1662:13:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 104,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1662:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 107,
                    "name": "relayerAddress",
                    "nodeType": "VariableDeclaration",
                    "scope": 112,
                    "src": "1682:22:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    },
                    "typeName": {
                      "id": 106,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "1682:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 109,
                    "name": "relayerFee",
                    "nodeType": "VariableDeclaration",
                    "scope": 112,
                    "src": "1711:18:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 108,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1711:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  },
                  {
                    "constant": false,
                    "id": 111,
                    "name": "salt",
                    "nodeType": "VariableDeclaration",
                    "scope": 112,
                    "src": "1736:12:0",
                    "stateVariable": false,
                    "storageLocation": "default",
                    "typeDescriptions": {
                      "typeIdentifier": "t_uint256",
                      "typeString": "uint256"
                    },
                    "typeName": {
                      "id": 110,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "1736:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    },
                    "value": null,
                    "visibility": "internal"
                  }
                ],
                "name": "TransferRequest",
                "nodeType": "StructDefinition",
                "scope": 164,
                "src": "1574:180:0",
                "visibility": "public"
              },
              {
                "body": {
                  "id": 137,
                  "nodeType": "Block",
                  "src": "1781:231:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 135,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 115,
                          "name": "EIP712_DOMAIN_HASH",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 84,
                          "src": "1788:18:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "arguments": [
                                {
                                  "argumentTypes": null,
                                  "id": 119,
                                  "name": "EIP712_DOMAIN_SEPARATOR_SCHEMA_HASH",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 82,
                                  "src": "1840:35:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "id": 122,
                                          "name": "EIP712_DOMAIN_NAME",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 67,
                                          "src": "1902:18:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_memory",
                                            "typeString": "string memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_memory",
                                            "typeString": "string memory"
                                          }
                                        ],
                                        "id": 121,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "1896:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                          "typeString": "type(bytes storage pointer)"
                                        },
                                        "typeName": "bytes"
                                      },
                                      "id": 123,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1896:25:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 120,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 756,
                                    "src": "1886:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                                      "typeString": "function () pure returns (bytes32)"
                                    }
                                  },
                                  "id": 124,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1886:36:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "arguments": [
                                        {
                                          "argumentTypes": null,
                                          "id": 127,
                                          "name": "EIP712_DOMAIN_VERSION",
                                          "nodeType": "Identifier",
                                          "overloadedDeclarations": [],
                                          "referencedDeclaration": 70,
                                          "src": "1949:21:0",
                                          "typeDescriptions": {
                                            "typeIdentifier": "t_string_memory",
                                            "typeString": "string memory"
                                          }
                                        }
                                      ],
                                      "expression": {
                                        "argumentTypes": [
                                          {
                                            "typeIdentifier": "t_string_memory",
                                            "typeString": "string memory"
                                          }
                                        ],
                                        "id": 126,
                                        "isConstant": false,
                                        "isLValue": false,
                                        "isPure": true,
                                        "lValueRequested": false,
                                        "nodeType": "ElementaryTypeNameExpression",
                                        "src": "1943:5:0",
                                        "typeDescriptions": {
                                          "typeIdentifier": "t_type$_t_bytes_storage_ptr_$",
                                          "typeString": "type(bytes storage pointer)"
                                        },
                                        "typeName": "bytes"
                                      },
                                      "id": 128,
                                      "isConstant": false,
                                      "isLValue": false,
                                      "isPure": true,
                                      "kind": "typeConversion",
                                      "lValueRequested": false,
                                      "names": [],
                                      "nodeType": "FunctionCall",
                                      "src": "1943:28:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_bytes_memory",
                                        "typeString": "bytes memory"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_bytes_memory",
                                        "typeString": "bytes memory"
                                      }
                                    ],
                                    "id": 125,
                                    "name": "keccak256",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 756,
                                    "src": "1933:9:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                                      "typeString": "function () pure returns (bytes32)"
                                    }
                                  },
                                  "id": 129,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "functionCall",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1933:39:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  }
                                },
                                {
                                  "argumentTypes": null,
                                  "arguments": [
                                    {
                                      "argumentTypes": null,
                                      "id": 131,
                                      "name": "this",
                                      "nodeType": "Identifier",
                                      "overloadedDeclarations": [],
                                      "referencedDeclaration": 777,
                                      "src": "1991:4:0",
                                      "typeDescriptions": {
                                        "typeIdentifier": "t_contract$_LibTransferRequest_$164",
                                        "typeString": "contract LibTransferRequest"
                                      }
                                    }
                                  ],
                                  "expression": {
                                    "argumentTypes": [
                                      {
                                        "typeIdentifier": "t_contract$_LibTransferRequest_$164",
                                        "typeString": "contract LibTransferRequest"
                                      }
                                    ],
                                    "id": 130,
                                    "isConstant": false,
                                    "isLValue": false,
                                    "isPure": true,
                                    "lValueRequested": false,
                                    "nodeType": "ElementaryTypeNameExpression",
                                    "src": "1983:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_type$_t_address_$",
                                      "typeString": "type(address)"
                                    },
                                    "typeName": "address"
                                  },
                                  "id": 132,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": false,
                                  "kind": "typeConversion",
                                  "lValueRequested": false,
                                  "names": [],
                                  "nodeType": "FunctionCall",
                                  "src": "1983:13:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                }
                              ],
                              "expression": {
                                "argumentTypes": [
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  {
                                    "typeIdentifier": "t_bytes32",
                                    "typeString": "bytes32"
                                  },
                                  {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                ],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 117,
                                  "name": "abi",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 749,
                                  "src": "1819:3:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_magic_abi",
                                    "typeString": "abi"
                                  }
                                },
                                "id": 118,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "lValueRequested": false,
                                "memberName": "encode",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "1819:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_abiencode_pure$__$returns$_t_bytes_memory_ptr_$",
                                  "typeString": "function () pure returns (bytes memory)"
                                }
                              },
                              "id": 133,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "1819:186:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            ],
                            "id": 116,
                            "name": "keccak256",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 756,
                            "src": "1809:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                              "typeString": "function () pure returns (bytes32)"
                            }
                          },
                          "id": 134,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "1809:197:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          }
                        },
                        "src": "1788:218:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "id": 136,
                      "nodeType": "ExpressionStatement",
                      "src": "1788:218:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 138,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 113,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1771:2:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 114,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "1781:0:0"
                },
                "scope": 164,
                "src": "1760:252:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 162,
                  "nodeType": "Block",
                  "src": "2111:736:0",
                  "statements": [
                    {
                      "assignments": [
                        146
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 146,
                          "name": "typeHash",
                          "nodeType": "VariableDeclaration",
                          "scope": 163,
                          "src": "2118:16:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "typeName": {
                            "id": 145,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "2118:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 148,
                      "initialValue": {
                        "argumentTypes": null,
                        "id": 147,
                        "name": "EIP712_TRANSFER_REQUEST_TYPE_HASH",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 99,
                        "src": "2137:33:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2118:52:0"
                    },
                    {
                      "assignments": [],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 150,
                          "name": "hashStruct",
                          "nodeType": "VariableDeclaration",
                          "scope": 163,
                          "src": "2177:18:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "typeName": {
                            "id": 149,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "2177:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 151,
                      "initialValue": null,
                      "nodeType": "VariableDeclarationStatement",
                      "src": "2177:18:0"
                    },
                    {
                      "externalReferences": [
                        {
                          "typeHash": {
                            "declaration": 146,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2643:8:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "request": {
                            "declaration": 140,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2595:7:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "request": {
                            "declaration": 140,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2629:7:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "request": {
                            "declaration": 140,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2727:7:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "hashStruct": {
                            "declaration": 150,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2660:10:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "request": {
                            "declaration": 140,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "2688:7:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 152,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    let temp1 := mload(sub(request, 32))\n    mstore(sub(request, 32), typeHash)\n    hashStruct := keccak256(sub(request, 32), 224)\n    mstore(sub(request, 32), temp1)\n}",
                      "src": "2522:244:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 156,
                                "name": "EIP191_HEADER",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 64,
                                "src": "2794:13:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_string_memory",
                                  "typeString": "string memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 157,
                                "name": "EIP712_DOMAIN_HASH",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 84,
                                "src": "2809:18:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 158,
                                "name": "hashStruct",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 150,
                                "src": "2829:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_string_memory",
                                  "typeString": "string memory"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              ],
                              "expression": {
                                "argumentTypes": null,
                                "id": 154,
                                "name": "abi",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 749,
                                "src": "2777:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_abi",
                                  "typeString": "abi"
                                }
                              },
                              "id": 155,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "memberName": "encodePacked",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "2777:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_abiencodepacked_pure$__$returns$_t_bytes_memory_ptr_$",
                                "typeString": "function () pure returns (bytes memory)"
                              }
                            },
                            "id": 159,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "2777:63:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          ],
                          "id": 153,
                          "name": "keccak256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 756,
                          "src": "2767:9:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                            "typeString": "function () pure returns (bytes32)"
                          }
                        },
                        "id": 160,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "2767:74:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "functionReturnParameters": 144,
                      "id": 161,
                      "nodeType": "Return",
                      "src": "2760:81:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 163,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "hashTransferRequest",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 141,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 140,
                      "name": "request",
                      "nodeType": "VariableDeclaration",
                      "scope": 163,
                      "src": "2047:30:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                        "typeString": "struct LibTransferRequest.TransferRequest"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 139,
                        "name": "TransferRequest",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 112,
                        "src": "2047:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TransferRequest_$112_storage_ptr",
                          "typeString": "struct LibTransferRequest.TransferRequest"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2046:32:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 144,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 143,
                      "name": "",
                      "nodeType": "VariableDeclaration",
                      "scope": 163,
                      "src": "2102:7:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 142,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "2102:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "2101:9:0"
                },
                "scope": 164,
                "src": "2018:829:0",
                "stateMutability": "view",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 748,
            "src": "608:2248:0"
          },
          {
            "baseContracts": [
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 165,
                  "name": "LibTransferRequest",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 164,
                  "src": "2881:18:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_LibTransferRequest_$164",
                    "typeString": "contract LibTransferRequest"
                  }
                },
                "id": 166,
                "nodeType": "InheritanceSpecifier",
                "src": "2881:18:0"
              },
              {
                "arguments": null,
                "baseName": {
                  "contractScope": null,
                  "id": 167,
                  "name": "LibSignatureValidation",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 61,
                  "src": "2901:22:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_LibSignatureValidation_$61",
                    "typeString": "contract LibSignatureValidation"
                  }
                },
                "id": 168,
                "nodeType": "InheritanceSpecifier",
                "src": "2901:22:0"
              }
            ],
            "contractDependencies": [
              164,
              61
            ],
            "contractKind": "contract",
            "documentation": null,
            "fullyImplemented": true,
            "id": 263,
            "linearizedBaseContracts": [
              263,
              61,
              164
            ],
            "name": "DolaCore",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 171,
                "libraryName": {
                  "contractScope": null,
                  "id": 169,
                  "name": "LibBytes",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 747,
                  "src": "2937:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_LibBytes_$747",
                    "typeString": "library LibBytes"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "2931:25:0",
                "typeName": {
                  "id": 170,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "2950:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                }
              },
              {
                "constant": false,
                "id": 173,
                "name": "TOKEN_ADDRESS",
                "nodeType": "VariableDeclaration",
                "scope": 263,
                "src": "2962:28:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_address",
                  "typeString": "address"
                },
                "typeName": {
                  "id": 172,
                  "name": "address",
                  "nodeType": "ElementaryTypeName",
                  "src": "2962:7:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_address",
                    "typeString": "address"
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "constant": false,
                "id": 179,
                "name": "requestEpoch",
                "nodeType": "VariableDeclaration",
                "scope": 263,
                "src": "2995:69:0",
                "stateVariable": true,
                "storageLocation": "default",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                  "typeString": "mapping(address => mapping(address => uint256))"
                },
                "typeName": {
                  "id": 178,
                  "keyType": {
                    "id": 174,
                    "name": "address",
                    "nodeType": "ElementaryTypeName",
                    "src": "3004:7:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "nodeType": "Mapping",
                  "src": "2995:49:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                    "typeString": "mapping(address => mapping(address => uint256))"
                  },
                  "valueType": {
                    "id": 177,
                    "keyType": {
                      "id": 175,
                      "name": "address",
                      "nodeType": "ElementaryTypeName",
                      "src": "3024:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Mapping",
                    "src": "3015:28:0",
                    "typeDescriptions": {
                      "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                      "typeString": "mapping(address => uint256)"
                    },
                    "valueType": {
                      "id": 176,
                      "name": "uint256",
                      "nodeType": "ElementaryTypeName",
                      "src": "3035:7:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      }
                    }
                  }
                },
                "value": null,
                "visibility": "public"
              },
              {
                "anonymous": false,
                "documentation": null,
                "id": 185,
                "name": "TransferRequestFilled",
                "nodeType": "EventDefinition",
                "parameters": {
                  "id": 184,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 181,
                      "indexed": true,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 185,
                      "src": "3099:20:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 180,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3099:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 183,
                      "indexed": true,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 185,
                      "src": "3121:18:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 182,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3121:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3098:42:0"
                },
                "src": "3071:70:0"
              },
              {
                "body": {
                  "id": 196,
                  "nodeType": "Block",
                  "src": "3211:42:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 194,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 192,
                          "name": "TOKEN_ADDRESS",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 173,
                          "src": "3218:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "id": 193,
                          "name": "_tokenAddress",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 187,
                          "src": "3234:13:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "3218:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 195,
                      "nodeType": "ExpressionStatement",
                      "src": "3218:29:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 197,
                "implemented": true,
                "isConstructor": true,
                "isDeclaredConst": false,
                "modifiers": [
                  {
                    "arguments": [],
                    "id": 190,
                    "modifierName": {
                      "argumentTypes": null,
                      "id": 189,
                      "name": "LibTransferRequest",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 164,
                      "src": "3190:18:0",
                      "typeDescriptions": {
                        "typeIdentifier": "t_type$_t_contract$_LibTransferRequest_$164_$",
                        "typeString": "type(contract LibTransferRequest)"
                      }
                    },
                    "nodeType": "ModifierInvocation",
                    "src": "3190:20:0"
                  }
                ],
                "name": "",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 188,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 187,
                      "name": "_tokenAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 197,
                      "src": "3160:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 186,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "3160:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3159:23:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 191,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3211:0:0"
                },
                "scope": 263,
                "src": "3147:106:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              },
              {
                "body": {
                  "id": 261,
                  "nodeType": "Block",
                  "src": "3347:2655:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 214,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "baseExpression": {
                                "argumentTypes": null,
                                "baseExpression": {
                                  "argumentTypes": null,
                                  "id": 205,
                                  "name": "requestEpoch",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 179,
                                  "src": "3417:12:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                    "typeString": "mapping(address => mapping(address => uint256))"
                                  }
                                },
                                "id": 208,
                                "indexExpression": {
                                  "argumentTypes": null,
                                  "expression": {
                                    "argumentTypes": null,
                                    "id": 206,
                                    "name": "request",
                                    "nodeType": "Identifier",
                                    "overloadedDeclarations": [],
                                    "referencedDeclaration": 199,
                                    "src": "3430:7:0",
                                    "typeDescriptions": {
                                      "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                                      "typeString": "struct LibTransferRequest.TransferRequest memory"
                                    }
                                  },
                                  "id": 207,
                                  "isConstant": false,
                                  "isLValue": true,
                                  "isPure": false,
                                  "lValueRequested": false,
                                  "memberName": "senderAddress",
                                  "nodeType": "MemberAccess",
                                  "referencedDeclaration": 101,
                                  "src": "3430:21:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_address",
                                    "typeString": "address"
                                  }
                                },
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "nodeType": "IndexAccess",
                                "src": "3417:35:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                                  "typeString": "mapping(address => uint256)"
                                }
                              },
                              "id": 211,
                              "indexExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 209,
                                  "name": "request",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 199,
                                  "src": "3453:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                                    "typeString": "struct LibTransferRequest.TransferRequest memory"
                                  }
                                },
                                "id": 210,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "relayerAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 107,
                                "src": "3453:22:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "nodeType": "IndexAccess",
                              "src": "3417:59:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 212,
                                "name": "request",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 199,
                                "src": "3480:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                                  "typeString": "struct LibTransferRequest.TransferRequest memory"
                                }
                              },
                              "id": 213,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "salt",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 111,
                              "src": "3480:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "3417:75:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "524551554553545f494e56414c4944",
                            "id": 215,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3494:17:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d0cec906c981aec4f82fd9ac1b3807bf94e1e4e8113e91f528c412ee6561fef1",
                              "typeString": "literal_string \"REQUEST_INVALID\""
                            },
                            "value": "REQUEST_INVALID"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_d0cec906c981aec4f82fd9ac1b3807bf94e1e4e8113e91f528c412ee6561fef1",
                              "typeString": "literal_string \"REQUEST_INVALID\""
                            }
                          ],
                          "id": 204,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "3409:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 216,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3409:103:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 217,
                      "nodeType": "ExpressionStatement",
                      "src": "3409:103:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            },
                            "id": 223,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 219,
                                "name": "request",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 199,
                                "src": "3591:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                                  "typeString": "struct LibTransferRequest.TransferRequest memory"
                                }
                              },
                              "id": 220,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "relayerAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 107,
                              "src": "3591:22:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "==",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 221,
                                "name": "msg",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 762,
                                "src": "3617:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_magic_message",
                                  "typeString": "msg"
                                }
                              },
                              "id": 222,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "sender",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "3617:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "src": "3591:36:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "524551554553545f494e56414c4944",
                            "id": 224,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3629:17:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_d0cec906c981aec4f82fd9ac1b3807bf94e1e4e8113e91f528c412ee6561fef1",
                              "typeString": "literal_string \"REQUEST_INVALID\""
                            },
                            "value": "REQUEST_INVALID"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_d0cec906c981aec4f82fd9ac1b3807bf94e1e4e8113e91f528c412ee6561fef1",
                              "typeString": "literal_string \"REQUEST_INVALID\""
                            }
                          ],
                          "id": 218,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "3583:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 225,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3583:64:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 226,
                      "nodeType": "ExpressionStatement",
                      "src": "3583:64:0"
                    },
                    {
                      "assignments": [
                        228
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 228,
                          "name": "requestHash",
                          "nodeType": "VariableDeclaration",
                          "scope": 262,
                          "src": "3694:19:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "typeName": {
                            "id": 227,
                            "name": "bytes32",
                            "nodeType": "ElementaryTypeName",
                            "src": "3694:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 232,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 230,
                            "name": "request",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 199,
                            "src": "3736:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                              "typeString": "struct LibTransferRequest.TransferRequest memory"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                              "typeString": "struct LibTransferRequest.TransferRequest memory"
                            }
                          ],
                          "id": 229,
                          "name": "hashTransferRequest",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 163,
                          "src": "3716:19:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_view$_t_struct$_TransferRequest_$112_memory_ptr_$returns$_t_bytes32_$",
                            "typeString": "function (struct LibTransferRequest.TransferRequest memory) view returns (bytes32)"
                          }
                        },
                        "id": 231,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3716:28:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3694:50:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 235,
                                "name": "requestHash",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 228,
                                "src": "3776:11:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 236,
                                  "name": "request",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 199,
                                  "src": "3789:7:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                                    "typeString": "struct LibTransferRequest.TransferRequest memory"
                                  }
                                },
                                "id": 237,
                                "isConstant": false,
                                "isLValue": true,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "senderAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 101,
                                "src": "3789:21:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 238,
                                "name": "signature",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 201,
                                "src": "3812:9:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes32",
                                  "typeString": "bytes32"
                                },
                                {
                                  "typeIdentifier": "t_address",
                                  "typeString": "address"
                                },
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 234,
                              "name": "isValidSignature",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 60,
                              "src": "3759:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes32_$_t_address_$_t_bytes_memory_ptr_$returns$_t_bool_$",
                                "typeString": "function (bytes32,address,bytes memory) pure returns (bool)"
                              }
                            },
                            "id": 239,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "3759:63:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "494e56414c49445f524551554553545f5349474e4154555245",
                            "id": 240,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "3824:27:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_8dc40efcc365069a45bb28e1937f52d0b3edf68e2daff7cd6291338559e1a7ab",
                              "typeString": "literal_string \"INVALID_REQUEST_SIGNATURE\""
                            },
                            "value": "INVALID_REQUEST_SIGNATURE"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_8dc40efcc365069a45bb28e1937f52d0b3edf68e2daff7cd6291338559e1a7ab",
                              "typeString": "literal_string \"INVALID_REQUEST_SIGNATURE\""
                            }
                          ],
                          "id": 233,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "3751:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 241,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "3751:101:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 242,
                      "nodeType": "ExpressionStatement",
                      "src": "3751:101:0"
                    },
                    {
                      "assignments": [
                        244
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 244,
                          "name": "tokenAddress",
                          "nodeType": "VariableDeclaration",
                          "scope": 262,
                          "src": "3861:20:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          },
                          "typeName": {
                            "id": 243,
                            "name": "address",
                            "nodeType": "ElementaryTypeName",
                            "src": "3861:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 246,
                      "initialValue": {
                        "argumentTypes": null,
                        "id": 245,
                        "name": "TOKEN_ADDRESS",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 173,
                        "src": "3884:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "3861:36:0"
                    },
                    {
                      "externalReferences": [
                        {
                          "tokenAddress": {
                            "declaration": 244,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "5066:12:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "tokenAddress": {
                            "declaration": 244,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "4113:12:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 247,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    mstore(32, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\n    calldatacopy(36, 4, 96)\n    let success := call(gas(), tokenAddress, 0, 32, 100, 0, 32)\n    success := and(success, or(iszero(returndatasize()), and(eq(returndatasize(), 32), gt(mload(0), 0))))\n    if iszero(success)\n    {\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n        mstore(96, 0)\n        revert(0, 100)\n    }\n    calldatacopy(68, 100, 64)\n    success := call(gas(), tokenAddress, 0, 32, 100, 0, 32)\n    success := and(success, or(iszero(returndatasize()), and(eq(returndatasize(), 32), gt(mload(0), 0))))\n    if iszero(success)\n    {\n        mstore(0, 0x08c379a000000000000000000000000000000000000000000000000000000000)\n        mstore(32, 0x0000002000000000000000000000000000000000000000000000000000000000)\n        mstore(64, 0x0000000f5452414e534645525f4641494c454400000000000000000000000000)\n        mstore(96, 0)\n        revert(0, 100)\n    }\n}",
                      "src": "3904:2026:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 259,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "baseExpression": {
                              "argumentTypes": null,
                              "id": 248,
                              "name": "requestEpoch",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 179,
                              "src": "5918:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_mapping$_t_address_$_t_mapping$_t_address_$_t_uint256_$_$",
                                "typeString": "mapping(address => mapping(address => uint256))"
                              }
                            },
                            "id": 253,
                            "indexExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 249,
                                "name": "request",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 199,
                                "src": "5931:7:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                                  "typeString": "struct LibTransferRequest.TransferRequest memory"
                                }
                              },
                              "id": 250,
                              "isConstant": false,
                              "isLValue": true,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "senderAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 101,
                              "src": "5931:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_address",
                                "typeString": "address"
                              }
                            },
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "nodeType": "IndexAccess",
                            "src": "5918:35:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_mapping$_t_address_$_t_uint256_$",
                              "typeString": "mapping(address => uint256)"
                            }
                          },
                          "id": 254,
                          "indexExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 251,
                              "name": "request",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 199,
                              "src": "5954:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                                "typeString": "struct LibTransferRequest.TransferRequest memory"
                              }
                            },
                            "id": 252,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "relayerAddress",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 107,
                            "src": "5954:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_address",
                              "typeString": "address"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": true,
                          "nodeType": "IndexAccess",
                          "src": "5918:59:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 258,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 255,
                              "name": "request",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 199,
                              "src": "5980:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                                "typeString": "struct LibTransferRequest.TransferRequest memory"
                              }
                            },
                            "id": 256,
                            "isConstant": false,
                            "isLValue": true,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "salt",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": 111,
                            "src": "5980:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "+",
                          "rightExpression": {
                            "argumentTypes": null,
                            "hexValue": "31",
                            "id": 257,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "number",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "5995:1:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_rational_1_by_1",
                              "typeString": "int_const 1"
                            },
                            "value": "1"
                          },
                          "src": "5980:16:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "src": "5918:78:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 260,
                      "nodeType": "ExpressionStatement",
                      "src": "5918:78:0"
                    }
                  ]
                },
                "documentation": null,
                "id": 262,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": false,
                "modifiers": [],
                "name": "executeTransfer",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 202,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 199,
                      "name": "request",
                      "nodeType": "VariableDeclaration",
                      "scope": 262,
                      "src": "3284:30:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_struct$_TransferRequest_$112_memory_ptr",
                        "typeString": "struct LibTransferRequest.TransferRequest"
                      },
                      "typeName": {
                        "contractScope": null,
                        "id": 198,
                        "name": "TransferRequest",
                        "nodeType": "UserDefinedTypeName",
                        "referencedDeclaration": 112,
                        "src": "3284:15:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_struct$_TransferRequest_$112_storage_ptr",
                          "typeString": "struct LibTransferRequest.TransferRequest"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 201,
                      "name": "signature",
                      "nodeType": "VariableDeclaration",
                      "scope": 262,
                      "src": "3316:22:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 200,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "3316:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "3283:56:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 203,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "3347:0:0"
                },
                "scope": 263,
                "src": "3259:2743:0",
                "stateMutability": "nonpayable",
                "superFunction": null,
                "visibility": "public"
              }
            ],
            "scope": 748,
            "src": "2860:3145:0"
          },
          {
            "baseContracts": [],
            "contractDependencies": [],
            "contractKind": "library",
            "documentation": null,
            "fullyImplemented": true,
            "id": 747,
            "linearizedBaseContracts": [
              747
            ],
            "name": "LibBytes",
            "nodeType": "ContractDefinition",
            "nodes": [
              {
                "id": 266,
                "libraryName": {
                  "contractScope": null,
                  "id": 264,
                  "name": "LibBytes",
                  "nodeType": "UserDefinedTypeName",
                  "referencedDeclaration": 747,
                  "src": "6041:8:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_LibBytes_$747",
                    "typeString": "library LibBytes"
                  }
                },
                "nodeType": "UsingForDirective",
                "src": "6035:25:0",
                "typeName": {
                  "id": 265,
                  "name": "bytes",
                  "nodeType": "ElementaryTypeName",
                  "src": "6054:5:0",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes_storage_ptr",
                    "typeString": "bytes"
                  }
                }
              },
              {
                "body": {
                  "id": 276,
                  "nodeType": "Block",
                  "src": "6452:106:0",
                  "statements": [
                    {
                      "externalReferences": [
                        {
                          "input": {
                            "declaration": 268,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "6504:5:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "memoryAddress": {
                            "declaration": 271,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "6487:13:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 273,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    memoryAddress := input\n}",
                      "src": "6463:73:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 274,
                        "name": "memoryAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 271,
                        "src": "6537:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 272,
                      "id": 275,
                      "nodeType": "Return",
                      "src": "6530:20:0"
                    }
                  ]
                },
                "documentation": "@dev Gets the memory address for a byte array.\n @param input Byte array to lookup.\n @return memoryAddress Memory address of byte array. This\n         points to the header of the byte array which contains\n         the length.",
                "id": 277,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "rawAddress",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 269,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 268,
                      "name": "input",
                      "nodeType": "VariableDeclaration",
                      "scope": 277,
                      "src": "6354:18:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 267,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6354:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6353:20:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 272,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 271,
                      "name": "memoryAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 277,
                      "src": "6424:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 270,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6424:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6423:23:0"
                },
                "scope": 747,
                "src": "6334:224:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 287,
                  "nodeType": "Block",
                  "src": "6885:115:0",
                  "statements": [
                    {
                      "externalReferences": [
                        {
                          "memoryAddress": {
                            "declaration": 282,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "6920:13:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "input": {
                            "declaration": 279,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "6941:5:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 284,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    memoryAddress := add(input, 32)\n}",
                      "src": "6896:82:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 285,
                        "name": "memoryAddress",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 282,
                        "src": "6979:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 283,
                      "id": 286,
                      "nodeType": "Return",
                      "src": "6972:20:0"
                    }
                  ]
                },
                "documentation": "@dev Gets the memory address for the contents of a byte array.\n @param input Byte array to lookup.\n @return memoryAddress Memory address of the contents of the byte array.",
                "id": 288,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "contentAddress",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 280,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 279,
                      "name": "input",
                      "nodeType": "VariableDeclaration",
                      "scope": 288,
                      "src": "6787:18:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 278,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "6787:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6786:20:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 283,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 282,
                      "name": "memoryAddress",
                      "nodeType": "VariableDeclaration",
                      "scope": 288,
                      "src": "6857:21:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 281,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "6857:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "6856:23:0"
                },
                "scope": 747,
                "src": "6763:237:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 318,
                  "nodeType": "Block",
                  "src": "7379:4264:0",
                  "statements": [
                    {
                      "condition": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        },
                        "id": 299,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "id": 297,
                          "name": "length",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 294,
                          "src": "7394:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "<",
                        "rightExpression": {
                          "argumentTypes": null,
                          "hexValue": "3332",
                          "id": 298,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "7403:2:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_32_by_1",
                            "typeString": "int_const 32"
                          },
                          "value": "32"
                        },
                        "src": "7394:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "falseBody": {
                        "id": 316,
                        "nodeType": "Block",
                        "src": "7876:3760:0",
                        "statements": [
                          {
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 304,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 302,
                                "name": "source",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 292,
                                "src": "7956:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "==",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 303,
                                "name": "dest",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 290,
                                "src": "7966:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "7956:14:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": null,
                            "id": 307,
                            "nodeType": "IfStatement",
                            "src": "7952:61:0",
                            "trueBody": {
                              "id": 306,
                              "nodeType": "Block",
                              "src": "7972:41:0",
                              "statements": [
                                {
                                  "expression": null,
                                  "functionReturnParameters": 296,
                                  "id": 305,
                                  "nodeType": "Return",
                                  "src": "7991:7:0"
                                }
                              ]
                            }
                          },
                          {
                            "condition": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 310,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 308,
                                "name": "source",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 292,
                                "src": "8710:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": ">",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 309,
                                "name": "dest",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 290,
                                "src": "8719:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "8710:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bool",
                                "typeString": "bool"
                              }
                            },
                            "falseBody": {
                              "id": 314,
                              "nodeType": "Block",
                              "src": "10070:1555:0",
                              "statements": [
                                {
                                  "externalReferences": [
                                    {
                                      "length": {
                                        "declaration": 294,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "10277:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "length": {
                                        "declaration": 294,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "10291:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "source": {
                                        "declaration": 292,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "10340:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "length": {
                                        "declaration": 294,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "10348:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "source": {
                                        "declaration": 292,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "10715:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "dest": {
                                        "declaration": 290,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "10393:4:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "length": {
                                        "declaration": 294,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "10399:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "dest": {
                                        "declaration": 290,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "11315:4:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "dest": {
                                        "declaration": 290,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "11579:4:0",
                                        "valueSize": 1
                                      }
                                    }
                                  ],
                                  "id": 313,
                                  "nodeType": "InlineAssembly",
                                  "operations": "{\n    length := sub(length, 32)\n    let sEnd := add(source, length)\n    let dEnd := add(dest, length)\n    let first := mload(source)\n    for {\n    }\n    slt(dest, dEnd)\n    {\n    }\n    {\n        mstore(dEnd, mload(sEnd))\n        sEnd := sub(sEnd, 32)\n        dEnd := sub(dEnd, 32)\n    }\n    mstore(dest, first)\n}",
                                  "src": "10089:1536:0"
                                }
                              ]
                            },
                            "id": 315,
                            "nodeType": "IfStatement",
                            "src": "8706:2919:0",
                            "trueBody": {
                              "id": 312,
                              "nodeType": "Block",
                              "src": "8725:1339:0",
                              "statements": [
                                {
                                  "externalReferences": [
                                    {
                                      "length": {
                                        "declaration": 294,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9029:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "length": {
                                        "declaration": 294,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9043:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "dest": {
                                        "declaration": 290,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9145:4:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "length": {
                                        "declaration": 294,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9151:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "source": {
                                        "declaration": 292,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9092:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "length": {
                                        "declaration": 294,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9100:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "dest": {
                                        "declaration": 290,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9896:4:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "source": {
                                        "declaration": 292,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9748:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "dest": {
                                        "declaration": 290,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9799:4:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "source": {
                                        "declaration": 292,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9811:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "source": {
                                        "declaration": 292,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9845:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "source": {
                                        "declaration": 292,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9859:6:0",
                                        "valueSize": 1
                                      }
                                    },
                                    {
                                      "dest": {
                                        "declaration": 290,
                                        "isOffset": false,
                                        "isSlot": false,
                                        "src": "9908:4:0",
                                        "valueSize": 1
                                      }
                                    }
                                  ],
                                  "id": 311,
                                  "nodeType": "InlineAssembly",
                                  "operations": "{\n    length := sub(length, 32)\n    let sEnd := add(source, length)\n    let dEnd := add(dest, length)\n    let last := mload(sEnd)\n    for {\n    }\n    lt(source, sEnd)\n    {\n    }\n    {\n        mstore(dest, mload(source))\n        source := add(source, 32)\n        dest := add(dest, 32)\n    }\n    mstore(dEnd, last)\n}",
                                  "src": "8744:1320:0"
                                }
                              ]
                            }
                          }
                        ]
                      },
                      "id": 317,
                      "nodeType": "IfStatement",
                      "src": "7390:4246:0",
                      "trueBody": {
                        "id": 301,
                        "nodeType": "Block",
                        "src": "7407:463:0",
                        "statements": [
                          {
                            "externalReferences": [
                              {
                                "source": {
                                  "declaration": 292,
                                  "isOffset": false,
                                  "isSlot": false,
                                  "src": "7736:6:0",
                                  "valueSize": 1
                                }
                              },
                              {
                                "length": {
                                  "declaration": 294,
                                  "isOffset": false,
                                  "isSlot": false,
                                  "src": "7687:6:0",
                                  "valueSize": 1
                                }
                              },
                              {
                                "dest": {
                                  "declaration": 290,
                                  "isOffset": false,
                                  "isSlot": false,
                                  "src": "7792:4:0",
                                  "valueSize": 1
                                }
                              },
                              {
                                "dest": {
                                  "declaration": 290,
                                  "isOffset": false,
                                  "isSlot": false,
                                  "src": "7829:4:0",
                                  "valueSize": 1
                                }
                              }
                            ],
                            "id": 300,
                            "nodeType": "InlineAssembly",
                            "operations": "{\n    let mask := sub(exp(256, sub(32, length)), 1)\n    let s := and(mload(source), not(mask))\n    let d := and(mload(dest), mask)\n    mstore(dest, or(s, d))\n}",
                            "src": "7626:244:0"
                          }
                        ]
                      }
                    }
                  ]
                },
                "documentation": "@dev Copies `length` bytes from memory location `source` to `dest`.\n @param dest memory address to copy bytes to.\n @param source memory address to copy bytes from.\n @param length number of bytes to copy.",
                "id": 319,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "memCopy",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 295,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 290,
                      "name": "dest",
                      "nodeType": "VariableDeclaration",
                      "scope": 319,
                      "src": "7272:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 289,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7272:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 292,
                      "name": "source",
                      "nodeType": "VariableDeclaration",
                      "scope": 319,
                      "src": "7295:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 291,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7295:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 294,
                      "name": "length",
                      "nodeType": "VariableDeclaration",
                      "scope": 319,
                      "src": "7320:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 293,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "7320:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "7261:80:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 296,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "7379:0:0"
                },
                "scope": 747,
                "src": "7245:4398:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 369,
                  "nodeType": "Block",
                  "src": "12125:457:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 333,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 331,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 323,
                              "src": "12158:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 332,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 325,
                              "src": "12166:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "12158:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "46524f4d5f4c4553535f5448414e5f544f5f5245515549524544",
                            "id": 334,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "12183:28:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_1b95cec571d66445cedbd96155c82949976c614b261f1c5fe27223590583fd4f",
                              "typeString": "literal_string \"FROM_LESS_THAN_TO_REQUIRED\""
                            },
                            "value": "FROM_LESS_THAN_TO_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_1b95cec571d66445cedbd96155c82949976c614b261f1c5fe27223590583fd4f",
                              "typeString": "literal_string \"FROM_LESS_THAN_TO_REQUIRED\""
                            }
                          ],
                          "id": 330,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "12136:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 335,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12136:86:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 336,
                      "nodeType": "ExpressionStatement",
                      "src": "12136:86:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 341,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 338,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 325,
                              "src": "12255:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 339,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 321,
                                "src": "12260:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 340,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "12260:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "12255:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "544f5f4c4553535f5448414e5f4c454e4754485f5245515549524544",
                            "id": 342,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "12283:30:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_22dab502afcaac39972ef428907ba5ff6a51956bfa1c4002b6aa8a752256c29a",
                              "typeString": "literal_string \"TO_LESS_THAN_LENGTH_REQUIRED\""
                            },
                            "value": "TO_LESS_THAN_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_22dab502afcaac39972ef428907ba5ff6a51956bfa1c4002b6aa8a752256c29a",
                              "typeString": "literal_string \"TO_LESS_THAN_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 337,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "12233:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 343,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12233:91:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 344,
                      "nodeType": "ExpressionStatement",
                      "src": "12233:91:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 352,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 345,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 328,
                          "src": "12396:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 350,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 348,
                                "name": "to",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 325,
                                "src": "12415:2:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 349,
                                "name": "from",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 323,
                                "src": "12420:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "12415:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 347,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "lValueRequested": false,
                            "nodeType": "NewExpression",
                            "src": "12405:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_objectcreation_pure$_t_uint256_$returns$_t_bytes_memory_$",
                              "typeString": "function (uint256) pure returns (bytes memory)"
                            },
                            "typeName": {
                              "id": 346,
                              "name": "bytes",
                              "nodeType": "ElementaryTypeName",
                              "src": "12409:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_storage_ptr",
                                "typeString": "bytes"
                              }
                            }
                          },
                          "id": 351,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "12405:20:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory",
                            "typeString": "bytes memory"
                          }
                        },
                        "src": "12396:29:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "id": 353,
                      "nodeType": "ExpressionStatement",
                      "src": "12396:29:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "argumentTypes": null,
                                "id": 355,
                                "name": "result",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 328,
                                "src": "12458:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 356,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "contentAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 288,
                              "src": "12458:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$bound_to$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) pure returns (uint256)"
                              }
                            },
                            "id": 357,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "12458:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 362,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 358,
                                  "name": "b",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 321,
                                  "src": "12496:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 359,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "contentAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 288,
                                "src": "12496:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$bound_to$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes memory) pure returns (uint256)"
                                }
                              },
                              "id": 360,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "12496:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 361,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 323,
                              "src": "12517:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "12496:25:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 363,
                              "name": "result",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 328,
                              "src": "12536:6:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 364,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "12536:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 354,
                          "name": "memCopy",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 319,
                          "src": "12436:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                            "typeString": "function (uint256,uint256,uint256) pure"
                          }
                        },
                        "id": 365,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "12436:114:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 366,
                      "nodeType": "ExpressionStatement",
                      "src": "12436:114:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 367,
                        "name": "result",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 328,
                        "src": "12568:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "functionReturnParameters": 329,
                      "id": 368,
                      "nodeType": "Return",
                      "src": "12561:13:0"
                    }
                  ]
                },
                "documentation": "@dev Returns a slices from a byte array.\n @param b The byte array to take a slice from.\n @param from The starting index for the slice (inclusive).\n @param to The final index for the slice (exclusive).\n @return result The slice containing bytes at indices [from, to)",
                "id": 370,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "slice",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 326,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 321,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 370,
                      "src": "11983:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 320,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "11983:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 323,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 370,
                      "src": "12008:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 322,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12008:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 325,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 370,
                      "src": "12031:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 324,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "12031:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "11972:76:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 329,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 328,
                      "name": "result",
                      "nodeType": "VariableDeclaration",
                      "scope": 370,
                      "src": "12099:19:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 327,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "12099:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "12098:21:0"
                },
                "scope": 747,
                "src": "11958:624:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 399,
                  "nodeType": "Block",
                  "src": "13254:412:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 384,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 382,
                              "name": "from",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 374,
                              "src": "13287:4:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 383,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 376,
                              "src": "13295:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "13287:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "46524f4d5f4c4553535f5448414e5f544f5f5245515549524544",
                            "id": 385,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "13312:28:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_1b95cec571d66445cedbd96155c82949976c614b261f1c5fe27223590583fd4f",
                              "typeString": "literal_string \"FROM_LESS_THAN_TO_REQUIRED\""
                            },
                            "value": "FROM_LESS_THAN_TO_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_1b95cec571d66445cedbd96155c82949976c614b261f1c5fe27223590583fd4f",
                              "typeString": "literal_string \"FROM_LESS_THAN_TO_REQUIRED\""
                            }
                          ],
                          "id": 381,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "13265:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 386,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13265:86:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 387,
                      "nodeType": "ExpressionStatement",
                      "src": "13265:86:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 392,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "id": 389,
                              "name": "to",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 376,
                              "src": "13384:2:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "<",
                            "rightExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 390,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 372,
                                "src": "13389:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 391,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "13389:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "13384:13:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "544f5f4c4553535f5448414e5f4c454e4754485f5245515549524544",
                            "id": 393,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "13412:30:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_22dab502afcaac39972ef428907ba5ff6a51956bfa1c4002b6aa8a752256c29a",
                              "typeString": "literal_string \"TO_LESS_THAN_LENGTH_REQUIRED\""
                            },
                            "value": "TO_LESS_THAN_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_22dab502afcaac39972ef428907ba5ff6a51956bfa1c4002b6aa8a752256c29a",
                              "typeString": "literal_string \"TO_LESS_THAN_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 388,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "13362:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 394,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13362:91:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 395,
                      "nodeType": "ExpressionStatement",
                      "src": "13362:91:0"
                    },
                    {
                      "externalReferences": [
                        {
                          "result": {
                            "declaration": 379,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "13559:6:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "b": {
                            "declaration": 372,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "13573:1:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "from": {
                            "declaration": 374,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "13576:4:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "result": {
                            "declaration": 379,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "13602:6:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "to": {
                            "declaration": 376,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "13614:2:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "from": {
                            "declaration": 374,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "13618:4:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 396,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    result := add(b, from)\n    mstore(result, sub(to, from))\n}",
                      "src": "13535:116:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 397,
                        "name": "result",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 379,
                        "src": "13652:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "functionReturnParameters": 380,
                      "id": 398,
                      "nodeType": "Return",
                      "src": "13645:13:0"
                    }
                  ]
                },
                "documentation": "@dev Returns a slice from a byte array without preserving the input.\n @param b The byte array to take a slice from. Will be destroyed in the process.\n @param from The starting index for the slice (inclusive).\n @param to The final index for the slice (exclusive).\n @return result The slice containing bytes at indices [from, to)\n @dev When `from == 0`, the original array will match the slice. In other cases its state will be corrupted.",
                "id": 400,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "sliceDestructive",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 377,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 372,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 400,
                      "src": "13112:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 371,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "13112:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 374,
                      "name": "from",
                      "nodeType": "VariableDeclaration",
                      "scope": 400,
                      "src": "13137:12:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 373,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13137:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 376,
                      "name": "to",
                      "nodeType": "VariableDeclaration",
                      "scope": 400,
                      "src": "13160:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 375,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "13160:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13101:76:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 380,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 379,
                      "name": "result",
                      "nodeType": "VariableDeclaration",
                      "scope": 400,
                      "src": "13228:19:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 378,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "13228:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13227:21:0"
                },
                "scope": 747,
                "src": "13076:590:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 427,
                  "nodeType": "Block",
                  "src": "13958:360:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 411,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 408,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 402,
                                "src": "13991:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 409,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "13991:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "30",
                              "id": 410,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14002:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_0_by_1",
                                "typeString": "int_const 0"
                              },
                              "value": "0"
                            },
                            "src": "13991:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "475245415445525f5448414e5f5a45524f5f4c454e4754485f5245515549524544",
                            "id": 412,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14018:35:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_980529f6dc94e9bc201b7355bf1ef3856afe06efeee37212428683d4fc3a5546",
                              "typeString": "literal_string \"GREATER_THAN_ZERO_LENGTH_REQUIRED\""
                            },
                            "value": "GREATER_THAN_ZERO_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_980529f6dc94e9bc201b7355bf1ef3856afe06efeee37212428683d4fc3a5546",
                              "typeString": "literal_string \"GREATER_THAN_ZERO_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 407,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "13969:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 413,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "13969:95:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 414,
                      "nodeType": "ExpressionStatement",
                      "src": "13969:95:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 422,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 415,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 405,
                          "src": "14106:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "baseExpression": {
                            "argumentTypes": null,
                            "id": 416,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 402,
                            "src": "14115:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          "id": 421,
                          "indexExpression": {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 420,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 417,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 402,
                                "src": "14117:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 418,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "14117:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "-",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "31",
                              "id": 419,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14128:1:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_1_by_1",
                                "typeString": "int_const 1"
                              },
                              "value": "1"
                            },
                            "src": "14117:12:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "isConstant": false,
                          "isLValue": true,
                          "isPure": false,
                          "lValueRequested": false,
                          "nodeType": "IndexAccess",
                          "src": "14115:15:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes1",
                            "typeString": "bytes1"
                          }
                        },
                        "src": "14106:24:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        }
                      },
                      "id": 423,
                      "nodeType": "ExpressionStatement",
                      "src": "14106:24:0"
                    },
                    {
                      "externalReferences": [
                        {
                          "b": {
                            "declaration": 402,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "14239:1:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "b": {
                            "declaration": 402,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "14266:1:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 424,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    let newLen := sub(mload(b), 1)\n    mstore(b, newLen)\n}",
                      "src": "14143:160:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 425,
                        "name": "result",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 405,
                        "src": "14304:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        }
                      },
                      "functionReturnParameters": 406,
                      "id": 426,
                      "nodeType": "Return",
                      "src": "14297:13:0"
                    }
                  ]
                },
                "documentation": "@dev Pops the last byte off of a byte array by modifying its length.\n @param b Byte array that will be modified.\n @return The byte that was popped off.",
                "id": 428,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "popLastByte",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 403,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 402,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 428,
                      "src": "13872:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 401,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "13872:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13871:16:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 406,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 405,
                      "name": "result",
                      "nodeType": "VariableDeclaration",
                      "scope": 428,
                      "src": "13938:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes1",
                        "typeString": "bytes1"
                      },
                      "typeName": {
                        "id": 404,
                        "name": "bytes1",
                        "nodeType": "ElementaryTypeName",
                        "src": "13938:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes1",
                          "typeString": "bytes1"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "13937:15:0"
                },
                "scope": 747,
                "src": "13851:467:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 456,
                  "nodeType": "Block",
                  "src": "14629:390:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 439,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 436,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 430,
                                "src": "14662:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 437,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "14662:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "3230",
                              "id": 438,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "14674:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_20_by_1",
                                "typeString": "int_const 20"
                              },
                              "value": "20"
                            },
                            "src": "14662:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f5245515549524544",
                            "id": 440,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "14691:40:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c47e65babc7fbf8664b831814c5ca2ac68250d773645214bf1a10c24ccc1e309",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\""
                            },
                            "value": "GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_c47e65babc7fbf8664b831814c5ca2ac68250d773645214bf1a10c24ccc1e309",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 435,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "14640:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 441,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "14640:102:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 442,
                      "nodeType": "ExpressionStatement",
                      "src": "14640:102:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 451,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 443,
                          "name": "result",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 433,
                          "src": "14788:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "arguments": [
                            {
                              "argumentTypes": null,
                              "id": 445,
                              "name": "b",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 430,
                              "src": "14809:1:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 449,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 446,
                                  "name": "b",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 430,
                                  "src": "14812:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 447,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "14812:8:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "-",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "3230",
                                "id": 448,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "14823:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_20_by_1",
                                  "typeString": "int_const 20"
                                },
                                "value": "20"
                              },
                              "src": "14812:13:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            }
                          ],
                          "expression": {
                            "argumentTypes": [
                              {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              },
                              {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            ],
                            "id": 444,
                            "name": "readAddress",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 508,
                            "src": "14797:11:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_address_$",
                              "typeString": "function (bytes memory,uint256) pure returns (address)"
                            }
                          },
                          "id": 450,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "kind": "functionCall",
                          "lValueRequested": false,
                          "names": [],
                          "nodeType": "FunctionCall",
                          "src": "14797:29:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_address",
                            "typeString": "address"
                          }
                        },
                        "src": "14788:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "id": 452,
                      "nodeType": "ExpressionStatement",
                      "src": "14788:38:0"
                    },
                    {
                      "externalReferences": [
                        {
                          "b": {
                            "declaration": 430,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "14939:1:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "b": {
                            "declaration": 430,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "14967:1:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 453,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    let newLen := sub(mload(b), 20)\n    mstore(b, newLen)\n}",
                      "src": "14839:165:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 454,
                        "name": "result",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 433,
                        "src": "15005:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 434,
                      "id": 455,
                      "nodeType": "Return",
                      "src": "14998:13:0"
                    }
                  ]
                },
                "documentation": "@dev Pops the last 20 bytes off of a byte array by modifying its length.\n @param b Byte array that will be modified.\n @return The 20 byte address that was popped off.",
                "id": 457,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "popLast20Bytes",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 431,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 430,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 457,
                      "src": "14542:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 429,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "14542:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "14541:16:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 434,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 433,
                      "name": "result",
                      "nodeType": "VariableDeclaration",
                      "scope": 457,
                      "src": "14608:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 432,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "14608:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "14607:16:0"
                },
                "scope": 747,
                "src": "14518:501:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 480,
                  "nodeType": "Block",
                  "src": "15382:271:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "commonType": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        },
                        "id": 478,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "id": 470,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 466,
                              "name": "lhs",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 459,
                              "src": "15585:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 467,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "15585:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "expression": {
                              "argumentTypes": null,
                              "id": 468,
                              "name": "rhs",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 461,
                              "src": "15599:3:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_bytes_memory_ptr",
                                "typeString": "bytes memory"
                              }
                            },
                            "id": 469,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "memberName": "length",
                            "nodeType": "MemberAccess",
                            "referencedDeclaration": null,
                            "src": "15599:10:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "src": "15585:24:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "nodeType": "BinaryOperation",
                        "operator": "&&",
                        "rightExpression": {
                          "argumentTypes": null,
                          "commonType": {
                            "typeIdentifier": "t_bytes32",
                            "typeString": "bytes32"
                          },
                          "id": 477,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": false,
                          "lValueRequested": false,
                          "leftExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 472,
                                "name": "lhs",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 459,
                                "src": "15623:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 471,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 756,
                              "src": "15613:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                                "typeString": "function () pure returns (bytes32)"
                              }
                            },
                            "id": 473,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "15613:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "nodeType": "BinaryOperation",
                          "operator": "==",
                          "rightExpression": {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 475,
                                "name": "rhs",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 461,
                                "src": "15641:3:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              ],
                              "id": 474,
                              "name": "keccak256",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 756,
                              "src": "15631:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_sha3_pure$__$returns$_t_bytes32_$",
                                "typeString": "function () pure returns (bytes32)"
                              }
                            },
                            "id": 476,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "15631:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          },
                          "src": "15613:32:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bool",
                            "typeString": "bool"
                          }
                        },
                        "src": "15585:60:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "functionReturnParameters": 465,
                      "id": 479,
                      "nodeType": "Return",
                      "src": "15578:67:0"
                    }
                  ]
                },
                "documentation": "@dev Tests equality of two byte arrays.\n @param lhs First byte array to compare.\n @param rhs Second byte array to compare.\n @return True if arrays are the same. False otherwise.",
                "id": 481,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "equals",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 462,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 459,
                      "name": "lhs",
                      "nodeType": "VariableDeclaration",
                      "scope": 481,
                      "src": "15264:16:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 458,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "15264:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 461,
                      "name": "rhs",
                      "nodeType": "VariableDeclaration",
                      "scope": 481,
                      "src": "15291:16:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 460,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "15291:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15253:61:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 465,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 464,
                      "name": "equal",
                      "nodeType": "VariableDeclaration",
                      "scope": 481,
                      "src": "15365:10:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bool",
                        "typeString": "bool"
                      },
                      "typeName": {
                        "id": 463,
                        "name": "bool",
                        "nodeType": "ElementaryTypeName",
                        "src": "15365:4:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bool",
                          "typeString": "bool"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15364:12:0"
                },
                "scope": 747,
                "src": "15238:415:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 507,
                  "nodeType": "Block",
                  "src": "16021:764:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 496,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 491,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 483,
                                "src": "16054:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 492,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "16054:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 495,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 493,
                                "name": "index",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 485,
                                "src": "16066:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "3230",
                                "id": 494,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "16074:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_20_by_1",
                                  "typeString": "int_const 20"
                                },
                                "value": "20"
                              },
                              "src": "16066:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "16054:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f5245515549524544",
                            "id": 497,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "16119:40:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c47e65babc7fbf8664b831814c5ca2ac68250d773645214bf1a10c24ccc1e309",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\""
                            },
                            "value": "GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_c47e65babc7fbf8664b831814c5ca2ac68250d773645214bf1a10c24ccc1e309",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 490,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "16032:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 498,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "16032:138:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 499,
                      "nodeType": "ExpressionStatement",
                      "src": "16032:138:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 502,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 500,
                          "name": "index",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 485,
                          "src": "16413:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "3230",
                          "id": 501,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "16422:2:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_20_by_1",
                            "typeString": "int_const 20"
                          },
                          "value": "20"
                        },
                        "src": "16413:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 503,
                      "nodeType": "ExpressionStatement",
                      "src": "16413:11:0"
                    },
                    {
                      "externalReferences": [
                        {
                          "result": {
                            "declaration": 488,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "16664:6:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "b": {
                            "declaration": 483,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "16688:1:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "index": {
                            "declaration": 485,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "16691:5:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 504,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    result := and(mload(add(b, index)), 0xffffffffffffffffffffffffffffffffffffffff)\n}",
                      "src": "16480:290:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 505,
                        "name": "result",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 488,
                        "src": "16771:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "functionReturnParameters": 489,
                      "id": 506,
                      "nodeType": "Return",
                      "src": "16764:13:0"
                    }
                  ]
                },
                "documentation": "@dev Reads an address from a position in a byte array.\n @param b Byte array containing an address.\n @param index Index in byte array of address.\n @return address from byte array.",
                "id": 508,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "readAddress",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 486,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 483,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 508,
                      "src": "15904:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 482,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "15904:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 485,
                      "name": "index",
                      "nodeType": "VariableDeclaration",
                      "scope": 508,
                      "src": "15929:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 484,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "15929:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15893:56:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 489,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 488,
                      "name": "result",
                      "nodeType": "VariableDeclaration",
                      "scope": 508,
                      "src": "16000:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 487,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "16000:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "15999:16:0"
                },
                "scope": 747,
                "src": "15873:912:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 532,
                  "nodeType": "Block",
                  "src": "17167:1552:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 523,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 518,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 510,
                                "src": "17200:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 519,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "17200:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 522,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 520,
                                "name": "index",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 512,
                                "src": "17212:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "3230",
                                "id": 521,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "17220:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_20_by_1",
                                  "typeString": "int_const 20"
                                },
                                "value": "20"
                              },
                              "src": "17212:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "17200:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "475245415445525f4f525f455155414c5f544f5f32305f4c454e4754485f5245515549524544",
                            "id": 524,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "17265:40:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_c47e65babc7fbf8664b831814c5ca2ac68250d773645214bf1a10c24ccc1e309",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\""
                            },
                            "value": "GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_c47e65babc7fbf8664b831814c5ca2ac68250d773645214bf1a10c24ccc1e309",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_20_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 517,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "17178:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 525,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "17178:138:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 526,
                      "nodeType": "ExpressionStatement",
                      "src": "17178:138:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 529,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 527,
                          "name": "index",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 512,
                          "src": "17559:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "3230",
                          "id": 528,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "17568:2:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_20_by_1",
                            "typeString": "int_const 20"
                          },
                          "value": "20"
                        },
                        "src": "17559:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 530,
                      "nodeType": "ExpressionStatement",
                      "src": "17559:11:0"
                    },
                    {
                      "externalReferences": [
                        {
                          "b": {
                            "declaration": 510,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "18291:1:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "index": {
                            "declaration": 512,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "18294:5:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "input": {
                            "declaration": 514,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "18518:5:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "input": {
                            "declaration": 514,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "18531:5:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "b": {
                            "declaration": 510,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "18668:1:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "index": {
                            "declaration": 512,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "18671:5:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "input": {
                            "declaration": 514,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "18683:5:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 531,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    let neighbors := and(mload(add(b, index)), 0xffffffffffffffffffffffff0000000000000000000000000000000000000000)\n    input := and(input, 0xffffffffffffffffffffffffffffffffffffffff)\n    mstore(add(b, index), xor(input, neighbors))\n}",
                      "src": "17627:1092:0"
                    }
                  ]
                },
                "documentation": "@dev Writes an address into a specific position in a byte array.\n @param b Byte array to insert address into.\n @param index Index in byte array of address.\n @param input Address to put into byte array.",
                "id": 533,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "writeAddress",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 515,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 510,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 533,
                      "src": "17060:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 509,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "17060:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 512,
                      "name": "index",
                      "nodeType": "VariableDeclaration",
                      "scope": 533,
                      "src": "17085:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 511,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "17085:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 514,
                      "name": "input",
                      "nodeType": "VariableDeclaration",
                      "scope": 533,
                      "src": "17109:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      },
                      "typeName": {
                        "id": 513,
                        "name": "address",
                        "nodeType": "ElementaryTypeName",
                        "src": "17109:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_address",
                          "typeString": "address"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "17049:80:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 516,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "17167:0:0"
                },
                "scope": 747,
                "src": "17028:1691:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 559,
                  "nodeType": "Block",
                  "src": "19109:363:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 548,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 543,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 535,
                                "src": "19142:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 544,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "19142:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 547,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 545,
                                "name": "index",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 537,
                                "src": "19154:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "3332",
                                "id": 546,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "19162:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_32_by_1",
                                  "typeString": "int_const 32"
                                },
                                "value": "32"
                              },
                              "src": "19154:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "19142:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f5245515549524544",
                            "id": 549,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "19179:40:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_41046b31734c52276370384fb83a6ed9556edf77c382e1949fa233dc03b3aa40",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\""
                            },
                            "value": "GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_41046b31734c52276370384fb83a6ed9556edf77c382e1949fa233dc03b3aa40",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 542,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "19120:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 550,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "19120:110:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 551,
                      "nodeType": "ExpressionStatement",
                      "src": "19120:110:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 554,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 552,
                          "name": "index",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 537,
                          "src": "19305:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "3332",
                          "id": 553,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "19314:2:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_32_by_1",
                            "typeString": "int_const 32"
                          },
                          "value": "32"
                        },
                        "src": "19305:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 555,
                      "nodeType": "ExpressionStatement",
                      "src": "19305:11:0"
                    },
                    {
                      "externalReferences": [
                        {
                          "b": {
                            "declaration": 535,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "19420:1:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "index": {
                            "declaration": 537,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "19423:5:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "result": {
                            "declaration": 540,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "19400:6:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 556,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    result := mload(add(b, index))\n}",
                      "src": "19376:81:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 557,
                        "name": "result",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 540,
                        "src": "19458:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "functionReturnParameters": 541,
                      "id": 558,
                      "nodeType": "Return",
                      "src": "19451:13:0"
                    }
                  ]
                },
                "documentation": "@dev Reads a bytes32 value from a position in a byte array.\n @param b Byte array containing a bytes32 value.\n @param index Index in byte array of bytes32 value.\n @return bytes32 value from byte array.",
                "id": 560,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "readBytes32",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 538,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 535,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 560,
                      "src": "18992:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 534,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "18992:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 537,
                      "name": "index",
                      "nodeType": "VariableDeclaration",
                      "scope": 560,
                      "src": "19017:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 536,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "19017:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "18981:56:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 541,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 540,
                      "name": "result",
                      "nodeType": "VariableDeclaration",
                      "scope": 560,
                      "src": "19088:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 539,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "19088:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "19087:16:0"
                },
                "scope": 747,
                "src": "18961:511:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 584,
                  "nodeType": "Block",
                  "src": "19853:337:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 575,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 570,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 562,
                                "src": "19886:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 571,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "19886:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 574,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 572,
                                "name": "index",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 564,
                                "src": "19898:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "3332",
                                "id": 573,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "19906:2:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_32_by_1",
                                  "typeString": "int_const 32"
                                },
                                "value": "32"
                              },
                              "src": "19898:10:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "19886:22:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "475245415445525f4f525f455155414c5f544f5f33325f4c454e4754485f5245515549524544",
                            "id": 576,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "19923:40:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_41046b31734c52276370384fb83a6ed9556edf77c382e1949fa233dc03b3aa40",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\""
                            },
                            "value": "GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_41046b31734c52276370384fb83a6ed9556edf77c382e1949fa233dc03b3aa40",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_32_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 569,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "19864:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 577,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "19864:110:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 578,
                      "nodeType": "ExpressionStatement",
                      "src": "19864:110:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 581,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 579,
                          "name": "index",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 564,
                          "src": "20049:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "3332",
                          "id": 580,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "20058:2:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_32_by_1",
                            "typeString": "int_const 32"
                          },
                          "value": "32"
                        },
                        "src": "20049:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 582,
                      "nodeType": "ExpressionStatement",
                      "src": "20049:11:0"
                    },
                    {
                      "externalReferences": [
                        {
                          "input": {
                            "declaration": 566,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "20166:5:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "b": {
                            "declaration": 562,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "20155:1:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "index": {
                            "declaration": 564,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "20158:5:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 583,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    mstore(add(b, index), input)\n}",
                      "src": "20120:70:0"
                    }
                  ]
                },
                "documentation": "@dev Writes a bytes32 into a specific position in a byte array.\n @param b Byte array to insert <input> into.\n @param index Index in byte array of <input>.\n @param input bytes32 to put into byte array.",
                "id": 585,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "writeBytes32",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 567,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 562,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 585,
                      "src": "19746:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 561,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "19746:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 564,
                      "name": "index",
                      "nodeType": "VariableDeclaration",
                      "scope": 585,
                      "src": "19771:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 563,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "19771:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 566,
                      "name": "input",
                      "nodeType": "VariableDeclaration",
                      "scope": 585,
                      "src": "19795:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes32",
                        "typeString": "bytes32"
                      },
                      "typeName": {
                        "id": 565,
                        "name": "bytes32",
                        "nodeType": "ElementaryTypeName",
                        "src": "19795:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes32",
                          "typeString": "bytes32"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "19735:80:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 568,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "19853:0:0"
                },
                "scope": 747,
                "src": "19714:476:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 601,
                  "nodeType": "Block",
                  "src": "20580:56:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 596,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 587,
                                "src": "20618:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              {
                                "argumentTypes": null,
                                "id": 597,
                                "name": "index",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 589,
                                "src": "20621:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                },
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 595,
                              "name": "readBytes32",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 560,
                              "src": "20606:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_bytes32_$",
                                "typeString": "function (bytes memory,uint256) pure returns (bytes32)"
                              }
                            },
                            "id": 598,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "20606:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 594,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "lValueRequested": false,
                          "nodeType": "ElementaryTypeNameExpression",
                          "src": "20598:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_type$_t_uint256_$",
                            "typeString": "type(uint256)"
                          },
                          "typeName": "uint256"
                        },
                        "id": 599,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "typeConversion",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "20598:30:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "functionReturnParameters": 593,
                      "id": 600,
                      "nodeType": "Return",
                      "src": "20591:37:0"
                    }
                  ]
                },
                "documentation": "@dev Reads a uint256 value from a position in a byte array.\n @param b Byte array containing a uint256 value.\n @param index Index in byte array of uint256 value.\n @return uint256 value from byte array.",
                "id": 602,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "readUint256",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 590,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 587,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 602,
                      "src": "20463:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 586,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "20463:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 589,
                      "name": "index",
                      "nodeType": "VariableDeclaration",
                      "scope": 602,
                      "src": "20488:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 588,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20488:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "20452:56:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 593,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 592,
                      "name": "result",
                      "nodeType": "VariableDeclaration",
                      "scope": 602,
                      "src": "20559:14:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 591,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20559:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "20558:16:0"
                },
                "scope": 747,
                "src": "20432:204:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 619,
                  "nodeType": "Block",
                  "src": "21017:57:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 612,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 604,
                            "src": "21041:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 613,
                            "name": "index",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 606,
                            "src": "21044:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [
                              {
                                "argumentTypes": null,
                                "id": 615,
                                "name": "input",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 608,
                                "src": "21059:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              }
                            ],
                            "expression": {
                              "argumentTypes": [
                                {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              ],
                              "id": 614,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "lValueRequested": false,
                              "nodeType": "ElementaryTypeNameExpression",
                              "src": "21051:7:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_type$_t_bytes32_$",
                                "typeString": "type(bytes32)"
                              },
                              "typeName": "bytes32"
                            },
                            "id": 616,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "typeConversion",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "21051:14:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_bytes32",
                              "typeString": "bytes32"
                            }
                          ],
                          "id": 611,
                          "name": "writeBytes32",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 585,
                          "src": "21028:12:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$_t_bytes32_$returns$__$",
                            "typeString": "function (bytes memory,uint256,bytes32) pure"
                          }
                        },
                        "id": 617,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "21028:38:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 618,
                      "nodeType": "ExpressionStatement",
                      "src": "21028:38:0"
                    }
                  ]
                },
                "documentation": "@dev Writes a uint256 into a specific position in a byte array.\n @param b Byte array to insert <input> into.\n @param index Index in byte array of <input>.\n @param input uint256 to put into byte array.",
                "id": 620,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "writeUint256",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 609,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 604,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 620,
                      "src": "20910:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 603,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "20910:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 606,
                      "name": "index",
                      "nodeType": "VariableDeclaration",
                      "scope": 620,
                      "src": "20935:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 605,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20935:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 608,
                      "name": "input",
                      "nodeType": "VariableDeclaration",
                      "scope": 620,
                      "src": "20959:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 607,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "20959:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "20899:80:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 610,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "21017:0:0"
                },
                "scope": 747,
                "src": "20878:196:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 642,
                  "nodeType": "Block",
                  "src": "21468:432:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 635,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 630,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 622,
                                "src": "21501:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 631,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "21501:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 634,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 632,
                                "name": "index",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 624,
                                "src": "21513:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "argumentTypes": null,
                                "hexValue": "34",
                                "id": 633,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": true,
                                "kind": "number",
                                "lValueRequested": false,
                                "nodeType": "Literal",
                                "src": "21521:1:0",
                                "subdenomination": null,
                                "typeDescriptions": {
                                  "typeIdentifier": "t_rational_4_by_1",
                                  "typeString": "int_const 4"
                                },
                                "value": "4"
                              },
                              "src": "21513:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "21501:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "475245415445525f4f525f455155414c5f544f5f345f4c454e4754485f5245515549524544",
                            "id": 636,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "21537:39:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_e0eb74a17abed9b98211de36d035fbde4a6a5e52a39f50b60a39158103e500c2",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\""
                            },
                            "value": "GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_e0eb74a17abed9b98211de36d035fbde4a6a5e52a39f50b60a39158103e500c2",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_4_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 629,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "21479:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 637,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "21479:108:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 638,
                      "nodeType": "ExpressionStatement",
                      "src": "21479:108:0"
                    },
                    {
                      "externalReferences": [
                        {
                          "result": {
                            "declaration": 627,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "21622:6:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "b": {
                            "declaration": 622,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "21642:1:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "result": {
                            "declaration": 627,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "21769:6:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "result": {
                            "declaration": 627,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "21783:6:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 639,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    result := mload(add(b, 32))\n    result := and(result, 0xFFFFFFFF00000000000000000000000000000000000000000000000000000000)\n}",
                      "src": "21598:287:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 640,
                        "name": "result",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 627,
                        "src": "21886:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "functionReturnParameters": 628,
                      "id": 641,
                      "nodeType": "Return",
                      "src": "21879:13:0"
                    }
                  ]
                },
                "documentation": "@dev Reads an unpadded bytes4 value from a position in a byte array.\n @param b Byte array containing a bytes4 value.\n @param index Index in byte array of bytes4 value.\n @return bytes4 value from byte array.",
                "id": 643,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "readBytes4",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 625,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 622,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 643,
                      "src": "21352:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 621,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "21352:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 624,
                      "name": "index",
                      "nodeType": "VariableDeclaration",
                      "scope": 643,
                      "src": "21377:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 623,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "21377:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "21341:56:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 628,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 627,
                      "name": "result",
                      "nodeType": "VariableDeclaration",
                      "scope": 643,
                      "src": "21448:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes4",
                        "typeString": "bytes4"
                      },
                      "typeName": {
                        "id": 626,
                        "name": "bytes4",
                        "nodeType": "ElementaryTypeName",
                        "src": "21448:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes4",
                          "typeString": "bytes4"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "21447:15:0"
                },
                "scope": 747,
                "src": "21322:578:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 676,
                  "nodeType": "Block",
                  "src": "22392:527:0",
                  "statements": [
                    {
                      "assignments": [
                        653
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 653,
                          "name": "nestedBytesLength",
                          "nodeType": "VariableDeclaration",
                          "scope": 677,
                          "src": "22443:25:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 652,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "22443:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 658,
                      "initialValue": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "id": 655,
                            "name": "b",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 645,
                            "src": "22483:1:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 656,
                            "name": "index",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 647,
                            "src": "22486:5:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bytes_memory_ptr",
                              "typeString": "bytes memory"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 654,
                          "name": "readUint256",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 602,
                          "src": "22471:11:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$_t_uint256_$returns$_t_uint256_$",
                            "typeString": "function (bytes memory,uint256) pure returns (uint256)"
                          }
                        },
                        "id": 657,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22471:21:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "22443:49:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 661,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "leftHandSide": {
                          "argumentTypes": null,
                          "id": 659,
                          "name": "index",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 647,
                          "src": "22503:5:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          }
                        },
                        "nodeType": "Assignment",
                        "operator": "+=",
                        "rightHandSide": {
                          "argumentTypes": null,
                          "hexValue": "3332",
                          "id": 660,
                          "isConstant": false,
                          "isLValue": false,
                          "isPure": true,
                          "kind": "number",
                          "lValueRequested": false,
                          "nodeType": "Literal",
                          "src": "22512:2:0",
                          "subdenomination": null,
                          "typeDescriptions": {
                            "typeIdentifier": "t_rational_32_by_1",
                            "typeString": "int_const 32"
                          },
                          "value": "32"
                        },
                        "src": "22503:11:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "id": 662,
                      "nodeType": "ExpressionStatement",
                      "src": "22503:11:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 669,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 664,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 645,
                                "src": "22633:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 665,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "22633:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 668,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "id": 666,
                                "name": "index",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 647,
                                "src": "22645:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "argumentTypes": null,
                                "id": 667,
                                "name": "nestedBytesLength",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 653,
                                "src": "22653:17:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "22645:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "22633:37:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "475245415445525f4f525f455155414c5f544f5f4e45535445445f42595445535f4c454e4754485f5245515549524544",
                            "id": 670,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "22685:50:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_3029164509cd70e0f236815e1159ebfb4229c3703c04b5b34ff181546f674292",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\""
                            },
                            "value": "GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_3029164509cd70e0f236815e1159ebfb4229c3703c04b5b34ff181546f674292",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 663,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "22611:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 671,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "22611:135:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 672,
                      "nodeType": "ExpressionStatement",
                      "src": "22611:135:0"
                    },
                    {
                      "externalReferences": [
                        {
                          "result": {
                            "declaration": 650,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "22854:6:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "b": {
                            "declaration": 645,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "22868:1:0",
                            "valueSize": 1
                          }
                        },
                        {
                          "index": {
                            "declaration": 647,
                            "isOffset": false,
                            "isSlot": false,
                            "src": "22871:5:0",
                            "valueSize": 1
                          }
                        }
                      ],
                      "id": 673,
                      "nodeType": "InlineAssembly",
                      "operations": "{\n    result := add(b, index)\n}",
                      "src": "22830:74:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "id": 674,
                        "name": "result",
                        "nodeType": "Identifier",
                        "overloadedDeclarations": [],
                        "referencedDeclaration": 650,
                        "src": "22905:6:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_memory_ptr",
                          "typeString": "bytes memory"
                        }
                      },
                      "functionReturnParameters": 651,
                      "id": 675,
                      "nodeType": "Return",
                      "src": "22898:13:0"
                    }
                  ]
                },
                "documentation": "@dev Reads nested bytes from a specific position.\n @dev NOTE: the returned value overlaps with the input value.\n            Both should be treated as immutable.\n @param b Byte array containing nested bytes.\n @param index Index of nested bytes.\n @return result Nested bytes.",
                "id": 677,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "readBytesWithLength",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 648,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 645,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 677,
                      "src": "22270:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 644,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "22270:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 647,
                      "name": "index",
                      "nodeType": "VariableDeclaration",
                      "scope": 677,
                      "src": "22295:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 646,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "22295:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "22259:56:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 651,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 650,
                      "name": "result",
                      "nodeType": "VariableDeclaration",
                      "scope": 677,
                      "src": "22366:19:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 649,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "22366:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "22365:21:0"
                },
                "scope": 747,
                "src": "22231:688:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 714,
                  "nodeType": "Block",
                  "src": "23293:500:0",
                  "statements": [
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 695,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 687,
                                "name": "b",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 679,
                                "src": "23403:1:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 688,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "23403:8:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "commonType": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              },
                              "id": 694,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "leftExpression": {
                                "argumentTypes": null,
                                "commonType": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                },
                                "id": 691,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "leftExpression": {
                                  "argumentTypes": null,
                                  "id": 689,
                                  "name": "index",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 681,
                                  "src": "23415:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_uint256",
                                    "typeString": "uint256"
                                  }
                                },
                                "nodeType": "BinaryOperation",
                                "operator": "+",
                                "rightExpression": {
                                  "argumentTypes": null,
                                  "hexValue": "3332",
                                  "id": 690,
                                  "isConstant": false,
                                  "isLValue": false,
                                  "isPure": true,
                                  "kind": "number",
                                  "lValueRequested": false,
                                  "nodeType": "Literal",
                                  "src": "23423:2:0",
                                  "subdenomination": null,
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_rational_32_by_1",
                                    "typeString": "int_const 32"
                                  },
                                  "value": "32"
                                },
                                "src": "23415:10:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "nodeType": "BinaryOperation",
                              "operator": "+",
                              "rightExpression": {
                                "argumentTypes": null,
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 692,
                                  "name": "input",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 683,
                                  "src": "23428:5:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 693,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "length",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": null,
                                "src": "23428:12:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_uint256",
                                  "typeString": "uint256"
                                }
                              },
                              "src": "23415:25:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "23403:37:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "475245415445525f4f525f455155414c5f544f5f4e45535445445f42595445535f4c454e4754485f5245515549524544",
                            "id": 696,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "23484:50:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_3029164509cd70e0f236815e1159ebfb4229c3703c04b5b34ff181546f674292",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\""
                            },
                            "value": "GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_3029164509cd70e0f236815e1159ebfb4229c3703c04b5b34ff181546f674292",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_NESTED_BYTES_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 686,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "23381:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 697,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "23381:164:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 698,
                      "nodeType": "ExpressionStatement",
                      "src": "23381:164:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 704,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "arguments": [],
                              "expression": {
                                "argumentTypes": [],
                                "expression": {
                                  "argumentTypes": null,
                                  "id": 700,
                                  "name": "b",
                                  "nodeType": "Identifier",
                                  "overloadedDeclarations": [],
                                  "referencedDeclaration": 679,
                                  "src": "23614:1:0",
                                  "typeDescriptions": {
                                    "typeIdentifier": "t_bytes_memory_ptr",
                                    "typeString": "bytes memory"
                                  }
                                },
                                "id": 701,
                                "isConstant": false,
                                "isLValue": false,
                                "isPure": false,
                                "lValueRequested": false,
                                "memberName": "contentAddress",
                                "nodeType": "MemberAccess",
                                "referencedDeclaration": 288,
                                "src": "23614:16:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$bound_to$_t_bytes_memory_ptr_$",
                                  "typeString": "function (bytes memory) pure returns (uint256)"
                                }
                              },
                              "id": 702,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "kind": "functionCall",
                              "lValueRequested": false,
                              "names": [],
                              "nodeType": "FunctionCall",
                              "src": "23614:18:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 703,
                              "name": "index",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 681,
                              "src": "23635:5:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "23614:26:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "argumentTypes": null,
                                "id": 705,
                                "name": "input",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 683,
                                "src": "23655:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 706,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "rawAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 277,
                              "src": "23655:16:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$bound_to$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) pure returns (uint256)"
                              }
                            },
                            "id": 707,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "23655:18:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 711,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 708,
                                "name": "input",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 683,
                                "src": "23718:5:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 709,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "23718:12:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": "+",
                            "rightExpression": {
                              "argumentTypes": null,
                              "hexValue": "3332",
                              "id": 710,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": true,
                              "kind": "number",
                              "lValueRequested": false,
                              "nodeType": "Literal",
                              "src": "23733:2:0",
                              "subdenomination": null,
                              "typeDescriptions": {
                                "typeIdentifier": "t_rational_32_by_1",
                                "typeString": "int_const 32"
                              },
                              "value": "32"
                            },
                            "src": "23718:17:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 699,
                          "name": "memCopy",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 319,
                          "src": "23592:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                            "typeString": "function (uint256,uint256,uint256) pure"
                          }
                        },
                        "id": 712,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "23592:193:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 713,
                      "nodeType": "ExpressionStatement",
                      "src": "23592:193:0"
                    }
                  ]
                },
                "documentation": "@dev Inserts bytes at a specific position in a byte array.\n @param b Byte array to insert <input> into.\n @param index Index in byte array of <input>.\n @param input bytes to insert.",
                "id": 715,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "writeBytesWithLength",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 684,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 679,
                      "name": "b",
                      "nodeType": "VariableDeclaration",
                      "scope": 715,
                      "src": "23181:14:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 678,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "23181:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 681,
                      "name": "index",
                      "nodeType": "VariableDeclaration",
                      "scope": 715,
                      "src": "23206:13:0",
                      "stateVariable": false,
                      "storageLocation": "default",
                      "typeDescriptions": {
                        "typeIdentifier": "t_uint256",
                        "typeString": "uint256"
                      },
                      "typeName": {
                        "id": 680,
                        "name": "uint256",
                        "nodeType": "ElementaryTypeName",
                        "src": "23206:7:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 683,
                      "name": "input",
                      "nodeType": "VariableDeclaration",
                      "scope": 715,
                      "src": "23230:18:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 682,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "23230:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "23170:85:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 685,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "23293:0:0"
                },
                "scope": 747,
                "src": "23141:652:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              },
              {
                "body": {
                  "id": 745,
                  "nodeType": "Block",
                  "src": "24169:397:0",
                  "statements": [
                    {
                      "assignments": [
                        723
                      ],
                      "declarations": [
                        {
                          "constant": false,
                          "id": 723,
                          "name": "sourceLen",
                          "nodeType": "VariableDeclaration",
                          "scope": 746,
                          "src": "24180:17:0",
                          "stateVariable": false,
                          "storageLocation": "default",
                          "typeDescriptions": {
                            "typeIdentifier": "t_uint256",
                            "typeString": "uint256"
                          },
                          "typeName": {
                            "id": 722,
                            "name": "uint256",
                            "nodeType": "ElementaryTypeName",
                            "src": "24180:7:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          "value": null,
                          "visibility": "internal"
                        }
                      ],
                      "id": 726,
                      "initialValue": {
                        "argumentTypes": null,
                        "expression": {
                          "argumentTypes": null,
                          "id": 724,
                          "name": "source",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 719,
                          "src": "24200:6:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_bytes_memory_ptr",
                            "typeString": "bytes memory"
                          }
                        },
                        "id": 725,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "lValueRequested": false,
                        "memberName": "length",
                        "nodeType": "MemberAccess",
                        "referencedDeclaration": null,
                        "src": "24200:13:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_uint256",
                          "typeString": "uint256"
                        }
                      },
                      "nodeType": "VariableDeclarationStatement",
                      "src": "24180:33:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "commonType": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            "id": 731,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "lValueRequested": false,
                            "leftExpression": {
                              "argumentTypes": null,
                              "expression": {
                                "argumentTypes": null,
                                "id": 728,
                                "name": "dest",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 717,
                                "src": "24331:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 729,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "length",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": null,
                              "src": "24331:11:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "nodeType": "BinaryOperation",
                            "operator": ">=",
                            "rightExpression": {
                              "argumentTypes": null,
                              "id": 730,
                              "name": "sourceLen",
                              "nodeType": "Identifier",
                              "overloadedDeclarations": [],
                              "referencedDeclaration": 723,
                              "src": "24346:9:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_uint256",
                                "typeString": "uint256"
                              }
                            },
                            "src": "24331:24:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "hexValue": "475245415445525f4f525f455155414c5f544f5f534f555243455f42595445535f4c454e4754485f5245515549524544",
                            "id": 732,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": true,
                            "kind": "string",
                            "lValueRequested": false,
                            "nodeType": "Literal",
                            "src": "24370:50:0",
                            "subdenomination": null,
                            "typeDescriptions": {
                              "typeIdentifier": "t_stringliteral_99a6cabb0c35957f0725fe8f9f15e80aecf32a88b0965cd2f9cb4d7808332708",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\""
                            },
                            "value": "GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED"
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_bool",
                              "typeString": "bool"
                            },
                            {
                              "typeIdentifier": "t_stringliteral_99a6cabb0c35957f0725fe8f9f15e80aecf32a88b0965cd2f9cb4d7808332708",
                              "typeString": "literal_string \"GREATER_OR_EQUAL_TO_SOURCE_BYTES_LENGTH_REQUIRED\""
                            }
                          ],
                          "id": 727,
                          "name": "require",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [
                            765,
                            766
                          ],
                          "referencedDeclaration": 766,
                          "src": "24309:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_require_pure$_t_bool_$_t_string_memory_ptr_$returns$__$",
                            "typeString": "function (bool,string memory) pure"
                          }
                        },
                        "id": 733,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "24309:122:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 734,
                      "nodeType": "ExpressionStatement",
                      "src": "24309:122:0"
                    },
                    {
                      "expression": {
                        "argumentTypes": null,
                        "arguments": [
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "argumentTypes": null,
                                "id": 736,
                                "name": "dest",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 717,
                                "src": "24464:4:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 737,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "contentAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 288,
                              "src": "24464:19:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$bound_to$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) pure returns (uint256)"
                              }
                            },
                            "id": 738,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "24464:21:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "arguments": [],
                            "expression": {
                              "argumentTypes": [],
                              "expression": {
                                "argumentTypes": null,
                                "id": 739,
                                "name": "source",
                                "nodeType": "Identifier",
                                "overloadedDeclarations": [],
                                "referencedDeclaration": 719,
                                "src": "24500:6:0",
                                "typeDescriptions": {
                                  "typeIdentifier": "t_bytes_memory_ptr",
                                  "typeString": "bytes memory"
                                }
                              },
                              "id": 740,
                              "isConstant": false,
                              "isLValue": false,
                              "isPure": false,
                              "lValueRequested": false,
                              "memberName": "contentAddress",
                              "nodeType": "MemberAccess",
                              "referencedDeclaration": 288,
                              "src": "24500:21:0",
                              "typeDescriptions": {
                                "typeIdentifier": "t_function_internal_pure$_t_bytes_memory_ptr_$returns$_t_uint256_$bound_to$_t_bytes_memory_ptr_$",
                                "typeString": "function (bytes memory) pure returns (uint256)"
                              }
                            },
                            "id": 741,
                            "isConstant": false,
                            "isLValue": false,
                            "isPure": false,
                            "kind": "functionCall",
                            "lValueRequested": false,
                            "names": [],
                            "nodeType": "FunctionCall",
                            "src": "24500:23:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          },
                          {
                            "argumentTypes": null,
                            "id": 742,
                            "name": "sourceLen",
                            "nodeType": "Identifier",
                            "overloadedDeclarations": [],
                            "referencedDeclaration": 723,
                            "src": "24538:9:0",
                            "typeDescriptions": {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          }
                        ],
                        "expression": {
                          "argumentTypes": [
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            },
                            {
                              "typeIdentifier": "t_uint256",
                              "typeString": "uint256"
                            }
                          ],
                          "id": 735,
                          "name": "memCopy",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 319,
                          "src": "24442:7:0",
                          "typeDescriptions": {
                            "typeIdentifier": "t_function_internal_pure$_t_uint256_$_t_uint256_$_t_uint256_$returns$__$",
                            "typeString": "function (uint256,uint256,uint256) pure"
                          }
                        },
                        "id": 743,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": false,
                        "kind": "functionCall",
                        "lValueRequested": false,
                        "names": [],
                        "nodeType": "FunctionCall",
                        "src": "24442:116:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_tuple$__$",
                          "typeString": "tuple()"
                        }
                      },
                      "id": 744,
                      "nodeType": "ExpressionStatement",
                      "src": "24442:116:0"
                    }
                  ]
                },
                "documentation": "@dev Performs a deep copy of a byte array onto another byte array of greater than or equal length.\n @param dest Byte array that will be overwritten with source bytes.\n @param source Byte array to copy onto dest bytes.",
                "id": 746,
                "implemented": true,
                "isConstructor": false,
                "isDeclaredConst": true,
                "modifiers": [],
                "name": "deepCopyBytes",
                "nodeType": "FunctionDefinition",
                "parameters": {
                  "id": 720,
                  "nodeType": "ParameterList",
                  "parameters": [
                    {
                      "constant": false,
                      "id": 717,
                      "name": "dest",
                      "nodeType": "VariableDeclaration",
                      "scope": 746,
                      "src": "24077:17:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 716,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "24077:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    },
                    {
                      "constant": false,
                      "id": 719,
                      "name": "source",
                      "nodeType": "VariableDeclaration",
                      "scope": 746,
                      "src": "24105:19:0",
                      "stateVariable": false,
                      "storageLocation": "memory",
                      "typeDescriptions": {
                        "typeIdentifier": "t_bytes_memory_ptr",
                        "typeString": "bytes"
                      },
                      "typeName": {
                        "id": 718,
                        "name": "bytes",
                        "nodeType": "ElementaryTypeName",
                        "src": "24105:5:0",
                        "typeDescriptions": {
                          "typeIdentifier": "t_bytes_storage_ptr",
                          "typeString": "bytes"
                        }
                      },
                      "value": null,
                      "visibility": "internal"
                    }
                  ],
                  "src": "24066:65:0"
                },
                "payable": false,
                "returnParameters": {
                  "id": 721,
                  "nodeType": "ParameterList",
                  "parameters": [],
                  "src": "24169:0:0"
                },
                "scope": 747,
                "src": "24044:522:0",
                "stateMutability": "pure",
                "superFunction": null,
                "visibility": "internal"
              }
            ],
            "scope": 748,
            "src": "6009:18560:0"
          }
        ],
        "src": "71:24498:0"
      },
      "id": 0
    }
  }
}